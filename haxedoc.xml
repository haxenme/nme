<haxe>
	<class path="Array" params="T" file="/usr/lib/haxe/std/Array.hx" extern="1">
		<iterator public="1" set="method">
			<f a=""><t path="Iterator"><c path="Array.T"/></t></f>
			<haxe_doc>Returns an iterator of the Array values.</haxe_doc>
		</iterator>
		<copy public="1" set="method">
			<f a=""><c path="Array"><c path="Array.T"/></c></f>
			<haxe_doc>Returns a copy of the Array. The values are not
		copied, only the Array structure.</haxe_doc>
		</copy>
		<remove public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes the first occurence of [x].
		Returns false if [x] was not present.
		Elements are compared by using standard equality.</haxe_doc>
		</remove>
		<insert public="1" set="method">
			<f a="pos:x">
				<c path="Int"/>
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Inserts the element [x] at the position [pos].
		All elements after [pos] are moved one index ahead.</haxe_doc>
		</insert>
		<unshift public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds the element [x] at the start of the array.</haxe_doc>
		</unshift>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns a displayable representation of the Array content.</haxe_doc>
		</toString>
		<splice public="1" set="method">
			<f a="pos:len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Removes [len] elements starting from [pos] an returns them.</haxe_doc>
		</splice>
		<sort public="1" set="method">
			<f a="f">
				<f a=":">
					<c path="Array.T"/>
					<c path="Array.T"/>
					<c path="Int"/>
				</f>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[Sort the Array according to the comparison function [f].
		[f(x,y)] should return [0] if [x == y], [>0] if [x > y]
		and [<0] if [x < y].]]></haxe_doc>
		</sort>
		<slice public="1" set="method">
			<f a="pos:?end">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Copies the range of the array starting at [pos] up to,
		but not including, [end]. Both [pos] and [end] can be
		negative to count from the end: -1 is the last item in
		the array.</haxe_doc>
		</slice>
		<shift public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the first element and returns it.</haxe_doc>
		</shift>
		<reverse public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Reverse the order of elements of the Array.</haxe_doc>
		</reverse>
		<push public="1" set="method">
			<f a="x">
				<c path="Array.T"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Adds the element [x] at the end of the array.</haxe_doc>
		</push>
		<pop public="1" set="method">
			<f a=""><t path="Null"><c path="Array.T"/></t></f>
			<haxe_doc>Removes the last element of the array and returns it.</haxe_doc>
		</pop>
		<join public="1" set="method">
			<f a="sep">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a representation of an array with [sep] for separating each element.</haxe_doc>
		</join>
		<concat public="1" set="method">
			<f a="a">
				<c path="Array"><c path="Array.T"/></c>
				<c path="Array"><c path="Array.T"/></c>
			</f>
			<haxe_doc>Returns a new Array by appending [a] to [this].</haxe_doc>
		</concat>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The length of the Array</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new Array.</haxe_doc>
		</new>
		<haxe_doc>An Array is a storage for values. You can access it using indexes or
	with its API. On the server side, it's often better to use a [List] which
	is less memory and CPU consuming, unless you really need indexed access.</haxe_doc>
	</class>
	<class path="Class" params="T" file="/usr/lib/haxe/std/Class.hx" extern="1"><haxe_doc>An abstract type that represents a Class.
	See [Type] for the haXe Reflection API.</haxe_doc></class>
	<class path="Hash" params="T" file="/usr/lib/haxe/std/cpp/_std/Hash.hx">
		<toString public="1" set="method" line="76">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="61">
			<f a=""><t path="Iterator"><c path="Hash.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="52">
			<f a=""><t path="Iterator"><c path="String"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="45">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="41">
			<f a="key">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="37">
			<f a="key">
				<c path="String"/>
				<t path="Null"><c path="Hash.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="33">
			<f a="key:value">
				<c path="String"/>
				<c path="Hash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<__Internal><d/></__Internal>
		<new public="1" set="method" line="29">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [String] as keys.
	Other kind of keys are not possible on all platforms since they
	can't always be implemented efficiently.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="IntHash" params="T" file="/usr/lib/haxe/std/cpp/_std/IntHash.hx">
		<toString public="1" set="method" line="60">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an displayable representation of the hashtable content.</haxe_doc>
		</toString>
		<iterator public="1" set="method" line="55">
			<f a=""><t path="Iterator"><c path="IntHash.T"/></t></f>
			<haxe_doc>Returns an iterator of all values in the hashtable.</haxe_doc>
		</iterator>
		<keys public="1" set="method" line="50">
			<f a=""><t path="Iterator"><c path="Int"/></t></f>
			<haxe_doc>Returns an iterator of all keys in the hashtable.</haxe_doc>
		</keys>
		<remove public="1" set="method" line="46">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Removes a hashtable entry. Returns [true] if
		there was such entry.</haxe_doc>
		</remove>
		<exists public="1" set="method" line="42">
			<f a="key">
				<c path="Int"/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value exists for the given key.
		In particular, it's useful to tells if a key has
		a [null] value versus no value.</haxe_doc>
		</exists>
		<get public="1" set="method" line="38">
			<f a="key">
				<c path="Int"/>
				<t path="Null"><c path="IntHash.T"/></t>
			</f>
			<haxe_doc>Get a value for the given key.</haxe_doc>
		</get>
		<set public="1" set="method" line="34">
			<f a="key:value">
				<c path="Int"/>
				<c path="IntHash.T"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Set a value for the given key.</haxe_doc>
		</set>
		<h><d/></h>
		<new public="1" set="method" line="30">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new empty hashtable.</haxe_doc>
		</new>
		<haxe_doc>Hashtable over a set of elements, using [Int] as keys.
	On Flash and Javascript, the underlying structure is an Object.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="Std" params="" file="/usr/lib/haxe/std/cpp/_std/Std.hx">
		<is public="1" set="method" line="27" static="1">
			<f a="v:t">
				<d/>
				<d/>
				<e path="Bool"/>
			</f>
			<haxe_doc>Tells if a value v is of the type t.</haxe_doc>
		</is>
		<string public="1" set="method" line="31" static="1">
			<f a="s">
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc>Convert any value to a String</haxe_doc>
		</string>
		<int public="1" set="method" line="35" static="1">
			<f a="x">
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Convert a Float to an Int, rounded down.</haxe_doc>
		</int>
		<parseInt public="1" set="method" line="39" static="1">
			<f a="x">
				<c path="String"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>Convert a String to an Int, parsing different possible representations. Returns [null] if could not be parsed.</haxe_doc>
		</parseInt>
		<parseFloat public="1" set="method" line="43" static="1">
			<f a="x">
				<c path="String"/>
				<c path="Float"/>
			</f>
			<haxe_doc>Convert a String to a Float, parsing different possible reprensations.</haxe_doc>
		</parseFloat>
		<random public="1" set="method" line="47" static="1">
			<f a="x">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Return a random integer between 0 included and x excluded.</haxe_doc>
		</random>
		<haxe_doc>The Std class provides standard methods for manipulating basic types.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<enum path="Void" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes"><haxe_doc>The standard Void type. Only [null] values can be of the type [Void].</haxe_doc></enum>
	<class path="Float" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>The standard Float type, this is a double-precision IEEE 64bit float.</haxe_doc></class>
	<class path="Int" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1">
		<extends path="Float"/>
		<haxe_doc>The standard Int type. Its precision depends on the platform.</haxe_doc>
	</class>
	<typedef path="Null" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<c path="Null.T"/>
		<haxe_doc>[Null] can be useful in two cases. In order to document some methods
	that accepts or can return a [null] value, or for the Flash9 compiler and AS3
	generator to distinguish between base values that can be null and others that
	can't.</haxe_doc>
	</typedef>
	<enum path="Bool" params="" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<true/>
		<false/>
		<haxe_doc>The standard Boolean type is represented as an enum with two choices.</haxe_doc>
	</enum>
	<class path="Dynamic" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1"><haxe_doc>Dynamic is an internal compiler type which has special behavior.
	See the haXe language reference for more informations.</haxe_doc></class>
	<typedef path="Iterator" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a>
			<next set="method"><f a=""><c path="Iterator.T"/></f></next>
			<hasNext set="method"><f a=""><e path="Bool"/></f></hasNext>
		</a>
		<haxe_doc>An Iterator is a structure that permits to list a given container
	values. It can be used by your own data structures. See the haXe
	documentation for more informations.</haxe_doc>
	</typedef>
	<typedef path="Iterable" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes">
		<a><iterator set="method"><f a=""><t path="Iterator"><c path="Iterable.T"/></t></f></iterator></a>
		<haxe_doc>An Iterable is a data structure which has an iterator() method.
	See [Lambda] for generic functions on iterable structures.</haxe_doc>
	</typedef>
	<class path="ArrayAccess" params="T" file="/usr/lib/haxe/std/StdTypes.hx" module="StdTypes" extern="1" interface="1"><haxe_doc>ArrayAccess is used to indicate a class that can be accessed using brackets.
	The type parameter represent the type of the elements stored.</haxe_doc></class>
	<class path="String" params="" file="/usr/lib/haxe/std/String.hx" extern="1">
		<fromCharCode public="1" set="method" static="1"><f a="code">
	<c path="Int"/>
	<c path="String"/>
</f></fromCharCode>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the String itself.</haxe_doc>
		</toString>
		<substring public="1" set="method">
			<f a="startIndex:?endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[Returns a part of the String, taking from [startIndex] to [endIndex] - 1.
		If [endIndex] is not specified, length is used.
		If [startIndex] or [endIndex] is smaller than 0, than 0 is used.
		If [startIndex] > [endIndex] then they are swaped.]]></haxe_doc>
		</substring>
		<substr public="1" set="method">
			<f a="pos:?len">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns a part of the String, taking [len] characters starting from [pos].
		If [len] is not specified, it takes all the remaining characters.</haxe_doc>
		</substr>
		<split public="1" set="method">
			<f a="delimiter">
				<c path="String"/>
				<c path="Array"><c path="String"/></c>
			</f>
			<haxe_doc>Split the string using the specified delimiter.</haxe_doc>
		</split>
		<lastIndexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Similar to [indexOf] but returns the latest index.</haxe_doc>
		</lastIndexOf>
		<indexOf public="1" set="method">
			<f a="str:?startIndex">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>Returns the index of first occurence of [value]
		Returns [1-1] if [value] is not found.
		The optional [startIndex] parameter allows you to specify at which character to start searching.
		The position returned is still relative to the beginning of the string.</haxe_doc>
		</indexOf>
		<charCodeAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<t path="Null"><c path="Int"/></t>
			</f>
			<haxe_doc>Returns the character code at the given position.
		Returns [null] if outside of String bounds.</haxe_doc>
		</charCodeAt>
		<charAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc>Returns the character at the given position.
		Returns the empty String if outside of String bounds.</haxe_doc>
		</charAt>
		<toLowerCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been lowercased.</haxe_doc>
		</toLowerCase>
		<toUpperCase public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns an String where all characters have been uppercased.</haxe_doc>
		</toUpperCase>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc>The number of characters in the String.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="string">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Creates a copy from a given String.</haxe_doc>
		</new>
		<haxe_doc>The basic String class.</haxe_doc>
	</class>
	<class path="StringBuf" params="" file="/usr/lib/haxe/std/cpp/_std/StringBuf.hx">
		<toString public="1" get="inline" set="null" line="47">
			<f a=""><c path="String"/></f>
			<haxe_doc>Returns the content of the string buffer.
		The buffer is not emptied by this operation.</haxe_doc>
		</toString>
		<addChar public="1" get="inline" set="null" line="43">
			<f a="c">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a part of a string to the string buffer.</haxe_doc>
		</addChar>
		<addSub public="1" get="inline" set="null" line="39">
			<f a="s:pos:?len">
				<c path="String"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds a character to the string buffer.</haxe_doc>
		</addSub>
		<add public="1" get="inline" set="null" line="35">
			<f a="x">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>Adds the representation of any value to the string buffer.</haxe_doc>
		</add>
		<b><c path="Array"><d/></c></b>
		<new public="1" set="method" line="31">
			<f a=""><e path="Void"/></f>
			<haxe_doc>Creates a new string buffer.</haxe_doc>
		</new>
		<haxe_doc>A String buffer is an efficient way to build a big string by
	appending small elements together.</haxe_doc>
		<meta><m n=":core_api"/></meta>
	</class>
	<class path="haxe.Log" params="" file="/usr/lib/haxe/std/haxe/Log.hx">
		<trace public="1" set="dynamic" line="29" static="1"><f a="v:?infos">
	<d/>
	<t path="haxe.PosInfos"/>
	<e path="Void"/>
</f></trace>
		<clear public="1" set="dynamic" line="54" static="1"><f a=""><e path="Void"/></f></clear>
	</class>
	<typedef path="haxe.PosInfos" params="" file="/usr/lib/haxe/std/haxe/PosInfos.hx"><a>
	<methodName><c path="String"/></methodName>
	<lineNumber><c path="Int"/></lineNumber>
	<fileName><c path="String"/></fileName>
	<customParams>
		<c path="Array"><d/></c>
		<meta><m n=":optional"/></meta>
	</customParams>
	<className><c path="String"/></className>
</a></typedef>
	<typedef path="haxe.TimerList" params="" file="/Users/joshua/Development/Haxe/nme/haxe/Timer.hx" module="haxe.Timer"><c path="Array"><c path="haxe.Timer"/></c></typedef>
	<class path="nme.Loader" params="" file="/Users/joshua/Development/Haxe/nme/nme/Loader.hx" extern="1">
		<load public="1" set="method" static="1"><f a="func:args">
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></load>
		<loaderTrace public="1" set="method" static="1"><f a="inStr">
	<c path="String"/>
	<e path="Void"/>
</f></loaderTrace>
		<tryLoad public="1" set="method" static="1"><f a="inName:func:args">
	<c path="String"/>
	<c path="String"/>
	<c path="Int"/>
	<d/>
</f></tryLoad>
	</class>
	<class path="haxe.Timer" params="" file="/Users/joshua/Development/Haxe/nme/haxe/Timer.hx">
		<sRunningTimers line="106" static="1"><t path="haxe.TimerList"/></sRunningTimers>
		<measure public="1" params="T" set="method" line="123" static="1"><f a="f:?pos">
	<f a=""><c path="measure.T"/></f>
	<t path="haxe.PosInfos"/>
	<c path="measure.T"/>
</f></measure>
		<nmeNextWake public="1" set="method" line="154" static="1">
			<f a="limit">
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<haxe_doc>* @private</haxe_doc>
		</nmeNextWake>
		<nmeCheckTimers public="1" set="method" line="196" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* @private</haxe_doc>
		</nmeCheckTimers>
		<GetMS set="method" line="209" static="1"><f a=""><c path="Float"/></f></GetMS>
		<delay public="1" set="method" line="217" static="1"><f a="f:time">
	<f a=""><e path="Void"/></f>
	<c path="Int"/>
	<c path="haxe.Timer"/>
</f></delay>
		<stamp public="1" set="method" line="231" static="1"><f a=""><c path="Float"/></f></stamp>
		<nme_time_stamp line="238" static="1"><f a=""><c path="Float"/></f></nme_time_stamp>
		<nmeCheck set="method" line="181"><f a="inTime">
	<c path="Float"/>
	<e path="Void"/>
</f></nmeCheck>
		<stop public="1" set="method" line="139"><f a=""><e path="Void"/></f></stop>
		<run public="1" set="dynamic" line="132"><f a=""><e path="Void"/></f></run>
		<mRunning><e path="Bool"/></mRunning>
		<mFireAt><c path="Float"/></mFireAt>
		<mTime><c path="Float"/></mTime>
		<new public="1" set="method" line="113"><f a="time">
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.Assets" params="" file="/Users/joshua/Development/Haxe/nme/nme/Assets.hx">
		<cachedBitmapData public="1" line="32" static="1"><c path="Hash"><c path="nme.display.BitmapData"/></c></cachedBitmapData>
		<getBitmapData public="1" set="method" line="42" static="1">
			<f a="id:?useCache">
				<c path="String"/>
				<e path="Bool"/>
				<c path="nme.display.BitmapData"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded bitmap
	 * @usage		var bitmap = new Bitmap (Assets.getBitmapData ("image.jpg"));
	 * @param	id		The ID or asset path for the bitmap
	 * @param	useCache		(Optional) Whether to use BitmapData from the cache (Default: true)
	 * @return		A new BItmapData object</haxe_doc>
		</getBitmapData>
		<getBytes public="1" set="method" line="54" static="1">
			<f a="id">
				<c path="String"/>
				<c path="nme.utils.ByteArray"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded binary asset
	 * @usage		var bytes = Assets.getBytes ("file.zip");
	 * @param	id		The ID or asset path for the file
	 * @return		A new ByteArray object</haxe_doc>
		</getBytes>
		<getFont public="1" set="method" line="66" static="1">
			<f a="id">
				<c path="String"/>
				<c path="nme.text.Font"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded font
	 * @usage		var fontName = Assets.getFont ("font.ttf").fontName;
	 * @param	id		The ID or asset path for the font
	 * @return		A new Font object</haxe_doc>
		</getFont>
		<getSound public="1" set="method" line="78" static="1">
			<f a="id">
				<c path="String"/>
				<c path="nme.media.Sound"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded sound
	 * @usage		var sound = Assets.getSound ("sound.wav");
	 * @param	id		The ID or asset path for the sound
	 * @return		A new Sound object</haxe_doc>
		</getSound>
		<getText public="1" set="method" line="90" static="1">
			<f a="id">
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc>* Gets an instance of an embedded text asset
	 * @usage		var text = Assets.getText ("text.txt");
	 * @param	id		The ID or asset path for the file
	 * @return		A new String object</haxe_doc>
		</getText>
		<haxe_doc><![CDATA[* <p>The Assets class provides a cross-platform interface to access 
 * embedded images, fonts, sounds and other resource files.</p>
 * 
 * <p>The contents are populated automatically when an application
 * is compiled using the NME command-line tools, based on the
 * contents of the *.nmml project file.</p>
 * 
 * <p>For most platforms, the assets are included in the same directory
 * or package as the application, and the paths are handled
 * automatically. For web content, the assets are preloaded before
 * the start of the rest of the application. You can customize the 
 * preloader by extending the <code>NMEPreloader</code> class,
 * and specifying a custom preloader using <window preloader="" />
 * in the project file.</p>
 * 
 * @author Joshua Granick]]></haxe_doc>
	</class>
	<class path="nme.JNI" params="" file="/Users/joshua/Development/Haxe/nme/nme/JNI.hx" extern="1">
		<createMemberMethod public="1" set="method" static="1">
			<f a="className:memberName:signature:?useArray">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
				<d/>
			</f>
			<haxe_doc>* Create bindings to an class instance method in Java
	 * @param	className		The name of the target class in Java
	 * @param	memberName		The name of the target method
	 * @param	signature		The JNI string-based type signature for the method
	 * @param	useArray		Whether the method should accept multiple parameters, or a single array with the parameters to pass to Java
	 * @return		A method that calls Java. The first parameter is a handle for the Java object instance, the rest are passed into the method as arguments</haxe_doc>
		</createMemberMethod>
		<createStaticMethod public="1" set="method" static="1">
			<f a="className:memberName:signature:?useArray">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
				<d/>
			</f>
			<haxe_doc>* Create bindings to a static class method in Java
	 * @param	className		The name of the target class in Java
	 * @param	memberName		The name of the target method
	 * @param	signature		The JNI string-based type signature for the method
	 * @param	useArray		Whether the method should accept multiple parameters, or a single array with the parameters to pass to Java
	 * @return		A method that calls Java. Each argument is passed into the Java method as arguments</haxe_doc>
		</createStaticMethod>
	</class>
	<class path="nme.Lib" params="" file="/Users/joshua/Development/Haxe/nme/nme/Lib.hx">
		<FULLSCREEN public="1" line="13" static="1"><c path="Int"/></FULLSCREEN>
		<BORDERLESS public="1" line="14" static="1"><c path="Int"/></BORDERLESS>
		<RESIZABLE public="1" line="15" static="1"><c path="Int"/></RESIZABLE>
		<HARDWARE public="1" line="16" static="1"><c path="Int"/></HARDWARE>
		<VSYNC public="1" line="17" static="1"><c path="Int"/></VSYNC>
		<HW_AA public="1" line="18" static="1"><c path="Int"/></HW_AA>
		<HW_AA_HIRES public="1" line="19" static="1"><c path="Int"/></HW_AA_HIRES>
		<ALLOW_SHADERS public="1" line="20" static="1"><c path="Int"/></ALLOW_SHADERS>
		<REQUIRE_SHADERS public="1" line="21" static="1"><c path="Int"/></REQUIRE_SHADERS>
		<DEPTH_BUFFER public="1" line="22" static="1"><c path="Int"/></DEPTH_BUFFER>
		<STENCIL_BUFFER public="1" line="23" static="1"><c path="Int"/></STENCIL_BUFFER>
		<company public="1" get="nmeGetCompany" set="null" static="1"><c path="String"/></company>
		<current public="1" get="nmeGetCurrent" set="null" static="1"><c path="nme.display.MovieClip"/></current>
		<file public="1" get="nmeGetFile" set="null" static="1"><c path="String"/></file>
		<initHeight public="1" get="nmeGetInitHeight" set="null" static="1"><c path="Int"/></initHeight>
		<initWidth public="1" get="nmeGetInitWidth" set="null" static="1"><c path="Int"/></initWidth>
		<packageName public="1" get="nmeGetPackageName" set="null" static="1"><c path="String"/></packageName>
		<stage public="1" get="nmeGetStage" set="null" static="1"><c path="nme.display.Stage"/></stage>
		<version public="1" get="nmeGetVersion" set="null" static="1"><c path="String"/></version>
		<close public="1" set="method" line="39" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Closes the application.
	 * This is method is ignored in the Flash and HTML5 targets.</haxe_doc>
		</close>
		<create public="1" set="method" line="62" static="1">
			<f a="onLoaded:width:height:?frameRate:?color:?flags:?title:?icon">
				<f a=""><e path="Void"/></f>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Float"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
				<c path="nme.display.BitmapData"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a new application window. If you are using the NME
	 * command-line tools, this method will be called automatically
	 * as a part of the default platform templates.
	 * This is method is ignored in the Flash and HTML5 targets.
	 * @param	onLoaded		A method callback that is called once the window is created.
	 * @param	width		The requested width of the window. Use a width and height of 0 to request the full screen size.
	 * @param	height		The requested height of the window. Use a width and height of 0 to request the full screen size.
	 * @param	frameRate		The requested frame rate for the application.
	 * @param	color		An RGB color to use for the application background.
	 * @param	flags		A series of bit flags which can specify windowing options, like FULLSCREEN or HARDWARE
	 * @param	title		The title to use when creating the application window.
	 * @param	icon		An icon to use for the created application window.</haxe_doc>
		</create>
		<createManagedStage public="1" set="method" line="78" static="1">
			<f a="width:height">
				<c path="Int"/>
				<c path="Int"/>
				<unknown/>
			</f>
			<haxe_doc>* Creates a managed stage, for greater control customization and control
	 * of application events.
	 * This method is ignored in the Flash and HTML5 targets.
	 * @param	width		The requested width of the managed stage.
	 * @param	height		The requested width of the managed stage.</haxe_doc>
		</createManagedStage>
		<exit public="1" set="method" line="94" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Similar to the <code>close()</code> method, but the current 
	 * <code>Stage</code> object is given an opportunity to handle 
	 * the quit event before the application process is ended.
	 * This method is ignored in the Flash and HTML5 targets.]]></haxe_doc>
		</exit>
		<forceClose public="1" set="method" line="108" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Terminates the application process immediately without
	 * performing a clean shutdown.
	 * This method is ignored in the Flash and HTML5 targets.</haxe_doc>
		</forceClose>
		<getTimer public="1" get="inline" set="null" line="126" static="1">
			<f a=""><c path="Int"/></f>
			<haxe_doc><![CDATA[* Returns the time in milliseconds, relative to the start of
	 * the application. This is a high performance call in order to 
	 * help regulate time-based operations. Depending upon the
	 * target platform, this value may or may not be an absolute
	 * timestamp. If you need an exact time, you should use the
	 * <code>Date</code> object.
	 * @return		A relative time value in milliseconds.]]></haxe_doc>
		</getTimer>
		<getURL public="1" set="method" line="145" static="1">
			<f a="url:?target">
				<c path="nme.net.URLRequest"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Opens a browser window with the specified URL. 
	 * @param	url		The URL to open.
	 * @param	target		An optional window target value.</haxe_doc>
		</getURL>
		<pause public="1" set="method" line="164" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* For supported platforms, the NME application will be
	 * paused. This can help improve response times if fullscreen
	 * native UI element is being used temporarily.
	 * This method is ignored in the Flash and HTML5 targets.</haxe_doc>
		</pause>
		<postUICallback public="1" set="method" line="182" static="1">
			<f a="handler">
				<f a=""><e path="Void"/></f>
				<e path="Void"/>
			</f>
			<haxe_doc>* For some target platforms, NME operates on a separate thread
	 * than the native application UI. In these cases, you can use this
	 * method to make thread-safe calls to the native UI.
	 * 
	 * If the platform does not require thread-safe callbacks, the 
	 * handler method will be called immediately.
	 * @param	handler		The method handler you wish to call when the UI is available.</haxe_doc>
		</postUICallback>
		<resume public="1" set="method" line="199" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Resumes the NME application. For certain platforms,
	 * pausing the application can improve response times when
	 * a fullscreen native UI element is being displayed.
	 * This method is ignored in the Flash and HTML5 targets.</haxe_doc>
		</resume>
		<setPackage public="1" set="method" line="218" static="1">
			<f a="company:file:packageName:version">
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Specifies meta-data for the running application. If you are using 
	 * the NME command-line tools, this method will be called automatically
	 * as a part of the default platform templates.
	 * This method is ignored in the Flash and HTML5 targets.
	 * @param	company		The company name for the application.
	 * @param	file		The file name for the application.
	 * @param	packageName		The package name of the application.
	 * @param	version		The version string of the application.</haxe_doc>
		</setPackage>
		<trace public="1" set="method" line="231" static="1">
			<f a="arg">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sends a <code>trace</code> call for the current platform.
	 * @param	arg]]></haxe_doc>
		</trace>
		<nmeGetCompany set="method" line="250" static="1"><f a=""><c path="String"/></f></nmeGetCompany>
		<nmeGetCurrent set="method" line="260" static="1"><f a=""><c path="nme.display.MovieClip"/></f></nmeGetCurrent>
		<nmeGetFile set="method" line="274" static="1"><f a=""><c path="String"/></f></nmeGetFile>
		<nmeGetInitHeight set="method" line="284" static="1"><f a=""><c path="Int"/></f></nmeGetInitHeight>
		<nmeGetInitWidth set="method" line="294" static="1"><f a=""><c path="Int"/></f></nmeGetInitWidth>
		<nmeGetPackageName set="method" line="304" static="1"><f a=""><c path="String"/></f></nmeGetPackageName>
		<nmeGetStage set="method" line="314" static="1"><f a=""><c path="nme.display.Stage"/></f></nmeGetStage>
		<nmeGetVersion set="method" line="326" static="1"><f a=""><c path="String"/></f></nmeGetVersion>
	</class>
	<class path="nme.Memory" params="" file="/Users/joshua/Development/Haxe/nme/nme/Memory.hx" extern="1">
		<select public="1" set="method" static="1"><f a="inBytes">
	<c path="nme.utils.ByteArray"/>
	<e path="Void"/>
</f></select>
		<getByte public="1" set="method" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getByte>
		<getDouble public="1" set="method" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Float"/>
</f></getDouble>
		<getFloat public="1" set="method" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Float"/>
</f></getFloat>
		<getI32 public="1" set="method" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getI32>
		<getUI16 public="1" set="method" static="1"><f a="addr">
	<c path="Int"/>
	<c path="Int"/>
</f></getUI16>
		<setByte public="1" set="method" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setByte>
		<setDouble public="1" set="method" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setDouble>
		<setFloat public="1" set="method" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Float"/>
	<e path="Void"/>
</f></setFloat>
		<setI16 public="1" set="method" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setI16>
		<setI32 public="1" set="method" static="1"><f a="addr:v">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></setI32>
	</class>
	<class path="nme.ObjectHash" params="K:T" file="/Users/joshua/Development/Haxe/nme/nme/ObjectHash.hx">
		<nextObjectID line="19" static="1">
			<c path="Int"/>
			<haxe_doc>@private</haxe_doc>
		</nextObjectID>
		<set public="1" get="inline" set="null" line="155"><f a="key:value">
	<c path="nme.ObjectHash.K"/>
	<c path="nme.ObjectHash.T"/>
	<e path="Void"/>
</f></set>
		<remove public="1" get="inline" set="null" line="137"><f a="key">
	<c path="nme.ObjectHash.K"/>
	<e path="Void"/>
</f></remove>
		<keys public="1" get="inline" set="null" line="122"><f a=""><t path="Iterator"><c path="nme.ObjectHash.K"/></t></f></keys>
		<iterator public="1" get="inline" set="null" line="99"><f a=""><t path="Iterator"><c path="nme.ObjectHash.T"/></t></f></iterator>
		<getID get="inline" set="null" line="68">
			<f a="key">
				<c path="nme.ObjectHash.K"/>
				<c path="Int"/>
			</f>
			<haxe_doc>@private</haxe_doc>
		</getID>
		<get public="1" get="inline" set="null" line="53"><f a="key">
	<c path="nme.ObjectHash.K"/>
	<c path="nme.ObjectHash.T"/>
</f></get>
		<exists public="1" get="inline" set="null" line="38"><f a="key">
	<c path="nme.ObjectHash.K"/>
	<e path="Bool"/>
</f></exists>
		<hashValues>
			<c path="IntHash"><c path="nme.ObjectHash.T"/></c>
			<haxe_doc>@private</haxe_doc>
		</hashValues>
		<hashKeys>
			<c path="IntHash"><c path="nme.ObjectHash.K"/></c>
			<haxe_doc>@private</haxe_doc>
		</hashKeys>
		<new public="1" set="method" line="22"><f a=""><e path="Void"/></f></new>
	</class>
	<typedef path="nme.Vector" params="T" file="/Users/joshua/Development/Haxe/nme/nme/Vector.hx"><c path="Array"><c path="nme.Vector.T"/></c></typedef>
	<class path="nme.VectorHelper" params="" file="/Users/joshua/Development/Haxe/nme/nme/Vector.hx" module="nme.Vector"><ofArray public="1" params="T" get="inline" set="null" line="12" static="1"><f a="v:array">
	<c path="Class"><t path="nme.Vector"><d/></t></c>
	<c path="Array"><c path="ofArray.T"/></c>
	<t path="nme.Vector"><c path="ofArray.T"/></t>
</f></ofArray></class>
	<class path="nme.events.IEventDispatcher" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/IEventDispatcher.hx" extern="1" interface="1">
		<willTrigger public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></willTrigger>
		<removeEventListener public="1" set="method"><f a="type:listener:?useCapture">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<e path="Void"/>
</f></removeEventListener>
		<hasEventListener public="1" set="method"><f a="type">
	<c path="String"/>
	<e path="Bool"/>
</f></hasEventListener>
		<dispatchEvent public="1" set="method"><f a="event">
	<c path="nme.events.Event"/>
	<e path="Bool"/>
</f></dispatchEvent>
		<addEventListener public="1" set="method"><f a="type:listener:?useCapture:?priority:?useWeakReference">
	<c path="String"/>
	<f a="">
		<d/>
		<e path="Void"/>
	</f>
	<e path="Bool"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></addEventListener>
	</class>
	<class path="nme.events.EventDispatcher" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/EventDispatcher.hx" extern="1">
		<implements path="nme.events.IEventDispatcher"/>
		<willTrigger public="1" set="method">
			<f a="type">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Checks whether an event listener is registered with this EventDispatcher
	 * object or any of its ancestors for the specified event type. This method
	 * returns <code>true</code> if an event listener is triggered during any
	 * phase of the event flow when an event of the specified type is dispatched
	 * to this EventDispatcher object or any of its descendants.
	 *
	 * <p>The difference between the <code>hasEventListener()</code> and the
	 * <code>willTrigger()</code> methods is that <code>hasEventListener()</code>
	 * examines only the object to which it belongs, whereas the
	 * <code>willTrigger()</code> method examines the entire event flow for the
	 * event specified by the <code>type</code> parameter. </p>
	 *
	 * <p>When <code>willTrigger()</code> is called from a LoaderInfo object,
	 * only the listeners that the caller can access are considered.</p>
	 * 
	 * @param type The type of event.
	 * @return A value of <code>true</code> if a listener of the specified type
	 *         will be triggered; <code>false</code> otherwise.]]></haxe_doc>
		</willTrigger>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<removeEventListener public="1" set="method">
			<f a="type:listener:?useCapture">
				<c path="String"/>
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Removes a listener from the EventDispatcher object. If there is no
	 * matching listener registered with the EventDispatcher object, a call to
	 * this method has no effect.
	 * 
	 * @param type       The type of event.
	 * @param useCapture Specifies whether the listener was registered for the
	 *                   capture phase or the target and bubbling phases. If the
	 *                   listener was registered for both the capture phase and
	 *                   the target and bubbling phases, two calls to
	 *                   <code>removeEventListener()</code> are required to
	 *                   remove both, one call with <code>useCapture()</code> set
	 *                   to <code>true</code>, and another call with
	 *                   <code>useCapture()</code> set to <code>false</code>.]]></haxe_doc>
		</removeEventListener>
		<hasEventListener public="1" set="method">
			<f a="type">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Checks whether the EventDispatcher object has any listeners registered for
	 * a specific type of event. This allows you to determine where an
	 * EventDispatcher object has altered handling of an event type in the event
	 * flow hierarchy. To determine whether a specific event type actually
	 * triggers an event listener, use <code>willTrigger()</code>.
	 *
	 * <p>The difference between <code>hasEventListener()</code> and
	 * <code>willTrigger()</code> is that <code>hasEventListener()</code>
	 * examines only the object to which it belongs, whereas
	 * <code>willTrigger()</code> examines the entire event flow for the event
	 * specified by the <code>type</code> parameter. </p>
	 *
	 * <p>When <code>hasEventListener()</code> is called from a LoaderInfo
	 * object, only the listeners that the caller can access are considered.</p>
	 * 
	 * @param type The type of event.
	 * @return A value of <code>true</code> if a listener of the specified type
	 *         is registered; <code>false</code> otherwise.]]></haxe_doc>
		</hasEventListener>
		<dispatchEvent public="1" set="method">
			<f a="event">
				<c path="nme.events.Event"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Dispatches an event into the event flow. The event target is the
	 * EventDispatcher object upon which the <code>dispatchEvent()</code> method
	 * is called.
	 * 
	 * @param event The Event object that is dispatched into the event flow. If
	 *              the event is being redispatched, a clone of the event is
	 *              created automatically. After an event is dispatched, its
	 *              <code>target</code> property cannot be changed, so you must
	 *              create a new copy of the event for redispatching to work.
	 * @return A value of <code>true</code> if the event was successfully
	 *         dispatched. A value of <code>false</code> indicates failure or
	 *         that <code>preventDefault()</code> was called on the event.
	 * @throws Error The event dispatch recursion limit has been reached.]]></haxe_doc>
		</dispatchEvent>
		<addEventListener public="1" set="method">
			<f a="type:listener:?useCapture:?priority:?useWeakReference">
				<c path="String"/>
				<f a="">
					<d/>
					<e path="Void"/>
				</f>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Registers an event listener object with an EventDispatcher object so that
	 * the listener receives notification of an event. You can register event
	 * listeners on all nodes in the display list for a specific type of event,
	 * phase, and priority.
	 *
	 * <p>After you successfully register an event listener, you cannot change
	 * its priority through additional calls to <code>addEventListener()</code>.
	 * To change a listener's priority, you must first call
	 * <code>removeListener()</code>. Then you can register the listener again
	 * with the new priority level. </p>
	 *
	 * <p>Keep in mind that after the listener is registered, subsequent calls to
	 * <code>addEventListener()</code> with a different <code>type</code> or
	 * <code>useCapture</code> value result in the creation of a separate
	 * listener registration. For example, if you first register a listener with
	 * <code>useCapture</code> set to <code>true</code>, it listens only during
	 * the capture phase. If you call <code>addEventListener()</code> again using
	 * the same listener object, but with <code>useCapture</code> set to
	 * <code>false</code>, you have two separate listeners: one that listens
	 * during the capture phase and another that listens during the target and
	 * bubbling phases. </p>
	 *
	 * <p>You cannot register an event listener for only the target phase or the
	 * bubbling phase. Those phases are coupled during registration because
	 * bubbling applies only to the ancestors of the target node.</p>
	 *
	 * <p>If you no longer need an event listener, remove it by calling
	 * <code>removeEventListener()</code>, or memory problems could result. Event
	 * listeners are not automatically removed from memory because the garbage
	 * collector does not remove the listener as long as the dispatching object
	 * exists (unless the <code>useWeakReference</code> parameter is set to
	 * <code>true</code>).</p>
	 *
	 * <p>Copying an EventDispatcher instance does not copy the event listeners
	 * attached to it. (If your newly created node needs an event listener, you
	 * must attach the listener after creating the node.) However, if you move an
	 * EventDispatcher instance, the event listeners attached to it move along
	 * with it.</p>
	 *
	 * <p>If the event listener is being registered on a node while an event is
	 * being processed on this node, the event listener is not triggered during
	 * the current phase but can be triggered during a later phase in the event
	 * flow, such as the bubbling phase.</p>
	 *
	 * <p>If an event listener is removed from a node while an event is being
	 * processed on the node, it is still triggered by the current actions. After
	 * it is removed, the event listener is never invoked again (unless
	 * registered again for future processing). </p>
	 * 
	 * @param type             The type of event.
	 * @param useCapture       Determines whether the listener works in the
	 *                         capture phase or the target and bubbling phases.
	 *                         If <code>useCapture</code> is set to
	 *                         <code>true</code>, the listener processes the
	 *                         event only during the capture phase and not in the
	 *                         target or bubbling phase. If
	 *                         <code>useCapture</code> is <code>false</code>, the
	 *                         listener processes the event only during the
	 *                         target or bubbling phase. To listen for the event
	 *                         in all three phases, call
	 *                         <code>addEventListener</code> twice, once with
	 *                         <code>useCapture</code> set to <code>true</code>,
	 *                         then again with <code>useCapture</code> set to
	 *                         <code>false</code>.
	 * @param priority         The priority level of the event listener. The
	 *                         priority is designated by a signed 32-bit integer.
	 *                         The higher the number, the higher the priority.
	 *                         All listeners with priority <i>n</i> are processed
	 *                         before listeners of priority <i>n</i>-1. If two or
	 *                         more listeners share the same priority, they are
	 *                         processed in the order in which they were added.
	 *                         The default priority is 0.
	 * @param useWeakReference Determines whether the reference to the listener
	 *                         is strong or weak. A strong reference (the
	 *                         default) prevents your listener from being
	 *                         garbage-collected. A weak reference does not.
	 *
	 *                         <p>Class-level member functions are not subject to
	 *                         garbage collection, so you can set
	 *                         <code>useWeakReference</code> to <code>true</code>
	 *                         for class-level member functions without
	 *                         subjecting them to garbage collection. If you set
	 *                         <code>useWeakReference</code> to <code>true</code>
	 *                         for a listener that is a nested inner function,
	 *                         the function will be garbage-collected and no
	 *                         longer persistent. If you create references to the
	 *                         inner function (save it in another variable) then
	 *                         it is not garbage-collected and stays
	 *                         persistent.</p>
	 * @throws ArgumentError The <code>listener</code> specified is not a
	 *                       function.]]></haxe_doc>
		</addEventListener>
		<new public="1" set="method">
			<f a="?target">
				<c path="nme.events.IEventDispatcher"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Aggregates an instance of the EventDispatcher class.
	 *
	 * <p>The EventDispatcher class is generally used as a base class, which
	 * means that most developers do not need to use this constructor function.
	 * However, advanced developers who are implementing the IEventDispatcher
	 * interface need to use this constructor. If you are unable to extend the
	 * EventDispatcher class and must instead implement the IEventDispatcher
	 * interface, use this constructor to aggregate an instance of the
	 * EventDispatcher class.</p>
	 * 
	 * @param target The target object for events dispatched to the
	 *               EventDispatcher object. This parameter is used when the
	 *               EventDispatcher instance is aggregated by a class that
	 *               implements IEventDispatcher; it is necessary so that the
	 *               containing object can be the target for events. Do not use
	 *               this parameter in simple cases in which a class extends
	 *               EventDispatcher.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The EventDispatcher class is the base class for all classes that dispatch
 * events. The EventDispatcher class implements the IEventDispatcher interface
 * and is the base class for the DisplayObject class. The EventDispatcher
 * class allows any object on the display list to be an event target and as
 * such, to use the methods of the IEventDispatcher interface.
 *
 * <p>Event targets are an important part of the Flash<sup>®</sup> Player and
 * Adobe<sup>®</sup> AIR<sup>®</sup> event model. The event target serves as
 * the focal point for how events flow through the display list hierarchy.
 * When an event such as a mouse click or a keypress occurs, Flash Player or
 * the AIR application dispatches an event object into the event flow from the
 * root of the display list. The event object then makes its way through the
 * display list until it reaches the event target, at which point it begins
 * its return trip through the display list. This round-trip journey to the
 * event target is conceptually divided into three phases: the capture phase
 * comprises the journey from the root to the last node before the event
 * target's node, the target phase comprises only the event target node, and
 * the bubbling phase comprises any subsequent nodes encountered on the return
 * trip to the root of the display list.</p>
 *
 * <p>In general, the easiest way for a user-defined class to gain event
 * dispatching capabilities is to extend EventDispatcher. If this is
 * impossible (that is, if the class is already extending another class), you
 * can instead implement the IEventDispatcher interface, create an
 * EventDispatcher member, and write simple hooks to route calls into the
 * aggregated EventDispatcher.</p>
 * 
 * @event activate   [broadcast event] Dispatched when the Flash Player or AIR
 *                   application gains operating system focus and becomes
 *                   active. This event is a broadcast event, which means that
 *                   it is dispatched by all EventDispatcher objects with a
 *                   listener registered for this event. For more information
 *                   about broadcast events, see the DisplayObject class.
 * @event deactivate [broadcast event] Dispatched when the Flash Player or AIR
 *                   application operating loses system focus and is becoming
 *                   inactive. This event is a broadcast event, which means
 *                   that it is dispatched by all EventDispatcher objects with
 *                   a listener registered for this event. For more
 *                   information about broadcast events, see the DisplayObject
 *                   class.]]></haxe_doc>
	</class>
	<class path="nme.display.IBitmapDrawable" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/IBitmapDrawable.hx" extern="1" interface="1"/>
	<class path="nme.display.DisplayObject" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/DisplayObject.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<implements path="nme.display.IBitmapDrawable"/>
		<localToGlobal public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Converts the <code>point</code> object from the display object's (local)
	 * coordinates to the Stage (global) coordinates.
	 *
	 * <p>This method allows you to convert any given <i>x</i> and <i>y</i>
	 * coordinates from values that are relative to the origin (0,0) of a
	 * specific display object (local coordinates) to values that are relative to
	 * the origin of the Stage (global coordinates).</p>
	 *
	 * <p>To use this method, first create an instance of the Point class. The
	 * <i>x</i> and <i>y</i> values that you assign represent local coordinates
	 * because they relate to the origin of the display object.</p>
	 *
	 * <p>You then pass the Point instance that you created as the parameter to
	 * the <code>localToGlobal()</code> method. The method returns a new Point
	 * object with <i>x</i> and <i>y</i> values that relate to the origin of the
	 * Stage instead of the origin of the display object.</p>
	 * 
	 * @param point The name or identifier of a point created with the Point
	 *              class, specifying the <i>x</i> and <i>y</i> coordinates as
	 *              properties.
	 * @return A Point object with coordinates relative to the Stage.]]></haxe_doc>
		</localToGlobal>
		<hitTestPoint public="1" set="method">
			<f a="x:y:?shapeFlag">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Bool"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Evaluates the display object to see if it overlaps or intersects with the
	 * point specified by the <code>x</code> and <code>y</code> parameters. The
	 * <code>x</code> and <code>y</code> parameters specify a point in the
	 * coordinate space of the Stage, not the display object container that
	 * contains the display object (unless that display object container is the
	 * Stage).
	 * 
	 * @param x         The <i>x</i> coordinate to test against this object.
	 * @param y         The <i>y</i> coordinate to test against this object.
	 * @param shapeFlag Whether to check against the actual pixels of the object
	 *                  (<code>true</code>) or the bounding box
	 *                  (<code>false</code>).
	 * @return <code>true</code> if the display object overlaps or intersects
	 *         with the specified point; <code>false</code> otherwise.]]></haxe_doc>
		</hitTestPoint>
		<hitTestObject public="1" set="method">
			<f a="obj">
				<c path="nme.display.DisplayObject"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Evaluates the bounding box of the display object to see if it overlaps or
	 * intersects with the bounding box of the <code>obj</code> display object.
	 * 
	 * @param obj The display object to test against.
	 * @return <code>true</code> if the bounding boxes of the display objects
	 *         intersect; <code>false</code> if not.]]></haxe_doc>
		</hitTestObject>
		<globalToLocal public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Converts the <code>point</code> object from the Stage (global) coordinates
	 * to the display object's (local) coordinates.
	 *
	 * <p>To use this method, first create an instance of the Point class. The
	 * <i>x</i> and <i>y</i> values that you assign represent global coordinates
	 * because they relate to the origin (0,0) of the main display area. Then
	 * pass the Point instance as the parameter to the
	 * <code>globalToLocal()</code> method. The method returns a new Point object
	 * with <i>x</i> and <i>y</i> values that relate to the origin of the display
	 * object instead of the origin of the Stage.</p>
	 * 
	 * @param point An object created with the Point class. The Point object
	 *              specifies the <i>x</i> and <i>y</i> coordinates as
	 *              properties.
	 * @return A Point object with coordinates relative to the display object.]]></haxe_doc>
		</globalToLocal>
		<getRect public="1" set="method">
			<f a="targetCoordinateSpace">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Returns a rectangle that defines the boundary of the display object, based
	 * on the coordinate system defined by the <code>targetCoordinateSpace</code>
	 * parameter, excluding any strokes on shapes. The values that the
	 * <code>getRect()</code> method returns are the same or smaller than those
	 * returned by the <code>getBounds()</code> method.
	 *
	 * <p><b>Note:</b> Use <code>localToGlobal()</code> and
	 * <code>globalToLocal()</code> methods to convert the display object's local
	 * coordinates to Stage coordinates, or Stage coordinates to local
	 * coordinates, respectively.</p>
	 * 
	 * @param targetCoordinateSpace The display object that defines the
	 *                              coordinate system to use.
	 * @return The rectangle that defines the area of the display object relative
	 *         to the <code>targetCoordinateSpace</code> object's coordinate
	 *         system.]]></haxe_doc>
		</getRect>
		<getBounds public="1" set="method">
			<f a="targetCoordinateSpace">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Returns a rectangle that defines the area of the display object relative
	 * to the coordinate system of the <code>targetCoordinateSpace</code> object.
	 * Consider the following code, which shows how the rectangle returned can
	 * vary depending on the <code>targetCoordinateSpace</code> parameter that
	 * you pass to the method:
	 *
	 * <p><b>Note:</b> Use the <code>localToGlobal()</code> and
	 * <code>globalToLocal()</code> methods to convert the display object's local
	 * coordinates to display coordinates, or display coordinates to local
	 * coordinates, respectively.</p>
	 *
	 * <p>The <code>getBounds()</code> method is similar to the
	 * <code>getRect()</code> method; however, the Rectangle returned by the
	 * <code>getBounds()</code> method includes any strokes on shapes, whereas
	 * the Rectangle returned by the <code>getRect()</code> method does not. For
	 * an example, see the description of the <code>getRect()</code> method.</p>
	 * 
	 * @param targetCoordinateSpace The display object that defines the
	 *                              coordinate system to use.
	 * @return The rectangle that defines the area of the display object relative
	 *         to the <code>targetCoordinateSpace</code> object's coordinate
	 *         system.]]></haxe_doc>
		</getBounds>
		<y public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the <i>y</i> coordinate of the DisplayObject instance relative
	 * to the local coordinates of the parent DisplayObjectContainer. If the
	 * object is inside a DisplayObjectContainer that has transformations, it is
	 * in the local coordinate system of the enclosing DisplayObjectContainer.
	 * Thus, for a DisplayObjectContainer rotated 90° counterclockwise, the
	 * DisplayObjectContainer's children inherit a coordinate system that is
	 * rotated 90° counterclockwise. The object's coordinates refer to the
	 * registration point position.]]></haxe_doc>
		</y>
		<x public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the <i>x</i> coordinate of the DisplayObject instance relative
	 * to the local coordinates of the parent DisplayObjectContainer. If the
	 * object is inside a DisplayObjectContainer that has transformations, it is
	 * in the local coordinate system of the enclosing DisplayObjectContainer.
	 * Thus, for a DisplayObjectContainer rotated 90° counterclockwise, the
	 * DisplayObjectContainer's children inherit a coordinate system that is
	 * rotated 90° counterclockwise. The object's coordinates refer to the
	 * registration point position.]]></haxe_doc>
		</x>
		<width public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the width of the display object, in pixels. The width is
	 * calculated based on the bounds of the content of the display object. When
	 * you set the <code>width</code> property, the <code>scaleX</code> property
	 * is adjusted accordingly, as shown in the following code:
	 *
	 * <p>Except for TextField and Video objects, a display object with no
	 * content (such as an empty sprite) has a width of 0, even if you try to set
	 * <code>width</code> to a different value.</p>]]></haxe_doc>
		</width>
		<visible public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Whether or not the display object is visible. Display objects that are not
	 * visible are disabled. For example, if <code>visible=false</code> for an
	 * InteractiveObject instance, it cannot be clicked.]]></haxe_doc>
		</visible>
		<transform public="1">
			<c path="nme.geom.Transform"/>
			<haxe_doc><![CDATA[* An object with properties pertaining to a display object's matrix, color
	 * transform, and pixel bounds. The specific properties  -  matrix,
	 * colorTransform, and three read-only properties
	 * (<code>concatenatedMatrix</code>, <code>concatenatedColorTransform</code>,
	 * and <code>pixelBounds</code>)  -  are described in the entry for the
	 * Transform class.
	 *
	 * <p>Each of the transform object's properties is itself an object. This
	 * concept is important because the only way to set new values for the matrix
	 * or colorTransform objects is to create a new object and copy that object
	 * into the transform.matrix or transform.colorTransform property.</p>
	 *
	 * <p>For example, to increase the <code>tx</code> value of a display
	 * object's matrix, you must make a copy of the entire matrix object, then
	 * copy the new object into the matrix property of the transform object:</p>
	 * <pre xml:space="preserve"><code> var myMatrix:Matrix =
	 * myDisplayObject.transform.matrix; myMatrix.tx += 10;
	 * myDisplayObject.transform.matrix = myMatrix; </code></pre>
	 *
	 * <p>You cannot directly set the <code>tx</code> property. The following
	 * code has no effect on <code>myDisplayObject</code>: </p>
	 * <pre xml:space="preserve"><code> myDisplayObject.transform.matrix.tx +=
	 * 10; </code></pre>
	 *
	 * <p>You can also copy an entire transform object and assign it to another
	 * display object's transform property. For example, the following code
	 * copies the entire transform object from <code>myOldDisplayObj</code> to
	 * <code>myNewDisplayObj</code>:</p>
	 * <code>myNewDisplayObj.transform = myOldDisplayObj.transform;</code>
	 *
	 * <p>The resulting display object, <code>myNewDisplayObj</code>, now has the
	 * same values for its matrix, color transform, and pixel bounds as the old
	 * display object, <code>myOldDisplayObj</code>.</p>
	 *
	 * <p>Note that AIR for TV devices use hardware acceleration, if it is
	 * available, for color transforms.</p>]]></haxe_doc>
		</transform>
		<stage public="1" set="null">
			<c path="nme.display.Stage"/>
			<haxe_doc><![CDATA[* The Stage of the display object. A Flash runtime application has only one
	 * Stage object. For example, you can create and load multiple display
	 * objects into the display list, and the <code>stage</code> property of each
	 * display object refers to the same Stage object (even if the display object
	 * belongs to a loaded SWF file).
	 *
	 * <p>If a display object is not added to the display list, its
	 * <code>stage</code> property is set to <code>null</code>.</p>]]></haxe_doc>
		</stage>
		<scrollRect public="1">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc><![CDATA[* The scroll rectangle bounds of the display object. The display object is
	 * cropped to the size defined by the rectangle, and it scrolls within the
	 * rectangle when you change the <code>x</code> and <code>y</code> properties
	 * of the <code>scrollRect</code> object.
	 *
	 * <p>The properties of the <code>scrollRect</code> Rectangle object use the
	 * display object's coordinate space and are scaled just like the overall
	 * display object. The corner bounds of the cropped window on the scrolling
	 * display object are the origin of the display object (0,0) and the point
	 * defined by the width and height of the rectangle. They are not centered
	 * around the origin, but use the origin to define the upper-left corner of
	 * the area. A scrolled display object always scrolls in whole pixel
	 * increments. </p>
	 *
	 * <p>You can scroll an object left and right by setting the <code>x</code>
	 * property of the <code>scrollRect</code> Rectangle object. You can scroll
	 * an object up and down by setting the <code>y</code> property of the
	 * <code>scrollRect</code> Rectangle object. If the display object is rotated
	 * 90° and you scroll it left and right, the display object actually scrolls
	 * up and down.</p>]]></haxe_doc>
		</scrollRect>
		<scaleY public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the vertical scale (percentage) of an object as applied from the
	 * registration point of the object. The default registration point is (0,0).
	 * 1.0 is 100% scale.
	 *
	 * <p>Scaling the local coordinate system changes the <code>x</code> and
	 * <code>y</code> property values, which are defined in whole pixels. </p>]]></haxe_doc>
		</scaleY>
		<scaleX public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the horizontal scale (percentage) of the object as applied from
	 * the registration point. The default registration point is (0,0). 1.0
	 * equals 100% scale.
	 *
	 * <p>Scaling the local coordinate system changes the <code>x</code> and
	 * <code>y</code> property values, which are defined in whole pixels. </p>]]></haxe_doc>
		</scaleX>
		<scale9Grid public="1">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc><![CDATA[* The current scaling grid that is in effect. If set to <code>null</code>,
	 * the entire display object is scaled normally when any scale transformation
	 * is applied.
	 *
	 * <p>When you define the <code>scale9Grid</code> property, the display
	 * object is divided into a grid with nine regions based on the
	 * <code>scale9Grid</code> rectangle, which defines the center region of the
	 * grid. The eight other regions of the grid are the following areas: </p>
	 *
	 * <ul>
	 *   <li>The upper-left corner outside of the rectangle</li>
	 *   <li>The area above the rectangle </li>
	 *   <li>The upper-right corner outside of the rectangle</li>
	 *   <li>The area to the left of the rectangle</li>
	 *   <li>The area to the right of the rectangle</li>
	 *   <li>The lower-left corner outside of the rectangle</li>
	 *   <li>The area below the rectangle</li>
	 *   <li>The lower-right corner outside of the rectangle</li>
	 * </ul>
	 *
	 * <p>You can think of the eight regions outside of the center (defined by
	 * the rectangle) as being like a picture frame that has special rules
	 * applied to it when scaled.</p>
	 *
	 * <p>When the <code>scale9Grid</code> property is set and a display object
	 * is scaled, all text and gradients are scaled normally; however, for other
	 * types of objects the following rules apply:</p>
	 *
	 * <ul>
	 *   <li>Content in the center region is scaled normally. </li>
	 *   <li>Content in the corners is not scaled. </li>
	 *   <li>Content in the top and bottom regions is scaled horizontally only.
	 * Content in the left and right regions is scaled vertically only.</li>
	 *   <li>All fills (including bitmaps, video, and gradients) are stretched to
	 * fit their shapes.</li>
	 * </ul>
	 *
	 * <p>If a display object is rotated, all subsequent scaling is normal (and
	 * the <code>scale9Grid</code> property is ignored).</p>
	 *
	 * <p>For example, consider the following display object and a rectangle that
	 * is applied as the display object's <code>scale9Grid</code>:</p>
	 *
	 * <p>A common use for setting <code>scale9Grid</code> is to set up a display
	 * object to be used as a component, in which edge regions retain the same
	 * width when the component is scaled.</p>
	 * 
	 * @throws ArgumentError If you pass an invalid argument to the method.]]></haxe_doc>
		</scale9Grid>
		<rotation public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the rotation of the DisplayObject instance, in degrees, from its
	 * original orientation. Values from 0 to 180 represent clockwise rotation;
	 * values from 0 to -180 represent counterclockwise rotation. Values outside
	 * this range are added to or subtracted from 360 to obtain a value within
	 * the range. For example, the statement <code>my_video.rotation = 450</code>
	 * is the same as <code> my_video.rotation = 90</code>.]]></haxe_doc>
		</rotation>
		<root public="1" set="null">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc><![CDATA[* For a display object in a loaded SWF file, the <code>root</code> property
	 * is the top-most display object in the portion of the display list's tree
	 * structure represented by that SWF file. For a Bitmap object representing a
	 * loaded image file, the <code>root</code> property is the Bitmap object
	 * itself. For the instance of the main class of the first SWF file loaded,
	 * the <code>root</code> property is the display object itself. The
	 * <code>root</code> property of the Stage object is the Stage object itself.
	 * The <code>root</code> property is set to <code>null</code> for any display
	 * object that has not been added to the display list, unless it has been
	 * added to a display object container that is off the display list but that
	 * is a child of the top-most display object in a loaded SWF file.
	 *
	 * <p>For example, if you create a new Sprite object by calling the
	 * <code>Sprite()</code> constructor method, its <code>root</code> property
	 * is <code>null</code> until you add it to the display list (or to a display
	 * object container that is off the display list but that is a child of the
	 * top-most display object in a SWF file).</p>
	 *
	 * <p>For a loaded SWF file, even though the Loader object used to load the
	 * file may not be on the display list, the top-most display object in the
	 * SWF file has its <code>root</code> property set to itself. The Loader
	 * object does not have its <code>root</code> property set until it is added
	 * as a child of a display object for which the <code>root</code> property is
	 * set.</p>]]></haxe_doc>
		</root>
		<parent public="1" set="null">
			<c path="nme.display.DisplayObjectContainer"/>
			<haxe_doc><![CDATA[* Indicates the DisplayObjectContainer object that contains this display
	 * object. Use the <code>parent</code> property to specify a relative path to
	 * display objects that are above the current display object in the display
	 * list hierarchy.
	 *
	 * <p>You can use <code>parent</code> to move up multiple levels in the
	 * display list as in the following:</p>
	 * 
	 * @throws SecurityError The parent display object belongs to a security
	 *                       sandbox to which you do not have access. You can
	 *                       avoid this situation by having the parent movie call
	 *                       the <code>Security.allowDomain()</code> method.]]></haxe_doc>
		</parent>
		<opaqueBackground public="1">
			<t path="Null"><c path="Int"/></t>
			<haxe_doc><![CDATA[* Specifies whether the display object is opaque with a certain background
	 * color. A transparent bitmap contains alpha channel data and is drawn
	 * transparently. An opaque bitmap has no alpha channel (and renders faster
	 * than a transparent bitmap). If the bitmap is opaque, you specify its own
	 * background color to use.
	 *
	 * <p>If set to a number value, the surface is opaque (not transparent) with
	 * the RGB background color that the number specifies. If set to
	 * <code>null</code> (the default value), the display object has a
	 * transparent background.</p>
	 *
	 * <p>The <code>opaqueBackground</code> property is intended mainly for use
	 * with the <code>cacheAsBitmap</code> property, for rendering optimization.
	 * For display objects in which the <code>cacheAsBitmap</code> property is
	 * set to true, setting <code>opaqueBackground</code> can improve rendering
	 * performance.</p>
	 *
	 * <p>The opaque background region is <i>not</i> matched when calling the
	 * <code>hitTestPoint()</code> method with the <code>shapeFlag</code>
	 * parameter set to <code>true</code>.</p>
	 *
	 * <p>The opaque background region does not respond to mouse events.</p>]]></haxe_doc>
		</opaqueBackground>
		<name public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the instance name of the DisplayObject. The object can be
	 * identified in the child list of its parent display object container by
	 * calling the <code>getChildByName()</code> method of the display object
	 * container.
	 * 
	 * @throws IllegalOperationError If you are attempting to set this property
	 *                               on an object that was placed on the timeline
	 *                               in the Flash authoring tool.]]></haxe_doc>
		</name>
		<mouseY public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the y coordinate of the mouse or user input device position, in
	 * pixels.
	 *
	 * <p><b>Note</b>: For a DisplayObject that has been rotated, the returned y
	 * coordinate will reflect the non-rotated object.</p>]]></haxe_doc>
		</mouseY>
		<mouseX public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the x coordinate of the mouse or user input device position, in
	 * pixels.
	 *
	 * <p><b>Note</b>: For a DisplayObject that has been rotated, the returned x
	 * coordinate will reflect the non-rotated object.</p>]]></haxe_doc>
		</mouseX>
		<mask public="1">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc><![CDATA[* The calling display object is masked by the specified <code>mask</code>
	 * object. To ensure that masking works when the Stage is scaled, the
	 * <code>mask</code> display object must be in an active part of the display
	 * list. The <code>mask</code> object itself is not drawn. Set
	 * <code>mask</code> to <code>null</code> to remove the mask.
	 *
	 * <p>To be able to scale a mask object, it must be on the display list. To
	 * be able to drag a mask Sprite object (by calling its
	 * <code>startDrag()</code> method), it must be on the display list. To call
	 * the <code>startDrag()</code> method for a mask sprite based on a
	 * <code>mouseDown</code> event being dispatched by the sprite, set the
	 * sprite's <code>buttonMode</code> property to <code>true</code>.</p>
	 *
	 * <p>When display objects are cached by setting the
	 * <code>cacheAsBitmap</code> property to <code>true</code> an the
	 * <code>cacheAsBitmapMatrix</code> property to a Matrix object, both the
	 * mask and the display object being masked must be part of the same cached
	 * bitmap. Thus, if the display object is cached, then the mask must be a
	 * child of the display object. If an ancestor of the display object on the
	 * display list is cached, then the mask must be a child of that ancestor or
	 * one of its descendents. If more than one ancestor of the masked object is
	 * cached, then the mask must be a descendent of the cached container closest
	 * to the masked object in the display list.</p>
	 *
	 * <p><b>Note:</b> A single <code>mask</code> object cannot be used to mask
	 * more than one calling display object. When the <code>mask</code> is
	 * assigned to a second display object, it is removed as the mask of the
	 * first object, and that object's <code>mask</code> property becomes
	 * <code>null</code>.</p>]]></haxe_doc>
		</mask>
		<loaderInfo public="1" set="null">
			<c path="nme.display.LoaderInfo"/>
			<haxe_doc><![CDATA[* Returns a LoaderInfo object containing information about loading the file
	 * to which this display object belongs. The <code>loaderInfo</code> property
	 * is defined only for the root display object of a SWF file or for a loaded
	 * Bitmap (not for a Bitmap that is drawn with ActionScript). To find the
	 * <code>loaderInfo</code> object associated with the SWF file that contains
	 * a display object named <code>myDisplayObject</code>, use
	 * <code>myDisplayObject.root.loaderInfo</code>.
	 *
	 * <p>A large SWF file can monitor its download by calling
	 * <code>this.root.loaderInfo.addEventListener(Event.COMPLETE,
	 * func)</code>.</p>]]></haxe_doc>
		</loaderInfo>
		<height public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the height of the display object, in pixels. The height is
	 * calculated based on the bounds of the content of the display object. When
	 * you set the <code>height</code> property, the <code>scaleY</code> property
	 * is adjusted accordingly, as shown in the following code:
	 *
	 * <p>Except for TextField and Video objects, a display object with no
	 * content (such as an empty sprite) has a height of 0, even if you try to
	 * set <code>height</code> to a different value.</p>]]></haxe_doc>
		</height>
		<filters public="1">
			<c path="Array"><d/></c>
			<haxe_doc><![CDATA[* An indexed array that contains each filter object currently associated
	 * with the display object. The nme.filters package contains several
	 * classes that define specific filters you can use.
	 *
	 * <p>Filters can be applied in Flash Professional at design time, or at run
	 * time by using ActionScript code. To apply a filter by using ActionScript,
	 * you must make a temporary copy of the entire <code>filters</code> array,
	 * modify the temporary array, then assign the value of the temporary array
	 * back to the <code>filters</code> array. You cannot directly add a new
	 * filter object to the <code>filters</code> array.</p>
	 *
	 * <p>To add a filter by using ActionScript, perform the following steps
	 * (assume that the target display object is named
	 * <code>myDisplayObject</code>):</p>
	 *
	 * <ol>
	 *   <li>Create a new filter object by using the constructor method of your
	 * chosen filter class.</li>
	 *   <li>Assign the value of the <code>myDisplayObject.filters</code> array
	 * to a temporary array, such as one named <code>myFilters</code>.</li>
	 *   <li>Add the new filter object to the <code>myFilters</code> temporary
	 * array.</li>
	 *   <li>Assign the value of the temporary array to the
	 * <code>myDisplayObject.filters</code> array.</li>
	 * </ol>
	 *
	 * <p>If the <code>filters</code> array is undefined, you do not need to use
	 * a temporary array. Instead, you can directly assign an array literal that
	 * contains one or more filter objects that you create. The first example in
	 * the Examples section adds a drop shadow filter by using code that handles
	 * both defined and undefined <code>filters</code> arrays.</p>
	 *
	 * <p>To modify an existing filter object, you must use the technique of
	 * modifying a copy of the <code>filters</code> array:</p>
	 *
	 * <ol>
	 *   <li>Assign the value of the <code>filters</code> array to a temporary
	 * array, such as one named <code>myFilters</code>.</li>
	 *   <li>Modify the property by using the temporary array,
	 * <code>myFilters</code>. For example, to set the quality property of the
	 * first filter in the array, you could use the following code:
	 * <code>myFilters[0].quality = 1;</code></li>
	 *   <li>Assign the value of the temporary array to the <code>filters</code>
	 * array.</li>
	 * </ol>
	 *
	 * <p>At load time, if a display object has an associated filter, it is
	 * marked to cache itself as a transparent bitmap. From this point forward,
	 * as long as the display object has a valid filter list, the player caches
	 * the display object as a bitmap. This source bitmap is used as a source
	 * image for the filter effects. Each display object usually has two bitmaps:
	 * one with the original unfiltered source display object and another for the
	 * final image after filtering. The final image is used when rendering. As
	 * long as the display object does not change, the final image does not need
	 * updating.</p>
	 *
	 * <p>The nme.filters package includes classes for filters. For example, to
	 * create a DropShadow filter, you would write:</p>
	 * 
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	 *                       and the shader output type is not compatible with
	 *                       this operation (the shader must specify a
	 *                       <code>pixel4</code> output).
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	 *                       and the shader doesn't specify any image input or
	 *                       the first input is not an <code>image4</code> input.
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter
	 *                       and the shader specifies an image input that isn't
	 *                       provided.
	 * @throws ArgumentError When <code>filters</code> includes a ShaderFilter, a
	 *                       ByteArray or Vector.<Number> instance as a shader
	 *                       input, and the <code>width</code> and
	 *                       <code>height</code> properties aren't specified for
	 *                       the ShaderInput object, or the specified values
	 *                       don't match the amount of data in the input data.
	 *                       See the <code>ShaderInput.input</code> property for
	 *                       more information.]]></haxe_doc>
		</filters>
		<cacheAsBitmap public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* If set to <code>true</code>, NME will use the software renderer to cache
	 * an internal bitmap representation of the display object. For native targets,
	 * this is often much slower than the default hardware renderer. When you
	 * are using the Flash target, this caching may increase performance for display 
	 * objects that contain complex vector content.
	 *
	 * <p>All vector data for a display object that has a cached bitmap is drawn
	 * to the bitmap instead of the main display. If
	 * <code>cacheAsBitmapMatrix</code> is null or unsupported, the bitmap is
	 * then copied to the main display as unstretched, unrotated pixels snapped
	 * to the nearest pixel boundaries. Pixels are mapped 1 to 1 with the parent
	 * object. If the bounds of the bitmap change, the bitmap is recreated
	 * instead of being stretched.</p>
	 *
	 * <p>If <code>cacheAsBitmapMatrix</code> is non-null and supported, the
	 * object is drawn to the off-screen bitmap using that matrix and the
	 * stretched and/or rotated results of that rendering are used to draw the
	 * object to the main display.</p>
	 *
	 * <p>No internal bitmap is created unless the <code>cacheAsBitmap</code>
	 * property is set to <code>true</code>.</p>
	 *
	 * <p>After you set the <code>cacheAsBitmap</code> property to
	 * <code>true</code>, the rendering does not change, however the display
	 * object performs pixel snapping automatically. The animation speed can be
	 * significantly faster depending on the complexity of the vector content.
	 * </p>
	 *
	 * <p>The <code>cacheAsBitmap</code> property is automatically set to
	 * <code>true</code> whenever you apply a filter to a display object (when
	 * its <code>filter</code> array is not empty), and if a display object has a
	 * filter applied to it, <code>cacheAsBitmap</code> is reported as
	 * <code>true</code> for that display object, even if you set the property to
	 * <code>false</code>. If you clear all filters for a display object, the
	 * <code>cacheAsBitmap</code> setting changes to what it was last set to.</p>
	 *
	 * <p>A display object does not use a bitmap even if the
	 * <code>cacheAsBitmap</code> property is set to <code>true</code> and
	 * instead renders from vector data in the following cases:</p>
	 *
	 * <ul>
	 *   <li>The bitmap is too large. In AIR 1.5 and Flash Player 10, the maximum
	 * size for a bitmap image is 8,191 pixels in width or height, and the total
	 * number of pixels cannot exceed 16,777,215 pixels. (So, if a bitmap image
	 * is 8,191 pixels wide, it can only be 2,048 pixels high.) In Flash Player 9
	 * and earlier, the limitation is is 2880 pixels in height and 2,880 pixels
	 * in width.</li>
	 *   <li>The bitmap fails to allocate (out of memory error). </li>
	 * </ul>
	 *
	 * <p>The <code>cacheAsBitmap</code> property is best used with movie clips
	 * that have mostly static content and that do not scale and rotate
	 * frequently. With such movie clips, <code>cacheAsBitmap</code> can lead to
	 * performance increases when the movie clip is translated (when its <i>x</i>
	 * and <i>y</i> position is changed).</p>]]></haxe_doc>
		</cacheAsBitmap>
		<blendMode public="1">
			<e path="nme.display.BlendMode"/>
			<haxe_doc><![CDATA[* A value from the BlendMode class that specifies which blend mode to use. A
	 * bitmap can be drawn internally in two ways. If you have a blend mode
	 * enabled or an external clipping mask, the bitmap is drawn by adding a
	 * bitmap-filled square shape to the vector render. If you attempt to set
	 * this property to an invalid value, Flash runtimes set the value to
	 * <code>BlendMode.NORMAL</code>.
	 *
	 * <p>The <code>blendMode</code> property affects each pixel of the display
	 * object. Each pixel is composed of three constituent colors (red, green,
	 * and blue), and each constituent color has a value between 0x00 and 0xFF.
	 * Flash Player or Adobe AIR compares each constituent color of one pixel in
	 * the movie clip with the corresponding color of the pixel in the
	 * background. For example, if <code>blendMode</code> is set to
	 * <code>BlendMode.LIGHTEN</code>, Flash Player or Adobe AIR compares the red
	 * value of the display object with the red value of the background, and uses
	 * the lighter of the two as the value for the red component of the displayed
	 * color.</p>
	 *
	 * <p>The following table describes the <code>blendMode</code> settings. The
	 * BlendMode class defines string values you can use. The illustrations in
	 * the table show <code>blendMode</code> values applied to a circular display
	 * object (2) superimposed on another display object (1).</p>]]></haxe_doc>
		</blendMode>
		<alpha public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the alpha transparency value of the object specified. Valid
	 * values are 0 (fully transparent) to 1 (fully opaque). The default value is
	 * 1. Display objects with <code>alpha</code> set to 0 <i>are</i> active,
	 * even though they are invisible.]]></haxe_doc>
		</alpha>
		<haxe_doc><![CDATA[* The DisplayObject class is the base class for all objects that can be
 * placed on the display list. The display list manages all objects displayed
 * in NME. Use the DisplayObjectContainer class to arrange the
 * display objects in the display list. DisplayObjectContainer objects can
 * have child display objects, while other display objects, such as Shape and
 * TextField objects, are "leaf" nodes that have only parents and siblings, no
 * children.
 *
 * <p>The DisplayObject class supports basic functionality like the <i>x</i>
 * and <i>y</i> position of an object, as well as more advanced properties of
 * the object such as its transformation matrix. </p>
 *
 * <p>DisplayObject is an abstract base class; therefore, you cannot call
 * DisplayObject directly. Invoking <code>new DisplayObject()</code> throws an
 * <code>ArgumentError</code> exception. </p>
 *
 * <p>All display objects inherit from the DisplayObject class.</p>
 *
 * <p>The DisplayObject class itself does not include any APIs for rendering
 * content onscreen. For that reason, if you want create a custom subclass of
 * the DisplayObject class, you will want to extend one of its subclasses that
 * do have APIs for rendering content onscreen, such as the Shape, Sprite,
 * Bitmap, SimpleButton, TextField, or MovieClip class.</p>
 *
 * <p>The DisplayObject class contains several broadcast events. Normally, the
 * target of any particular event is a specific DisplayObject instance. For
 * example, the target of an <code>added</code> event is the specific
 * DisplayObject instance that was added to the display list. Having a single
 * target restricts the placement of event listeners to that target and in
 * some cases the target's ancestors on the display list. With broadcast
 * events, however, the target is not a specific DisplayObject instance, but
 * rather all DisplayObject instances, including those that are not on the
 * display list. This means that you can add a listener to any DisplayObject
 * instance to listen for broadcast events. In addition to the broadcast
 * events listed in the DisplayObject class's Events table, the DisplayObject
 * class also inherits two broadcast events from the EventDispatcher class:
 * <code>activate</code> and <code>deactivate</code>.</p>
 *
 * <p>Some properties previously used in the ActionScript 1.0 and 2.0
 * MovieClip, TextField, and Button classes (such as <code>_alpha</code>,
 * <code>_height</code>, <code>_name</code>, <code>_width</code>,
 * <code>_x</code>, <code>_y</code>, and others) have equivalents in the
 * ActionScript 3.0 DisplayObject class that are renamed so that they no
 * longer begin with the underscore (_) character.</p>
 *
 * <p>For more information, see the "Display Programming" chapter of the
 * <i>ActionScript 3.0 Developer's Guide</i>.</p>
 * 
 * @event added            Dispatched when a display object is added to the
 *                         display list. The following methods trigger this
 *                         event:
 *                         <code>DisplayObjectContainer.addChild()</code>,
 *                         <code>DisplayObjectContainer.addChildAt()</code>.
 * @event addedToStage     Dispatched when a display object is added to the on
 *                         stage display list, either directly or through the
 *                         addition of a sub tree in which the display object
 *                         is contained. The following methods trigger this
 *                         event:
 *                         <code>DisplayObjectContainer.addChild()</code>,
 *                         <code>DisplayObjectContainer.addChildAt()</code>.
 * @event enterFrame       [broadcast event] Dispatched when the playhead is
 *                         entering a new frame. If the playhead is not
 *                         moving, or if there is only one frame, this event
 *                         is dispatched continuously in conjunction with the
 *                         frame rate. This event is a broadcast event, which
 *                         means that it is dispatched by all display objects
 *                         with a listener registered for this event.
 * @event exitFrame        [broadcast event] Dispatched when the playhead is
 *                         exiting the current frame. All frame scripts have
 *                         been run. If the playhead is not moving, or if
 *                         there is only one frame, this event is dispatched
 *                         continuously in conjunction with the frame rate.
 *                         This event is a broadcast event, which means that
 *                         it is dispatched by all display objects with a
 *                         listener registered for this event.
 * @event frameConstructed [broadcast event] Dispatched after the constructors
 *                         of frame display objects have run but before frame
 *                         scripts have run. If the playhead is not moving, or
 *                         if there is only one frame, this event is
 *                         dispatched continuously in conjunction with the
 *                         frame rate. This event is a broadcast event, which
 *                         means that it is dispatched by all display objects
 *                         with a listener registered for this event.
 * @event removed          Dispatched when a display object is about to be
 *                         removed from the display list. Two methods of the
 *                         DisplayObjectContainer class generate this event:
 *                         <code>removeChild()</code> and
 *                         <code>removeChildAt()</code>.
 *
 *                         <p>The following methods of a
 *                         DisplayObjectContainer object also generate this
 *                         event if an object must be removed to make room for
 *                         the new object: <code>addChild()</code>,
 *                         <code>addChildAt()</code>, and
 *                         <code>setChildIndex()</code>. </p>
 * @event removedFromStage Dispatched when a display object is about to be
 *                         removed from the display list, either directly or
 *                         through the removal of a sub tree in which the
 *                         display object is contained. Two methods of the
 *                         DisplayObjectContainer class generate this event:
 *                         <code>removeChild()</code> and
 *                         <code>removeChildAt()</code>.
 *
 *                         <p>The following methods of a
 *                         DisplayObjectContainer object also generate this
 *                         event if an object must be removed to make room for
 *                         the new object: <code>addChild()</code>,
 *                         <code>addChildAt()</code>, and
 *                         <code>setChildIndex()</code>. </p>
 * @event render           [broadcast event] Dispatched when the display list
 *                         is about to be updated and rendered. This event
 *                         provides the last opportunity for objects listening
 *                         for this event to make changes before the display
 *                         list is rendered. You must call the
 *                         <code>invalidate()</code> method of the Stage
 *                         object each time you want a <code>render</code>
 *                         event to be dispatched. <code>Render</code> events
 *                         are dispatched to an object only if there is mutual
 *                         trust between it and the object that called
 *                         <code>Stage.invalidate()</code>. This event is a
 *                         broadcast event, which means that it is dispatched
 *                         by all display objects with a listener registered
 *                         for this event.
 *
 *                         <p><b>Note: </b>This event is not dispatched if the
 *                         display is not rendering. This is the case when the
 *                         content is either minimized or obscured. </p>]]></haxe_doc>
	</class>
	<class path="nme.display.Bitmap" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/Bitmap.hx" extern="1">
		<extends path="nme.display.DisplayObject"/>
		<smoothing public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Controls whether or not the bitmap is smoothed when scaled. If
	 * <code>true</code>, the bitmap is smoothed when scaled. If
	 * <code>false</code>, the bitmap is not smoothed when scaled.]]></haxe_doc>
		</smoothing>
		<pixelSnapping public="1">
			<e path="nme.display.PixelSnapping"/>
			<haxe_doc><![CDATA[* Controls whether or not the Bitmap object is snapped to the nearest pixel.
	 * This value is ignored in the native and HTML5 targets.
	 * The PixelSnapping class includes possible values:
	 * <ul>
	 *   <li><code>PixelSnapping.NEVER</code> - No pixel snapping occurs.</li>
	 *   <li><code>PixelSnapping.ALWAYS</code> - The image is always snapped to
	 * the nearest pixel, independent of transformation.</li>
	 *   <li><code>PixelSnapping.AUTO</code> - The image is snapped to the
	 * nearest pixel if it is drawn with no rotation or skew and it is drawn at a
	 * scale factor of 99.9% to 100.1%. If these conditions are satisfied, the
	 * bitmap image is drawn at 100% scale, snapped to the nearest pixel.
	 * When targeting Flash Player, this value allows the image to be drawn as fast 
	 * as possible using the internal vector renderer.</li>
	 * </ul>]]></haxe_doc>
		</pixelSnapping>
		<bitmapData public="1">
			<c path="nme.display.BitmapData"/>
			<haxe_doc>* The BitmapData object being referenced.</haxe_doc>
		</bitmapData>
		<new public="1" set="method"><f a="?bitmapData:?pixelSnapping:?smoothing">
	<c path="nme.display.BitmapData"/>
	<e path="nme.display.PixelSnapping"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
		<haxe_doc><![CDATA[* The Bitmap class represents display objects that represent bitmap images.
 * These can be images that you load with the <code>nme.Assets</code> or 
 * <code>nme.display.Loader</code> classes, or they can be images that you 
 * create with the <code>Bitmap()</code> constructor.
 *
 * <p>The <code>Bitmap()</code> constructor allows you to create a Bitmap
 * object that contains a reference to a BitmapData object. After you create a
 * Bitmap object, use the <code>addChild()</code> or <code>addChildAt()</code>
 * method of the parent DisplayObjectContainer instance to place the bitmap on
 * the display list.</p>
 *
 * <p>A Bitmap object can share its BitmapData reference among several Bitmap
 * objects, independent of translation or rotation properties. Because you can
 * create multiple Bitmap objects that reference the same BitmapData object,
 * multiple display objects can use the same complex BitmapData object without
 * incurring the memory overhead of a BitmapData object for each display
 * object instance.</p>
 *
 * <p>A BitmapData object can be drawn to the screen by a Bitmap object in one
 * of two ways: by using the default hardware renderer with a single hardware surface, 
 * or by using the slower software renderer when 3D acceleration is not available.</p>
 * 
 * <p>If you would prefer to perform a batch rendering command, rather than using a
 * single surface for each Bitmap object, you can also draw to the screen using the
 * <code>drawTiles()</code> or <code>drawTriangles()</code> methods which are
 * available to <code>nme.display.Tilesheet</code> and <code>nme.display.Graphics
 * objects.</code></p>
 *
 * <p><b>Note:</b> The Bitmap class is not a subclass of the InteractiveObject
 * class, so it cannot dispatch mouse events. However, you can use the
 * <code>addEventListener()</code> method of the display object container that
 * contains the Bitmap object.</p>]]></haxe_doc>
	</class>
	<class path="nme.display.BitmapData" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/BitmapData.hx" extern="1">
		<implements path="nme.display.IBitmapDrawable"/>
		<unlock public="1" set="method">
			<f a="?changeRect">
				<c path="nme.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Unlocks an image so that any objects that reference the BitmapData object,
	 * such as Bitmap objects, are updated when this BitmapData object changes.
	 * To improve performance, use this method along with the <code>lock()</code>
	 * method before and after numerous calls to the <code>setPixel()</code> or
	 * <code>setPixel32()</code> method.
	 * 
	 * @param changeRect The area of the BitmapData object that has changed. If
	 *                   you do not specify a value for this parameter, the
	 *                   entire area of the BitmapData object is considered
	 *                   changed.]]></haxe_doc>
		</unlock>
		<setVector public="1" set="method">
			<f a="rect:inputVector">
				<c path="nme.geom.Rectangle"/>
				<t path="nme.Vector"><c path="Int"/></t>
				<e path="Void"/>
			</f>
			<haxe_doc>* Converts a Vector into a rectangular region of pixel data. For each pixel,
	 * a Vector element is read and written into the BitmapData pixel. The data
	 * in the Vector is expected to be 32-bit ARGB pixel values.
	 * 
	 * @param rect Specifies the rectangular region of the BitmapData object.
	 * @throws RangeError The vector array is not large enough to read all the
	 *                    pixel data.</haxe_doc>
		</setVector>
		<setPixels public="1" set="method">
			<f a="rect:inputByteArray">
				<c path="nme.geom.Rectangle"/>
				<c path="nme.utils.ByteArray"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Converts a byte array into a rectangular region of pixel data. For each
	 * pixel, the <code>ByteArray.readUnsignedInt()</code> method is called and
	 * the return value is written into the pixel. If the byte array ends before
	 * the full rectangle is written, the function returns. The data in the byte
	 * array is expected to be 32-bit ARGB pixel values. No seeking is performed
	 * on the byte array before or after the pixels are read.
	 * 
	 * @param rect           Specifies the rectangular region of the BitmapData
	 *                       object.
	 * @param inputByteArray A ByteArray object that consists of 32-bit
	 *                       unmultiplied pixel values to be used in the
	 *                       rectangular region.
	 * @throws EOFError  The <code>inputByteArray</code> object does not include
	 *                   enough data to fill the area of the <code>rect</code>
	 *                   rectangle. The method fills as many pixels as possible
	 *                   before throwing the exception.
	 * @throws TypeError The rect or inputByteArray are null.]]></haxe_doc>
		</setPixels>
		<setPixel32 public="1" set="method">
			<f a="x:y:color">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets the color and alpha transparency values of a single pixel of a
	 * BitmapData object. This method is similar to the <code>setPixel()</code>
	 * method; the main difference is that the <code>setPixel32()</code> method
	 * takes an ARGB color value that contains alpha channel information.
	 *
	 * <p>All pixels in a BitmapData object are stored as premultiplied color
	 * values. A premultiplied image pixel has the red, green, and blue color
	 * channel values already multiplied by the alpha data. For example, if the
	 * alpha value is 0, the values for the RGB channels are also 0, independent
	 * of their unmultiplied values. This loss of data can cause some problems
	 * when you perform operations. All BitmapData methods take and return
	 * unmultiplied values. The internal pixel representation is converted from
	 * premultiplied to unmultiplied before it is returned as a value. During a
	 * set operation, the pixel value is premultiplied before the raw image pixel
	 * is set.</p>
	 *
	 * <p><b>Note:</b> To increase performance, when you use the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method repeatedly,
	 * call the <code>lock()</code> method before you call the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method, and then call
	 * the <code>unlock()</code> method when you have made all pixel changes.
	 * This process prevents objects that reference this BitmapData instance from
	 * updating until you finish making the pixel changes.</p>
	 * 
	 * @param x     The <i>x</i> position of the pixel whose value changes.
	 * @param y     The <i>y</i> position of the pixel whose value changes.
	 * @param color The resulting ARGB color for the pixel. If the bitmap is
	 *              opaque (not transparent), the alpha transparency portion of
	 *              this color value is ignored.]]></haxe_doc>
		</setPixel32>
		<setPixel public="1" set="method">
			<f a="x:y:color">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets a single pixel of a BitmapData object. The current alpha channel
	 * value of the image pixel is preserved during this operation. The value of
	 * the RGB color parameter is treated as an unmultiplied color value.
	 *
	 * <p><b>Note:</b> To increase performance, when you use the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method repeatedly,
	 * call the <code>lock()</code> method before you call the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method, and then call
	 * the <code>unlock()</code> method when you have made all pixel changes.
	 * This process prevents objects that reference this BitmapData instance from
	 * updating until you finish making the pixel changes.</p>
	 * 
	 * @param x     The <i>x</i> position of the pixel whose value changes.
	 * @param y     The <i>y</i> position of the pixel whose value changes.
	 * @param color The resulting RGB color for the pixel.]]></haxe_doc>
		</setPixel>
		<scroll public="1" set="method">
			<f a="x:y">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Scrolls an image by a certain (<i>x</i>, <i>y</i>) pixel amount. Edge
	 * regions outside the scrolling area are left unchanged.
	 * 
	 * @param x The amount by which to scroll horizontally.
	 * @param y The amount by which to scroll vertically.]]></haxe_doc>
		</scroll>
		<noise public="1" set="method">
			<f a="randomSeed:?low:?high:?channelOptions:?grayScale">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Fills an image with pixels representing random noise.
	 * 
	 * @param randomSeed     The random seed number to use. If you keep all other
	 *                       parameters the same, you can generate different
	 *                       pseudo-random results by varying the random seed
	 *                       value. The noise function is a mapping function, not
	 *                       a true random-number generation function, so it
	 *                       creates the same results each time from the same
	 *                       random seed.
	 * @param low            The lowest value to generate for each channel (0 to
	 *                       255).
	 * @param high           The highest value to generate for each channel (0 to
	 *                       255).
	 * @param channelOptions A number that can be a combination of any of the
	 *                       four color channel values
	 *                       (<code>BitmapDataChannel.RED</code>,
	 *                       <code>BitmapDataChannel.BLUE</code>,
	 *                       <code>BitmapDataChannel.GREEN</code>, and
	 *                       <code>BitmapDataChannel.ALPHA</code>). You can use
	 *                       the logical OR operator (<code>|</code>) to combine
	 *                       channel values.
	 * @param grayScale      A Boolean value. If the value is <code>true</code>,
	 *                       a grayscale image is created by setting all of the
	 *                       color channels to the same value. The alpha channel
	 *                       selection is not affected by setting this parameter
	 *                       to <code>true</code>.]]></haxe_doc>
		</noise>
		<lock public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Locks an image so that any objects that reference the BitmapData object,
	 * such as Bitmap objects, are not updated when this BitmapData object
	 * changes. To improve performance, use this method along with the
	 * <code>unlock()</code> method before and after numerous calls to the
	 * <code>setPixel()</code> or <code>setPixel32()</code> method.
	 *]]></haxe_doc>
		</lock>
		<getVector public="1" set="method">
			<f a="rect">
				<c path="nme.geom.Rectangle"/>
				<t path="nme.Vector"><c path="Int"/></t>
			</f>
			<haxe_doc>* Generates a vector array from a rectangular region of pixel data. Returns
	 * a Vector object of unsigned integers (a 32-bit unmultiplied pixel value)
	 * for the specified rectangle.
	 * 
	 * @param rect A rectangular area in the current BitmapData object.
	 * @return A Vector representing the given Rectangle.
	 * @throws TypeError The rect is null.</haxe_doc>
		</getVector>
		<getPixels public="1" set="method">
			<f a="rect">
				<c path="nme.geom.Rectangle"/>
				<c path="nme.utils.ByteArray"/>
			</f>
			<haxe_doc>* Generates a byte array from a rectangular region of pixel data. Writes an
	 * unsigned integer (a 32-bit unmultiplied pixel value) for each pixel into
	 * the byte array.
	 * 
	 * @param rect A rectangular area in the current BitmapData object.
	 * @return A ByteArray representing the pixels in the given Rectangle.
	 * @throws TypeError The rect is null.</haxe_doc>
		</getPixels>
		<getPixel32 public="1" set="method">
			<f a="x:y">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns an ARGB color value that contains alpha channel data and RGB data.
	 * This method is similar to the <code>getPixel()</code> method, which
	 * returns an RGB color without alpha channel data.
	 *
	 * <p>All pixels in a BitmapData object are stored as premultiplied color
	 * values. A premultiplied image pixel has the red, green, and blue color
	 * channel values already multiplied by the alpha data. For example, if the
	 * alpha value is 0, the values for the RGB channels are also 0, independent
	 * of their unmultiplied values. This loss of data can cause some problems
	 * when you perform operations. All BitmapData methods take and return
	 * unmultiplied values. The internal pixel representation is converted from
	 * premultiplied to unmultiplied before it is returned as a value. During a
	 * set operation, the pixel value is premultiplied before the raw image pixel
	 * is set.</p>
	 * 
	 * @param x The <i>x</i> position of the pixel.
	 * @param y The <i>y</i> position of the pixel.
	 * @return A number representing an ARGB pixel value. If the (<i>x</i>,
	 *         <i>y</i>) coordinates are outside the bounds of the image, 0 is
	 *         returned.]]></haxe_doc>
		</getPixel32>
		<getPixel public="1" set="method">
			<f a="x:y">
				<c path="Int"/>
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns an integer that represents an RGB pixel value from a BitmapData
	 * object at a specific point (<i>x</i>, <i>y</i>). The
	 * <code>getPixel()</code> method returns an unmultiplied pixel value. No
	 * alpha information is returned.
	 *
	 * <p>All pixels in a BitmapData object are stored as premultiplied color
	 * values. A premultiplied image pixel has the red, green, and blue color
	 * channel values already multiplied by the alpha data. For example, if the
	 * alpha value is 0, the values for the RGB channels are also 0, independent
	 * of their unmultiplied values. This loss of data can cause some problems
	 * when you perform operations. All BitmapData methods take and return
	 * unmultiplied values. The internal pixel representation is converted from
	 * premultiplied to unmultiplied before it is returned as a value. During a
	 * set operation, the pixel value is premultiplied before the raw image pixel
	 * is set.</p>
	 * 
	 * @param x The <i>x</i> position of the pixel.
	 * @param y The <i>y</i> position of the pixel.
	 * @return A number that represents an RGB pixel value. If the (<i>x</i>,
	 *         <i>y</i>) coordinates are outside the bounds of the image, the
	 *         method returns 0.]]></haxe_doc>
		</getPixel>
		<getColorBoundsRect public="1" set="method">
			<f a="mask:color:?findColor">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Bool"/>
				<c path="nme.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Determines a rectangular region that either fully encloses all pixels of a
	 * specified color within the bitmap image (if the <code>findColor</code>
	 * parameter is set to <code>true</code>) or fully encloses all pixels that
	 * do not include the specified color (if the <code>findColor</code>
	 * parameter is set to <code>false</code>).
	 *
	 * <p>For example, if you have a source image and you want to determine the
	 * rectangle of the image that contains a nonzero alpha channel, pass
	 * <code>{mask: 0xFF000000, color: 0x00000000}</code> as parameters. If the
	 * <code>findColor</code> parameter is set to <code>true</code>, the entire
	 * image is searched for the bounds of pixels for which <code>(value & mask)
	 * == color</code> (where <code>value</code> is the color value of the
	 * pixel). If the <code>findColor</code> parameter is set to
	 * <code>false</code>, the entire image is searched for the bounds of pixels
	 * for which <code>(value & mask) != color</code> (where <code>value</code>
	 * is the color value of the pixel). To determine white space around an
	 * image, pass <code>{mask: 0xFFFFFFFF, color: 0xFFFFFFFF}</code> to find the
	 * bounds of nonwhite pixels.</p>
	 * 
	 * @param mask      A hexadecimal value, specifying the bits of the ARGB
	 *                  color to consider. The color value is combined with this
	 *                  hexadecimal value, by using the <code>&</code> (bitwise
	 *                  AND) operator.
	 * @param color     A hexadecimal value, specifying the ARGB color to match
	 *                  (if <code>findColor</code> is set to <code>true</code>)
	 *                  or <i>not</i> to match (if <code>findColor</code> is set
	 *                  to <code>false</code>).
	 * @param findColor If the value is set to <code>true</code>, returns the
	 *                  bounds of a color value in an image. If the value is set
	 *                  to <code>false</code>, returns the bounds of where this
	 *                  color doesn't exist in an image.
	 * @return The region of the image that is the specified color.]]></haxe_doc>
		</getColorBoundsRect>
		<generateFilterRect public="1" set="method">
			<f a="sourceRect:filter">
				<c path="nme.geom.Rectangle"/>
				<c path="nme.filters.BitmapFilter"/>
				<c path="nme.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Determines the destination rectangle that the <code>applyFilter()</code>
	 * method call affects, given a BitmapData object, a source rectangle, and a
	 * filter object.
	 *
	 * <p>For example, a blur filter normally affects an area larger than the
	 * size of the original image. A 100 x 200 pixel image that is being filtered
	 * by a default BlurFilter instance, where <code>blurX = blurY = 4</code>
	 * generates a destination rectangle of <code>(-2,-2,104,204)</code>. The
	 * <code>generateFilterRect()</code> method lets you find out the size of
	 * this destination rectangle in advance so that you can size the destination
	 * image appropriately before you perform a filter operation.</p>
	 *
	 * <p>Some filters clip their destination rectangle based on the source image
	 * size. For example, an inner <code>DropShadow</code> does not generate a
	 * larger result than its source image. In this API, the BitmapData object is
	 * used as the source bounds and not the source <code>rect</code>
	 * parameter.</p>
	 * 
	 * @param sourceRect A rectangle defining the area of the source image to use
	 *                   as input.
	 * @param filter     A filter object that you use to calculate the
	 *                   destination rectangle.
	 * @return A destination rectangle computed by using an image, the
	 *         <code>sourceRect</code> parameter, and a filter.
	 * @throws TypeError The sourceRect or filter are null.]]></haxe_doc>
		</generateFilterRect>
		<fillRect public="1" set="method">
			<f a="rect:color">
				<c path="nme.geom.Rectangle"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Fills a rectangular area of pixels with a specified ARGB color.
	 * 
	 * @param rect  The rectangular area to fill.
	 * @param color The ARGB color value that fills the area. ARGB colors are
	 *              often specified in hexadecimal format; for example,
	 *              0xFF336699.
	 * @throws TypeError The rect is null.</haxe_doc>
		</fillRect>
		<encode public="1" set="method">
			<f a="format:?quality">
				<c path="String"/>
				<c path="Float"/>
				<c path="nme.utils.ByteArray"/>
			</f>
			<haxe_doc>* Encodes the current image as a JPG or PNG format ByteArray.
	 * 
	 * This method is not available to the HTML5 and Flash targets.
	 * 
	 * @param format  The encoding format, either "png" or "jpg".
	 * @param quality The encoding quality, when encoding with the JPG format.
	 * @return  A ByteArray in the specified encoding format</haxe_doc>
		</encode>
		<draw public="1" set="method">
			<f a="source:?matrix:?colorTransform:?blendMode:?clipRect:?smoothing">
				<c path="nme.display.IBitmapDrawable"/>
				<c path="nme.geom.Matrix"/>
				<c path="nme.geom.ColorTransform"/>
				<e path="nme.display.BlendMode"/>
				<c path="nme.geom.Rectangle"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws the <code>source</code> display object onto the bitmap image, using
	 * the NME software renderer. You can specify <code>matrix</code>,
	 * <code>colorTransform</code>, <code>blendMode</code>, and a destination
	 * <code>clipRect</code> parameter to control how the rendering performs.
	 * Optionally, you can specify whether the bitmap should be smoothed when
	 * scaled (this works only if the source object is a BitmapData object).
	 *
	 * <p>The source display object does not use any of its applied
	 * transformations for this call. It is treated as it exists in the library
	 * or file, with no matrix transform, no color transform, and no blend mode.
	 * To draw a display object (such as a movie clip) by using its own transform
	 * properties, you can copy its <code>transform</code> property object to the
	 * <code>transform</code> property of the Bitmap object that uses the
	 * BitmapData object.</p>
	 * 
	 * @param source         The display object or BitmapData object to draw to
	 *                       the BitmapData object. (The DisplayObject and
	 *                       BitmapData classes implement the IBitmapDrawable
	 *                       interface.)
	 * @param matrix         A Matrix object used to scale, rotate, or translate
	 *                       the coordinates of the bitmap. If you do not want to
	 *                       apply a matrix transformation to the image, set this
	 *                       parameter to an identity matrix, created with the
	 *                       default <code>new Matrix()</code> constructor, or
	 *                       pass a <code>null</code> value.
	 * @param colorTransform A ColorTransform object that you use to adjust the
	 *                       color values of the bitmap. If no object is
	 *                       supplied, the bitmap image's colors are not
	 *                       transformed. If you must pass this parameter but you
	 *                       do not want to transform the image, set this
	 *                       parameter to a ColorTransform object created with
	 *                       the default <code>new ColorTransform()</code>
	 *                       constructor.
	 * @param blendMode      A string value, from the nme.display.BlendMode
	 *                       class, specifying the blend mode to be applied to
	 *                       the resulting bitmap.
	 * @param clipRect       A Rectangle object that defines the area of the
	 *                       source object to draw. If you do not supply this
	 *                       value, no clipping occurs and the entire source
	 *                       object is drawn.
	 * @param smoothing      A Boolean value that determines whether a BitmapData
	 *                       object is smoothed when scaled or rotated, due to a
	 *                       scaling or rotation in the <code>matrix</code>
	 *                       parameter. The <code>smoothing</code> parameter only
	 *                       applies if the <code>source</code> parameter is a
	 *                       BitmapData object. With <code>smoothing</code> set
	 *                       to <code>false</code>, the rotated or scaled
	 *                       BitmapData image can appear pixelated or jagged. For
	 *                       example, the following two images use the same
	 *                       BitmapData object for the <code>source</code>
	 *                       parameter, but the <code>smoothing</code> parameter
	 *                       is set to <code>true</code> on the left and
	 *                       <code>false</code> on the right:
	 *
	 *                       <p>Drawing a bitmap with <code>smoothing</code> set
	 *                       to <code>true</code> takes longer than doing so with
	 *                       <code>smoothing</code> set to
	 *                       <code>false</code>.</p>
	 * @throws ArgumentError The <code>source</code> parameter is not a
	 *                       BitmapData or DisplayObject object.
	 * @throws ArgumentError The source is null or not a valid IBitmapDrawable
	 *                       object.
	 * @throws SecurityError The <code>source</code> object and (in the case of a
	 *                       Sprite or MovieClip object) all of its child objects
	 *                       do not come from the same domain as the caller, or
	 *                       are not in a content that is accessible to the
	 *                       caller by having called the
	 *                       <code>Security.allowDomain()</code> method. This
	 *                       restriction does not apply to AIR content in the
	 *                       application security sandbox.]]></haxe_doc>
		</draw>
		<dispose public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Frees memory that is used to store the BitmapData object.
	 *
	 * <p>When the <code>dispose()</code> method is called on an image, the width
	 * and height of the image are set to 0. All subsequent calls to methods or
	 * properties of this BitmapData instance fail, and an exception is thrown.
	 * </p>
	 *
	 * <p><code>BitmapData.dispose()</code> releases the memory occupied by the
	 * actual bitmap data, immediately (a bitmap can consume up to 64 MB of
	 * memory). After using <code>BitmapData.dispose()</code>, the BitmapData
	 * object is no longer usable and an exception may be thrown if
	 * you call functions on the BitmapData object. However,
	 * <code>BitmapData.dispose()</code> does not garbage collect the BitmapData
	 * object (approximately 128 bytes); the memory occupied by the actual
	 * BitmapData object is released at the time the BitmapData object is
	 * collected by the garbage collector.</p>
	 *]]></haxe_doc>
		</dispose>
		<copyPixels public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:?alphaBitmapData:?alphaPoint:?mergeAlpha">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Point"/>
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Point"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Provides a fast routine to perform pixel manipulation between images with
	 * no stretching, rotation, or color effects. This method copies a
	 * rectangular area of a source image to a rectangular area of the same size
	 * at the destination point of the destination BitmapData object.
	 *
	 * <p>If you include the <code>alphaBitmap</code> and <code>alphaPoint</code>
	 * parameters, you can use a secondary image as an alpha source for the
	 * source image. If the source image has alpha data, both sets of alpha data
	 * are used to composite pixels from the source image to the destination
	 * image. The <code>alphaPoint</code> parameter is the point in the alpha
	 * image that corresponds to the upper-left corner of the source rectangle.
	 * Any pixels outside the intersection of the source image and alpha image
	 * are not copied to the destination image.</p>
	 *
	 * <p>The <code>mergeAlpha</code> property controls whether or not the alpha
	 * channel is used when a transparent image is copied onto another
	 * transparent image. To copy pixels with the alpha channel data, set the
	 * <code>mergeAlpha</code> property to <code>true</code>. By default, the
	 * <code>mergeAlpha</code> property is <code>false</code>.</p>
	 * 
	 * @param sourceBitmapData The input bitmap image from which to copy pixels.
	 *                         The source image can be a different BitmapData
	 *                         instance, or it can refer to the current
	 *                         BitmapData instance.
	 * @param sourceRect       A rectangle that defines the area of the source
	 *                         image to use as input.
	 * @param destPoint        The destination point that represents the
	 *                         upper-left corner of the rectangular area where
	 *                         the new pixels are placed.
	 * @param alphaBitmapData  A secondary, alpha BitmapData object source.
	 * @param alphaPoint       The point in the alpha BitmapData object source
	 *                         that corresponds to the upper-left corner of the
	 *                         <code>sourceRect</code> parameter.
	 * @param mergeAlpha       To use the alpha channel, set the value to
	 *                         <code>true</code>. To copy pixels with no alpha
	 *                         channel, set the value to <code>false</code>.
	 * @throws TypeError The sourceBitmapData, sourceRect, destPoint are null.]]></haxe_doc>
		</copyPixels>
		<copyChannel public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:sourceChannel:destChannel">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Point"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Transfers data from one channel of another BitmapData object or the
	 * current BitmapData object into a channel of the current BitmapData object.
	 * All of the data in the other channels in the destination BitmapData object
	 * are preserved.
	 *
	 * <p>The source channel value and destination channel value can be one of
	 * following values: </p>
	 *
	 * <ul>
	 *   <li><code>BitmapDataChannel.RED</code></li>
	 *   <li><code>BitmapDataChannel.GREEN</code></li>
	 *   <li><code>BitmapDataChannel.BLUE</code></li>
	 *   <li><code>BitmapDataChannel.ALPHA</code></li>
	 * </ul>
	 * 
	 * @param sourceBitmapData The input bitmap image to use. The source image
	 *                         can be a different BitmapData object or it can
	 *                         refer to the current BitmapData object.
	 * @param sourceRect       The source Rectangle object. To copy only channel
	 *                         data from a smaller area within the bitmap,
	 *                         specify a source rectangle that is smaller than
	 *                         the overall size of the BitmapData object.
	 * @param destPoint        The destination Point object that represents the
	 *                         upper-left corner of the rectangular area where
	 *                         the new channel data is placed. To copy only
	 *                         channel data from one area to a different area in
	 *                         the destination image, specify a point other than
	 *                         (0,0).
	 * @param sourceChannel    The source channel. Use a value from the
	 *                         BitmapDataChannel class
	 *                         (<code>BitmapDataChannel.RED</code>,
	 *                         <code>BitmapDataChannel.BLUE</code>,
	 *                         <code>BitmapDataChannel.GREEN</code>,
	 *                         <code>BitmapDataChannel.ALPHA</code>).
	 * @param destChannel      The destination channel. Use a value from the
	 *                         BitmapDataChannel class
	 *                         (<code>BitmapDataChannel.RED</code>,
	 *                         <code>BitmapDataChannel.BLUE</code>,
	 *                         <code>BitmapDataChannel.GREEN</code>,
	 *                         <code>BitmapDataChannel.ALPHA</code>).
	 * @throws TypeError The sourceBitmapData, sourceRect or destPoint are null.]]></haxe_doc>
		</copyChannel>
		<colorTransform public="1" set="method">
			<f a="rect:colorTransform">
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.ColorTransform"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adjusts the color values in a specified area of a bitmap image by using a <code>ColorTransform</code>
	 * object. If the rectangle matches the boundaries of the bitmap image, this method transforms the color 
	 * values of the entire image. 
	 * @param	rect		A Rectangle object that defines the area of the image in which the ColorTransform object is applied.
	 * @param	colorTransform		A ColorTransform object that describes the color transformation values to apply.]]></haxe_doc>
		</colorTransform>
		<clone public="1" set="method">
			<f a=""><c path="nme.display.BitmapData"/></f>
			<haxe_doc>* Returns a new BitmapData object that is a clone of the original instance with an exact copy of the contained bitmap. 
	 * @return		A new BitmapData object that is identical to the original.</haxe_doc>
		</clone>
		<applyFilter public="1" set="method">
			<f a="sourceBitmapData:sourceRect:destPoint:filter">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Point"/>
				<c path="nme.filters.BitmapFilter"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Takes a source image and a filter object and generates the filtered image. 
	 * 
	 * This method relies on the behavior of built-in filter objects, which determine the 
	 * destination rectangle that is affected by an input source rectangle.
	 * 
	 * After a filter is applied, the resulting image can be larger than the input image. 
	 * For example, if you use a BlurFilter class to blur a source rectangle of (50,50,100,100) 
	 * and a destination point of (10,10), the area that changes in the destination image is 
	 * larger than (10,10,60,60) because of the blurring. This happens internally during the 
	 * applyFilter() call.
	 * 
	 * If the <code>sourceRect</code> parameter of the sourceBitmapData parameter is an 
	 * interior region, such as (50,50,100,100) in a 200 x 200 image, the filter uses the source 
	 * pixels outside the <code>sourceRect</code> parameter to generate the destination rectangle.
	 * 
	 * If the BitmapData object and the object specified as the <code>sourceBitmapData</code> 
	 * parameter are the same object, the application uses a temporary copy of the object to 
	 * perform the filter. For best performance, avoid this situation.
	 * 
	 * @param	sourceBitmapData		The input bitmap image to use. The source image can be a different BitmapData object or it can refer to the current BitmapData instance.
	 * @param	sourceRect		A rectangle that defines the area of the source image to use as input.
	 * @param	destPoint		The point within the destination image (the current BitmapData instance) that corresponds to the upper-left corner of the source rectangle. 
	 * @param	filter		The filter object that you use to perform the filtering operation.]]></haxe_doc>
		</applyFilter>
		<width public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* The width of the bitmap image in pixels.</haxe_doc>
		</width>
		<transparent public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Defines whether the bitmap image supports per-pixel transparency. You can
	 * set this value only when you construct a BitmapData object by passing in
	 * <code>true</code> for the <code>transparent</code> parameter of the
	 * constructor. Then, after you create a BitmapData object, you can check
	 * whether it supports per-pixel transparency by determining if the value of
	 * the <code>transparent</code> property is <code>true</code>.]]></haxe_doc>
		</transparent>
		<rect public="1" set="null">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc>* The rectangle that defines the size and location of the bitmap image. The
	 * top and left of the rectangle are 0; the width and height are equal to the
	 * width and height in pixels of the BitmapData object.</haxe_doc>
		</rect>
		<height public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* The height of the bitmap image in pixels.</haxe_doc>
		</height>
		<new public="1" set="method">
			<f a="width:height:?transparent:?fillColor">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Bool"/>
				<t path="nme.display.BitmapInt32"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a BitmapData object with a specified width and height. If you specify a value for 
	 * the <code>fillColor</code> parameter, every pixel in the bitmap is set to that color. 
	 * 
	 * By default, the bitmap is created as transparent, unless you pass the value <code>false</code>
	 * for the transparent parameter. After you create an opaque bitmap, you cannot change it 
	 * to a transparent bitmap. Every pixel in an opaque bitmap uses only 24 bits of color channel 
	 * information. If you define the bitmap as transparent, every pixel uses 32 bits of color 
	 * channel information, including an alpha transparency channel.
	 * 
	 * @param	width		The width of the bitmap image in pixels. 
	 * @param	height		The height of the bitmap image in pixels. 
	 * @param	transparent		Specifies whether the bitmap image supports per-pixel transparency. The default value is <code>true</code> (transparent). To create a fully transparent bitmap, set the value of the <code>transparent</code> parameter to <code>true</code> and the value of the <code>fillColor</code> parameter to 0x00000000 (or to 0). Setting the <code>transparent</code> property to <code>false</code> can result in minor improvements in rendering performance.
	 * @param	fillColor		A 32-bit ARGB color value that you use to fill the bitmap image area. The default value is 0xFFFFFFFF (solid white).]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The BitmapData class lets you work with the data (pixels) of a Bitmap
 * object. You can use the methods of the BitmapData class to create
 * arbitrarily sized transparent or opaque bitmap images and manipulate them
 * in various ways at runtime. You can also access the BitmapData for a bitmap
 * image that you load with the <code>nme.Assets</code> or 
 * <code>nme.display.Loader</code> classes.
 *
 * <p>This class lets you separate bitmap rendering operations from the
 * internal display updating routines of NME. By manipulating a
 * BitmapData object directly, you can create complex images without incurring
 * the per-frame overhead of constantly redrawing the content from vector
 * data.</p>
 *
 * <p>The methods of the BitmapData class support effects that are not
 * available through the filters available to non-bitmap display objects.</p>
 *
 * <p>A BitmapData object contains an array of pixel data. This data can
 * represent either a fully opaque bitmap or a transparent bitmap that
 * contains alpha channel data. Either type of BitmapData object is stored as
 * a buffer of 32-bit integers. Each 32-bit integer determines the properties
 * of a single pixel in the bitmap.</p>
 *
 * <p>Each 32-bit integer is a combination of four 8-bit channel values (from
 * 0 to 255) that describe the alpha transparency and the red, green, and blue
 * (ARGB) values of the pixel. (For ARGB values, the most significant byte
 * represents the alpha channel value, followed by red, green, and blue.)</p>
 * 
 * <p>When you are targeting the Neko runtime, the pixel data is stored as an object
 * with separate red, green, blue (RGB) and alpha (A) values. Unlike other targets, 
 * Neko uses 31-bit integers, so this necessary in order to store the full data for each 
 * pixel. You can use the <code>nme.display.BitmapInt32</class> object to represent
 * either data format.</p>
 *
 * <p>The four channels (alpha, red, green, and blue) are represented as
 * numbers when you use them with the <code>BitmapData.copyChannel()</code>
 * method or the <code>DisplacementMapFilter.componentX</code> and
 * <code>DisplacementMapFilter.componentY</code> properties, and these numbers
 * are represented by the following constants in the BitmapDataChannel
 * class:</p>
 *
 * <ul>
 *   <li><code>BitmapDataChannel.ALPHA</code></li>
 *   <li><code>BitmapDataChannel.RED</code></li>
 *   <li><code>BitmapDataChannel.GREEN</code></li>
 *   <li><code>BitmapDataChannel.BLUE</code></li>
 * </ul>
 *
 * <p>You can attach BitmapData objects to a Bitmap object by using the
 * <code>bitmapData</code> property of the Bitmap object.</p>
 *
 * <p>You can use a BitmapData object to fill a Graphics object by using the
 * <code>Graphics.beginBitmapFill()</code> method.</p>
 * 
 * <p>You can also use a BitmapData object to perform batch tile rendering
 * using the <code>nme.display.Tilesheet</code> class.</p>
 *
 * <p>In Flash Player 10, the maximum size for a BitmapData object
 * is 8,191 pixels in width or height, and the total number of pixels cannot
 * exceed 16,777,215 pixels. (So, if a BitmapData object is 8,191 pixels wide,
 * it can only be 2,048 pixels high.) In Flash Player 9 and earlier, the limitation 
 * is 2,880 pixels in height and 2,880 in width.</p>]]></haxe_doc>
	</class>
	<class path="nme.display.BitmapDataChannel" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/BitmapDataChannel.hx" extern="1">
		<ALPHA public="1" get="inline" set="null" line="31" static="1">
			<c path="Int"/>
			<haxe_doc>* The alpha channel.</haxe_doc>
		</ALPHA>
		<BLUE public="1" get="inline" set="null" line="36" static="1">
			<c path="Int"/>
			<haxe_doc>* The blue channel.</haxe_doc>
		</BLUE>
		<GREEN public="1" get="inline" set="null" line="41" static="1">
			<c path="Int"/>
			<haxe_doc>* The green channel.</haxe_doc>
		</GREEN>
		<RED public="1" get="inline" set="null" line="46" static="1">
			<c path="Int"/>
			<haxe_doc>* The red channel.</haxe_doc>
		</RED>
		<haxe_doc><![CDATA[* The BitmapDataChannel class is an enumeration of constant values that
 * indicate which channel to use: red, blue, green, or alpha transparency.
 *
 * <p>When you call some methods, you can use the bitwise OR operator
 * (<code>|</code>) to combine BitmapDataChannel constants to indicate
 * multiple color channels.</p>
 *
 * <p>The BitmapDataChannel constants are provided for use as values in the
 * following:</p>
 *
 * <ul>
 *   <li>The <code>sourceChannel</code> and <code>destChannel</code>
 * parameters of the <code>nme.display.BitmapData.copyChannel()</code>
 * method</li>
 *   <li>The <code>channelOptions</code> parameter of the
 * <code>nme.display.BitmapData.noise()</code> method</li>
 *   <li>The <code>nme.filters.DisplacementMapFilter.componentX</code> and
 * <code>nme.filters.DisplacementMapFilter.componentY</code> properties</li>
 * </ul>]]></haxe_doc>
	</class>
	<typedef path="nme.display.BitmapInt32" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/BitmapInt32.hx"><c path="Int"/></typedef>
	<enum path="nme.display.BlendMode" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/BlendMode.hx">
		<SUBTRACT><haxe_doc><![CDATA[* Subtracts the values of the constituent colors in the display object from
	 * the values of the background color, applying a floor of 0. This setting is
	 * commonly used for animating a darkening dissolve between two objects.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xAA2233, and the background pixel has an RGB value of 0xDDA600, the
	 * resulting RGB value for the displayed pixel is 0x338400 (because 0xDD -
	 * 0xAA = 0x33, 0xA6 - 0x22 = 0x84, and 0x00 - 0x33 < 0x00).</p>]]></haxe_doc></SUBTRACT>
		<SHADER><haxe_doc><![CDATA[* Uses a shader to define the blend between objects.
	 *
	 * <p>Setting the <code>blendShader</code> property to a Shader instance
	 * automatically sets the display object's <code>blendMode</code> property to
	 * <code>BlendMode.SHADER</code>. If the <code>blendMode</code> property is
	 * set to <code>BlendMode.SHADER</code> without first setting the
	 * <code>blendShader</code> property, the <code>blendMode</code> property is
	 * set to <code>BlendMode.NORMAL</code> instead. If the
	 * <code>blendShader</code> property is set (which sets the
	 * <code>blendMode</code> property to <code>BlendMode.SHADER</code>), then
	 * later the value of the <code>blendMode</code> property is changed, the
	 * blend mode can be reset to use the blend shader simply by setting the
	 * <code>blendMode</code> property to <code>BlendMode.SHADER</code>. The
	 * <code>blendShader</code> property does not need to be set again except to
	 * change the shader that's used to define the blend mode.</p>
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></SHADER>
		<SCREEN><haxe_doc>* Multiplies the complement (inverse) of the display object color by the
	 * complement of the background color, resulting in a bleaching effect. This
	 * setting is commonly used for highlights or to remove black areas of the
	 * display object.</haxe_doc></SCREEN>
		<OVERLAY><haxe_doc><![CDATA[* Adjusts the color of each pixel based on the darkness of the background.
	 * If the background is lighter than 50% gray, the display object and
	 * background colors are screened, which results in a lighter color. If the
	 * background is darker than 50% gray, the colors are multiplied, which
	 * results in a darker color. This setting is commonly used for shading
	 * effects.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></OVERLAY>
		<NORMAL><haxe_doc>* The display object appears in front of the background. Pixel values of the
	 * display object override the pixel values of the background. Where the
	 * display object is transparent, the background is visible.</haxe_doc></NORMAL>
		<MULTIPLY><haxe_doc><![CDATA[* Multiplies the values of the display object constituent colors by the
	 * constituent colors of the background color, and normalizes by dividing by
	 * 0xFF, resulting in darker colors. This setting is commonly used for
	 * shadows and depth effects.
	 *
	 * <p>For example, if a constituent color (such as red) of one pixel in the
	 * display object and the corresponding color of the pixel in the background
	 * both have the value 0x88, the multiplied result is 0x4840. Dividing by
	 * 0xFF yields a value of 0x48 for that constituent color, which is a darker
	 * shade than the color of the display object or the color of the
	 * background.</p>]]></haxe_doc></MULTIPLY>
		<LIGHTEN><haxe_doc><![CDATA[* Selects the lighter of the constituent colors of the display object and
	 * the colors of the background (the colors with the larger values). This
	 * setting is commonly used for superimposing type.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	 * resulting RGB value for the displayed pixel is 0xFFF833 (because 0xFF >
	 * 0xDD, 0xCC < 0xF8, and 0x33 > 0x00 = 33).</p>
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></LIGHTEN>
		<LAYER><haxe_doc><![CDATA[* Forces the creation of a transparency group for the display object. This
	 * means that the display object is precomposed in a temporary buffer before
	 * it is processed further. The precomposition is done automatically if the
	 * display object is precached by means of bitmap caching or if the display
	 * object is a display object container that has at least one child object
	 * with a <code>blendMode</code> setting other than <code>"normal"</code>.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></LAYER>
		<INVERT><haxe_doc>* Inverts the background.</haxe_doc></INVERT>
		<HARDLIGHT><haxe_doc><![CDATA[* Adjusts the color of each pixel based on the darkness of the display
	 * object. If the display object is lighter than 50% gray, the display object
	 * and background colors are screened, which results in a lighter color. If
	 * the display object is darker than 50% gray, the colors are multiplied,
	 * which results in a darker color. This setting is commonly used for shading
	 * effects.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></HARDLIGHT>
		<ERASE><haxe_doc><![CDATA[* Erases the background based on the alpha value of the display object. This
	 * process requires that the <code>blendMode</code> property of the parent
	 * display object be set to <code>nme.display.BlendMode.LAYER</code>.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></ERASE>
		<DIFFERENCE><haxe_doc><![CDATA[* Compares the constituent colors of the display object with the colors of
	 * its background, and subtracts the darker of the values of the two
	 * constituent colors from the lighter value. This setting is commonly used
	 * for more vibrant colors.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	 * resulting RGB value for the displayed pixel is 0x222C33 (because 0xFF -
	 * 0xDD = 0x22, 0xF8 - 0xCC = 0x2C, and 0x33 - 0x00 = 0x33).</p>]]></haxe_doc></DIFFERENCE>
		<DARKEN><haxe_doc><![CDATA[* Selects the darker of the constituent colors of the display object and the
	 * colors of the background (the colors with the smaller values). This
	 * setting is commonly used for superimposing type.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xFFCC33, and the background pixel has an RGB value of 0xDDF800, the
	 * resulting RGB value for the displayed pixel is 0xDDCC00 (because 0xFF >
	 * 0xDD, 0xCC < 0xF8, and 0x33 > 0x00 = 33).</p>
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></DARKEN>
		<ALPHA><haxe_doc><![CDATA[* Applies the alpha value of each pixel of the display object to the
	 * background. This requires the <code>blendMode</code> property of the
	 * parent display object be set to
	 * <code>nme.display.BlendMode.LAYER</code>.
	 *
	 * <p>Not supported under GPU rendering.</p>]]></haxe_doc></ALPHA>
		<ADD><haxe_doc><![CDATA[* Adds the values of the constituent colors of the display object to the
	 * colors of its background, applying a ceiling of 0xFF. This setting is
	 * commonly used for animating a lightening dissolve between two objects.
	 *
	 * <p>For example, if the display object has a pixel with an RGB value of
	 * 0xAAA633, and the background pixel has an RGB value of 0xDD2200, the
	 * resulting RGB value for the displayed pixel is 0xFFC833 (because 0xAA +
	 * 0xDD > 0xFF, 0xA6 + 0x22 = 0xC8, and 0x33 + 0x00 = 0x33).</p>]]></haxe_doc></ADD>
		<haxe_doc><![CDATA[* A class that provides constant values for visual blend mode effects. These
 * constants are used in the following:
 * <ul>
 *   <li> The <code>blendMode</code> property of the
 * nme.display.DisplayObject class.</li>
 *   <li> The <code>blendMode</code> parameter of the <code>draw()</code>
 * method of the nme.display.BitmapData class</li>
 * </ul>]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.display.CapsStyle" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/CapsStyle.hx">
		<SQUARE><haxe_doc><![CDATA[* Used to specify square caps in the <code>caps</code> parameter of the
	 * <code>nme.display.Graphics.lineStyle()</code> method.]]></haxe_doc></SQUARE>
		<ROUND><haxe_doc><![CDATA[* Used to specify round caps in the <code>caps</code> parameter of the
	 * <code>nme.display.Graphics.lineStyle()</code> method.]]></haxe_doc></ROUND>
		<NONE><haxe_doc><![CDATA[* Used to specify no caps in the <code>caps</code> parameter of the
	 * <code>nme.display.Graphics.lineStyle()</code> method.]]></haxe_doc></NONE>
		<haxe_doc><![CDATA[* The CapsStyle class is an enumeration of constant values that specify the
 * caps style to use in drawing lines. The constants are provided for use as
 * values in the <code>caps</code> parameter of the
 * <code>nme.display.Graphics.lineStyle()</code> method. You can specify the
 * following three types of caps:]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.display.InteractiveObject" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/InteractiveObject.hx" extern="1">
		<extends path="nme.display.DisplayObject"/>
		<requestSoftKeyboard public="1">
			<f a=""><e path="Bool"/></f>
			<meta><m n=":require"><e>flash11</e></m></meta>
			<haxe_doc><![CDATA[* Raises a virtual keyboard.
	 *
	 * <p>Calling this method focuses the InteractiveObject instance and raises
	 * the soft keyboard, if necessary. The <code>needsSoftKeyboard</code> must
	 * also be <code>true</code>. A keyboard is not raised if a hardware keyboard
	 * is available, or if the client system does not support virtual
	 * keyboards.</p>
	 *
	 * <p><b>Note:</b> This method is not supported in AIR applications on
	 * iOS.</p>
	 * 
	 * @return A value of <code>true</code> means that the soft keyboard request
	 *         was granted; <code>false</code> means that the soft keyboard was
	 *         not raised.]]></haxe_doc>
		</requestSoftKeyboard>
		<tabIndex public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Specifies the tab ordering of objects in a SWF file. The
	 * <code>tabIndex</code> property is -1 by default, meaning no tab index is
	 * set for the object.
	 *
	 * <p>If any currently displayed object in the SWF file contains a
	 * <code>tabIndex</code> property, automatic tab ordering is disabled, and
	 * the tab ordering is calculated from the <code>tabIndex</code> properties
	 * of objects in the SWF file. The custom tab ordering includes only objects
	 * that have <code>tabIndex</code> properties.</p>
	 *
	 * <p>The <code>tabIndex</code> property can be a non-negative integer. The
	 * objects are ordered according to their <code>tabIndex</code> properties,
	 * in ascending order. An object with a <code>tabIndex</code> value of 1
	 * precedes an object with a <code>tabIndex</code> value of 2. Do not use the
	 * same <code>tabIndex</code> value for multiple objects.</p>
	 *
	 * <p>The custom tab ordering that the <code>tabIndex</code> property defines
	 * is <i>flat</i>. This means that no attention is paid to the hierarchical
	 * relationships of objects in the SWF file. All objects in the SWF file with
	 * <code>tabIndex</code> properties are placed in the tab order, and the tab
	 * order is determined by the order of the <code>tabIndex</code> values. </p>
	 *
	 * <p><b>Note:</b> To set the tab order for TLFTextField instances, cast the
	 * display object child of the TLFTextField as an InteractiveObject, then set
	 * the <code>tabIndex</code> property. For example: <pre
	 * xml:space="preserve">
	 * InteractiveObject(tlfInstance.getChildAt(1)).tabIndex = 3; </pre> To
	 * reverse the tab order from the default setting for three instances of a
	 * TLFTextField object (<code>tlfInstance1</code>, <code>tlfInstance2</code>
	 * and <code>tlfInstance3</code>), use: <pre xml:space="preserve">
	 * InteractiveObject(tlfInstance1.getChildAt(1)).tabIndex = 3;
	 * InteractiveObject(tlfInstance2.getChildAt(1)).tabIndex = 2;
	 * InteractiveObject(tlfInstance3.getChildAt(1)).tabIndex = 1; </pre> </p>]]></haxe_doc>
		</tabIndex>
		<tabEnabled public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether this object is in the tab order. If this object is in
	 * the tab order, the value is <code>true</code>; otherwise, the value is
	 * <code>false</code>. By default, the value is <code>false</code>, except
	 * for the following:
	 * <ul>
	 *   <li>For a SimpleButton object, the value is <code>true</code>.</li>
	 *   <li>For a TextField object with <code>type = "input"</code>, the value
	 * is <code>true</code>.</li>
	 *   <li>For a Sprite object or MovieClip object with <code>buttonMode =
	 * true</code>, the value is <code>true</code>.</li>
	 * </ul>]]></haxe_doc>
		</tabEnabled>
		<softKeyboardInputAreaOfInterest public="1">
			<c path="nme.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
			<haxe_doc><![CDATA[* Defines the area that should remain on-screen when a soft keyboard is
	 * displayed.
	 *
	 * <p>If the <code>needsSoftKeyboard</code> property of this
	 * InteractiveObject is <code>true</code>, then the runtime adjusts the
	 * display as needed to keep the object in view while the user types.
	 * Ordinarily, the runtime uses the object bounds obtained from the
	 * <code>DisplayObject.getBounds()</code> method. You can specify a different
	 * area using this <code>softKeyboardInputAreaOfInterest</code> property.</p>
	 *
	 * <p>Specify the <code>softKeyboardInputAreaOfInterest</code> in stage
	 * coordinates.</p>
	 *
	 * <p><b>Note:</b> On Android, the
	 * <code>softKeyboardInputAreaOfInterest</code> is not respected in landscape
	 * orientations.</p>]]></haxe_doc>
		</softKeyboardInputAreaOfInterest>
		<needsSoftKeyboard public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
			<haxe_doc><![CDATA[* Specifies whether a virtual keyboard (an on-screen, software keyboard)
	 * should display when this InteractiveObject instance receives focus.
	 *
	 * <p>By default, the value is <code>false</code> and focusing an
	 * InteractiveObject instance does not raise a soft keyboard. If the
	 * <code>needsSoftKeyboard</code> property is set to <code>true</code>, the
	 * runtime raises a soft keyboard when the InteractiveObject instance is
	 * ready to accept user input. An InteractiveObject instance is ready to
	 * accept user input after a programmatic call to set the Stage
	 * <code>focus</code> property or a user interaction, such as a "tap." If the
	 * client system has a hardware keyboard available or does not support
	 * virtual keyboards, then the soft keyboard is not raised.</p>
	 *
	 * <p>The InteractiveObject instance dispatches
	 * <code>softKeyboardActivating</code>, <code>softKeyboardActivate</code>,
	 * and <code>softKeyboardDeactivate</code> events when the soft keyboard
	 * raises and lowers.</p>
	 *
	 * <p><b>Note:</b> This property is not supported in AIR applications on
	 * iOS.</p>]]></haxe_doc>
		</needsSoftKeyboard>
		<mouseEnabled public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether this object receives mouse, or other user input,
	 * messages. The default value is <code>true</code>, which means that by
	 * default any InteractiveObject instance that is on the display list
	 * receives mouse events or other user input events. If
	 * <code>mouseEnabled</code> is set to <code>false</code>, the instance does
	 * not receive any mouse events (or other user input events like keyboard
	 * events). Any children of this instance on the display list are not
	 * affected. To change the <code>mouseEnabled</code> behavior for all
	 * children of an object on the display list, use
	 * <code>nme.display.DisplayObjectContainer.mouseChildren</code>.
	 *
	 * <p> No event is dispatched by setting this property. You must use the
	 * <code>addEventListener()</code> method to create interactive
	 * functionality.</p>]]></haxe_doc>
		</mouseEnabled>
		<focusRect public="1">
			<d/>
			<haxe_doc><![CDATA[* Specifies whether this object displays a focus rectangle. It can take one
	 * of three values: <code>true</code>, <code>false</code>, or
	 * <code>null</code>. Values of <code>true</code> and <code>false</code> work
	 * as expected, specifying whether or not the focus rectangle appears. A
	 * value of <code>null</code> indicates that this object obeys the
	 * <code>stageFocusRect</code> property of the Stage.]]></haxe_doc>
		</focusRect>
		<doubleClickEnabled public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the object receives <code>doubleClick</code> events. The
	 * default value is <code>false</code>, which means that by default an
	 * InteractiveObject instance does not receive <code>doubleClick</code>
	 * events. If the <code>doubleClickEnabled</code> property is set to
	 * <code>true</code>, the instance receives <code>doubleClick</code> events
	 * within its bounds. The <code>mouseEnabled</code> property of the
	 * InteractiveObject instance must also be set to <code>true</code> for the
	 * object to receive <code>doubleClick</code> events.
	 *
	 * <p>No event is dispatched by setting this property. You must use the
	 * <code>addEventListener()</code> method to add an event listener for the
	 * <code>doubleClick</code> event.</p>]]></haxe_doc>
		</doubleClickEnabled>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Calling the <code>new InteractiveObject()</code> constructor throws an
	 * <code>ArgumentError</code> exception. You can, however, call constructors
	 * for the following subclasses of InteractiveObject:
	 * <ul>
	 *   <li><code>new SimpleButton()</code></li>
	 *   <li><code>new TextField()</code></li>
	 *   <li><code>new Loader()</code></li>
	 *   <li><code>new Sprite()</code></li>
	 *   <li><code>new MovieClip()</code></li>
	 * </ul>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The InteractiveObject class is the abstract base class for all display
 * objects with which the user can interact, using the mouse, keyboard, or
 * other user input device.
 *
 * <p>You cannot instantiate the InteractiveObject class directly. A call to
 * the <code>new InteractiveObject()</code> constructor throws an
 * <code>ArgumentError</code> exception.</p>
 *
 * <p>The InteractiveObject class itself does not include any APIs for
 * rendering content onscreen. To create a custom subclass of the
 * InteractiveObject class, extend one of the subclasses that do have APIs for
 * rendering content onscreen, such as the Sprite, SimpleButton, TextField, or
 * MovieClip classes.</p>
 * 
 * @event clear                  Dispatched when the user selects 'Clear' (or
 *                               'Delete') from the text context menu. This
 *                               event is dispatched to the object that
 *                               currently has focus. If the object that
 *                               currently has focus is a TextField, the
 *                               default behavior of this event is to cause
 *                               any currently selected text in the text field
 *                               to be deleted.
 * @event click                  Dispatched when a user presses and releases
 *                               the main button of the user's pointing device
 *                               over the same InteractiveObject. For a click
 *                               event to occur, it must always follow this
 *                               series of events in the order of occurrence:
 *                               mouseDown event, then mouseUp. The target
 *                               object must be identical for both of these
 *                               events; otherwise the <code>click</code>
 *                               event does not occur. Any number of other
 *                               mouse events can occur at any time between
 *                               the <code>mouseDown</code> or
 *                               <code>mouseUp</code> events; the
 *                               <code>click</code> event still occurs.
 * @event contextMenu            Dispatched when a user gesture triggers the
 *                               context menu associated with this interactive
 *                               object in an AIR application.
 * @event copy                   Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a copy operation or selects 'Copy' from
 *                               the text context menu. This event is
 *                               dispatched to the object that currently has
 *                               focus. If the object that currently has focus
 *                               is a TextField, the default behavior of this
 *                               event is to cause any currently selected text
 *                               in the text field to be copied to the
 *                               clipboard.
 * @event cut                    Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a cut operation or selects 'Cut' from the
 *                               text context menu. This event is dispatched
 *                               to the object that currently has focus. If
 *                               the object that currently has focus is a
 *                               TextField, the default behavior of this event
 *                               is to cause any currently selected text in
 *                               the text field to be cut to the clipboard.
 * @event doubleClick            Dispatched when a user presses and releases
 *                               the main button of a pointing device twice in
 *                               rapid succession over the same
 *                               InteractiveObject when that object's
 *                               <code>doubleClickEnabled</code> flag is set
 *                               to <code>true</code>. For a
 *                               <code>doubleClick</code> event to occur, it
 *                               must immediately follow the following series
 *                               of events: <code>mouseDown</code>,
 *                               <code>mouseUp</code>, <code>click</code>,
 *                               <code>mouseDown</code>, <code>mouseUp</code>.
 *                               All of these events must share the same
 *                               target as the <code>doubleClick</code> event.
 *                               The second click, represented by the second
 *                               <code>mouseDown</code> and
 *                               <code>mouseUp</code> events, must occur
 *                               within a specific period of time after the
 *                               <code>click</code> event. The allowable
 *                               length of this period varies by operating
 *                               system and can often be configured by the
 *                               user. If the target is a selectable text
 *                               field, the word under the pointer is selected
 *                               as the default behavior. If the target
 *                               InteractiveObject does not have its
 *                               <code>doubleClickEnabled</code> flag set to
 *                               <code>true</code> it receives two
 *                               <code>click</code> events.
 *
 *                               <p>The <code>doubleClickEnabled</code>
 *                               property defaults to <code>false</code>. </p>
 *
 *                               <p>The double-click text selection behavior
 *                               of a TextField object is not related to the
 *                               <code>doubleClick</code> event. Use
 *                               <code>TextField.doubleClickEnabled</code> to
 *                               control TextField selections.</p>
 * @event focusIn                Dispatched <i>after</i> a display object
 *                               gains focus. This situation happens when a
 *                               user highlights the object with a pointing
 *                               device or keyboard navigation. The recipient
 *                               of such focus is called the target object of
 *                               this event, while the corresponding
 *                               InteractiveObject instance that lost focus
 *                               because of this change is called the related
 *                               object. A reference to the related object is
 *                               stored in the receiving object's
 *                               <code>relatedObject</code> property. The
 *                               <code>shiftKey</code> property is not used.
 *                               This event follows the dispatch of the
 *                               previous object's <code>focusOut</code>
 *                               event.
 * @event focusOut               Dispatched <i>after</i> a display object
 *                               loses focus. This happens when a user
 *                               highlights a different object with a pointing
 *                               device or keyboard navigation. The object
 *                               that loses focus is called the target object
 *                               of this event, while the corresponding
 *                               InteractiveObject instance that receives
 *                               focus is called the related object. A
 *                               reference to the related object is stored in
 *                               the target object's
 *                               <code>relatedObject</code> property. The
 *                               <code>shiftKey</code> property is not used.
 *                               This event precedes the dispatch of the
 *                               <code>focusIn</code> event by the related
 *                               object.
 * @event gesturePan             Dispatched when the user moves a point of
 *                               contact over the InteractiveObject instance
 *                               on a touch-enabled device (such as moving a
 *                               finger from left to right over a display
 *                               object on a mobile phone or tablet with a
 *                               touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>mouseOver</code> event and as a
 *                               <code>touchOver</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>mouseOver</code> event or a
 *                               <code>touchOver</code> event or a
 *                               <code>gesturePan</code> event, or all if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the nme.ui.Multitouch class to manage touch
 *                               event handling (enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gesturePan</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event gesturePressAndTap     Dispatched when the user creates a point of
 *                               contact with an InteractiveObject instance,
 *                               then taps on a touch-enabled device (such as
 *                               placing several fingers over a display object
 *                               to open a menu and then taps one finger to
 *                               select a menu item on a mobile phone or
 *                               tablet with a touch screen). Some devices
 *                               might also interpret this contact as a
 *                               combination of several mouse events, as well.
 *
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, and then provides
 *                               a secondary tap, the InteractiveObject
 *                               instance can dispatch a
 *                               <code>mouseOver</code> event and a
 *                               <code>click</code> event (among others) as
 *                               well as the <code>gesturePressAndTap</code>
 *                               event, or all if the current environment
 *                               supports it. Choose how you want to handle
 *                               the user interaction. Use the
 *                               nme.ui.Multitouch class to manage touch
 *                               event handling (enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gesturePressAndTap</code> event, you
 *                               can design your event handler to respond to
 *                               the specific needs of a touch-enabled
 *                               environment and provide users with a richer
 *                               touch-enabled experience. You can also handle
 *                               both events, separately, to provide a
 *                               different response for a touch event than a
 *                               mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact (the "push"). The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the secondary
 *                               point of contact (the "tap").</p>
 * @event gestureRotate          Dispatched when the user performs a rotation
 *                               gesture at a point of contact with an
 *                               InteractiveObject instance (such as touching
 *                               two fingers and rotating them over a display
 *                               object on a mobile phone or tablet with a
 *                               touch screen). Two-finger rotation is a
 *                               common rotation gesture, but each device and
 *                               operating system can have its own
 *                               requirements to indicate rotation. Some
 *                               devices might also interpret this contact as
 *                               a combination of several mouse events, as
 *                               well.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>mouseOver</code> event and a
 *                               <code>click</code> event (among others), in
 *                               addition to the <code>gestureRotate</code>
 *                               event, or all if the current environment
 *                               supports it. Choose how you want to handle
 *                               the user interaction. Use the
 *                               nme.ui.Multitouch class to manage touch
 *                               event handling (enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gestureRotate</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact. The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the point of
 *                               contact where the rotation gesture is
 *                               complete.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event gestureSwipe           Dispatched when the user performs a swipe
 *                               gesture at a point of contact with an
 *                               InteractiveObject instance (such as touching
 *                               three fingers to a screen and then moving
 *                               them in parallel over a display object on a
 *                               mobile phone or tablet with a touch screen).
 *                               Moving several fingers in parallel is a
 *                               common swipe gesture, but each device and
 *                               operating system can have its own
 *                               requirements for a swipe. Some devices might
 *                               also interpret this contact as a combination
 *                               of several mouse events, as well.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, and then moves the
 *                               fingers together, the InteractiveObject
 *                               instance can dispatch a <code>rollOver</code>
 *                               event and a <code>rollOut</code> event (among
 *                               others), in addition to the
 *                               <code>gestureSwipe</code> event, or all if
 *                               the current environment supports it. Choose
 *                               how you want to handle the user interaction.
 *                               If you choose to handle the
 *                               <code>rollOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gestureSwipe</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact. The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the point of
 *                               contact where the swipe gesture is
 *                               complete.</p>
 *
 *                               <p><b>Note:</b> While some devices using the
 *                               Mac OS operating system can interpret a
 *                               four-finger swipe, this API only supports a
 *                               three-finger swipe.</p>
 * @event gestureTwoFingerTap    Dispatched when the user presses two points
 *                               of contact over the same InteractiveObject
 *                               instance on a touch-enabled device (such as
 *                               presses and releases two fingers over a
 *                               display object on a mobile phone or tablet
 *                               with a touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>doubleClick</code> event.
 *
 *                               <p>Specifically, if a user taps two fingers
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>doubleClick</code> event or a
 *                               <code>gestureTwoFingerTap</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the nme.ui.Multitouch
 *                               class to manage touch event handling (enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>doubleClick</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>gestureTwoFingerTap</code> event, you
 *                               can design your event handler to respond to
 *                               the specific needs of a touch-enabled
 *                               environment and provide users with a richer
 *                               touch-enabled experience. You can also handle
 *                               both events, separately, to provide a
 *                               different response for a touch event than a
 *                               mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event gestureZoom            Dispatched when the user performs a zoom
 *                               gesture at a point of contact with an
 *                               InteractiveObject instance (such as touching
 *                               two fingers to a screen and then quickly
 *                               spreading the fingers apart over a display
 *                               object on a mobile phone or tablet with a
 *                               touch screen). Moving fingers apart is a
 *                               common zoom gesture, but each device and
 *                               operating system can have its own
 *                               requirements to indicate zoom. Some devices
 *                               might also interpret this contact as a
 *                               combination of several mouse events, as well.
 *
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, and then moves the
 *                               fingers apart, the InteractiveObject instance
 *                               can dispatch a <code>mouseOver</code> event
 *                               and a <code>click</code> event (among
 *                               others), in addition to the
 *                               <code>gestureZoom</code> event, or all if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the nme.ui.Multitouch class to manage touch
 *                               event handling (enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>gestureZoom</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p>When handling the properties of the event
 *                               object, note that the <code>localX</code> and
 *                               <code>localY</code> properties are set to the
 *                               primary point of contact. The
 *                               <code>offsetX</code> and <code>offsetY</code>
 *                               properties are the distance to the point of
 *                               contact where the zoom gesture is
 *                               complete.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event imeStartComposition    This event is dispatched to any client app
 *                               that supports inline input with an IME
 * @event keyDown                Dispatched when the user presses a key.
 *                               Mappings between keys and specific characters
 *                               vary by device and operating system. This
 *                               event type is generated after such a mapping
 *                               occurs but before the processing of an input
 *                               method editor (IME). IMEs are used to enter
 *                               characters, such as Chinese ideographs, that
 *                               the standard QWERTY keyboard is ill-equipped
 *                               to produce. This event occurs before the
 *                               <code>keyUp</code> event.
 *
 *                               <p>In AIR, canceling this event prevents the
 *                               character from being entered into a text
 *                               field.</p>
 * @event keyFocusChange         Dispatched when the user attempts to change
 *                               focus by using keyboard navigation. The
 *                               default behavior of this event is to change
 *                               the focus and dispatch the corresponding
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events.
 *
 *                               <p>This event is dispatched to the object
 *                               that currently has focus. The related object
 *                               for this event is the InteractiveObject
 *                               instance that receives focus if you do not
 *                               prevent the default behavior. You can prevent
 *                               the change in focus by calling the
 *                               <code>preventDefault()</code> method in an
 *                               event listener that is properly registered
 *                               with the target object. Focus changes and
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events are dispatched
 *                               by default.</p>
 * @event keyUp                  Dispatched when the user releases a key.
 *                               Mappings between keys and specific characters
 *                               vary by device and operating system. This
 *                               event type is generated after such a mapping
 *                               occurs but before the processing of an input
 *                               method editor (IME). IMEs are used to enter
 *                               characters, such as Chinese ideographs, that
 *                               the standard QWERTY keyboard is ill-equipped
 *                               to produce. This event occurs after a
 *                               <code>keyDown</code> event and has the
 *                               following characteristics:
 * @event middleClick            Dispatched when a user presses and releases
 *                               the middle button of the user's pointing
 *                               device over the same InteractiveObject. For a
 *                               <code>middleClick</code> event to occur, it
 *                               must always follow this series of events in
 *                               the order of occurrence:
 *                               <code>middleMouseDown</code> event, then
 *                               <code>middleMouseUp</code>. The target object
 *                               must be identical for both of these events;
 *                               otherwise the <code>middleClick</code> event
 *                               does not occur. Any number of other mouse
 *                               events can occur at any time between the
 *                               <code>middleMouseDown</code> or
 *                               <code>middleMouseUp</code> events; the
 *                               <code>middleClick</code> event still occurs.
 * @event middleMouseDown        Dispatched when a user presses the middle
 *                               pointing device button over an
 *                               InteractiveObject instance.
 * @event middleMouseUp          Dispatched when a user releases the pointing
 *                               device button over an InteractiveObject
 *                               instance.
 * @event mouseDown              Dispatched when a user presses the pointing
 *                               device button over an InteractiveObject
 *                               instance. If the target is a SimpleButton
 *                               instance, the SimpleButton instance displays
 *                               the <code>downState</code> display object as
 *                               the default behavior. If the target is a
 *                               selectable text field, the text field begins
 *                               selection as the default behavior.
 * @event mouseFocusChange       Dispatched when the user attempts to change
 *                               focus by using a pointer device. The default
 *                               behavior of this event is to change the focus
 *                               and dispatch the corresponding
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events.
 *
 *                               <p>This event is dispatched to the object
 *                               that currently has focus. The related object
 *                               for this event is the InteractiveObject
 *                               instance that receives focus if you do not
 *                               prevent the default behavior. You can prevent
 *                               the change in focus by calling
 *                               <code>preventDefault()</code> in an event
 *                               listener that is properly registered with the
 *                               target object. The <code>shiftKey</code>
 *                               property is not used. Focus changes and
 *                               <code>focusIn</code> and
 *                               <code>focusOut</code> events are dispatched
 *                               by default.</p>
 * @event mouseMove              Dispatched when a user moves the pointing
 *                               device while it is over an InteractiveObject.
 *                               If the target is a text field that the user
 *                               is selecting, the selection is updated as the
 *                               default behavior.
 * @event mouseOut               Dispatched when the user moves a pointing
 *                               device away from an InteractiveObject
 *                               instance. The event target is the object
 *                               previously under the pointing device. The
 *                               <code>relatedObject</code> is the object the
 *                               pointing device has moved to. If the target
 *                               is a SimpleButton instance, the button
 *                               displays the <code>upState</code> display
 *                               object as the default behavior.
 *
 *                               <p>The <code>mouseOut</code> event is
 *                               dispatched each time the mouse leaves the
 *                               area of any child object of the display
 *                               object container, even if the mouse remains
 *                               over another child object of the display
 *                               object container. This is different behavior
 *                               than the purpose of the <code>rollOut</code>
 *                               event, which is to simplify the coding of
 *                               rollover behaviors for display object
 *                               containers with children. When the mouse
 *                               leaves the area of a display object or the
 *                               area of any of its children to go to an
 *                               object that is not one of its children, the
 *                               display object dispatches the
 *                               <code>rollOut</code> event.The
 *                               <code>rollOut</code> events are dispatched
 *                               consecutively up the parent chain of the
 *                               object, starting with the object and ending
 *                               with the highest parent that is neither the
 *                               root nor an ancestor of the
 *                               <code>relatedObject</code>.</p>
 * @event mouseOver              Dispatched when the user moves a pointing
 *                               device over an InteractiveObject instance.
 *                               The <code>relatedObject</code> is the object
 *                               that was previously under the pointing
 *                               device. If the target is a SimpleButton
 *                               instance, the object displays the
 *                               <code>overState</code> or
 *                               <code>upState</code> display object,
 *                               depending on whether the mouse button is
 *                               down, as the default behavior.
 *
 *                               <p>The <code>mouseOver</code> event is
 *                               dispatched each time the mouse enters the
 *                               area of any child object of the display
 *                               object container, even if the mouse was
 *                               already over another child object of the
 *                               display object container. This is different
 *                               behavior than the purpose of the
 *                               <code>rollOver</code> event, which is to
 *                               simplify the coding of rollout behaviors for
 *                               display object containers with children. When
 *                               the mouse enters the area of a display object
 *                               or the area of any of its children from an
 *                               object that is not one of its children, the
 *                               display object dispatches the
 *                               <code>rollOver</code> event. The
 *                               <code>rollOver</code> events are dispatched
 *                               consecutively down the parent chain of the
 *                               object, starting with the highest parent that
 *                               is neither the root nor an ancestor of the
 *                               <code>relatedObject</code> and ending with
 *                               the object.</p>
 * @event mouseUp                Dispatched when a user releases the pointing
 *                               device button over an InteractiveObject
 *                               instance. If the target is a SimpleButton
 *                               instance, the object displays the
 *                               <code>upState</code> display object. If the
 *                               target is a selectable text field, the text
 *                               field ends selection as the default behavior.
 * @event mouseWheel             Dispatched when a mouse wheel is spun over an
 *                               InteractiveObject instance. If the target is
 *                               a text field, the text scrolls as the default
 *                               behavior. Only available on Microsoft Windows
 *                               operating systems.
 * @event nativeDragComplete     Dispatched by the drag initiator
 *                               InteractiveObject when the user releases the
 *                               drag gesture.
 *
 *                               <p>The event's dropAction property indicates
 *                               the action set by the drag target object; a
 *                               value of "none"
 *                               (<code>DragActions.NONE</code>) indicates
 *                               that the drop was canceled or was not
 *                               accepted.</p>
 *
 *                               <p>The <code>nativeDragComplete</code> event
 *                               handler is a convenient place to update the
 *                               state of the initiating display object, for
 *                               example, by removing an item from a list (on
 *                               a drag action of "move"), or by changing the
 *                               visual properties.</p>
 * @event nativeDragDrop         Dispatched by the target InteractiveObject
 *                               when a dragged object is dropped on it and
 *                               the drop has been accepted with a call to
 *                               DragManager.acceptDragDrop().
 *
 *                               <p>Access the dropped data using the event
 *                               object <code>clipboard</code> property.</p>
 *
 *                               <p>The handler for this event should set the
 *                               <code>DragManager.dropAction</code> property
 *                               to provide feedback to the initiator object
 *                               about which drag action was taken. If no
 *                               value is set, the DragManager will select a
 *                               default value from the list of allowed
 *                               actions.</p>
 * @event nativeDragEnter        Dispatched by an InteractiveObject when a
 *                               drag gesture enters its boundary.
 *
 *                               <p>Handle either the
 *                               <code>nativeDragEnter</code> or
 *                               <code>nativeDragOver</code> events to allow
 *                               the display object to become the drop
 *                               target.</p>
 *
 *                               <p>To determine whether the dispatching
 *                               display object can accept the drop, check the
 *                               suitability of the data in
 *                               <code>clipboard</code> property of the event
 *                               object, and the allowed drag actions in the
 *                               <code>allowedActions</code> property.</p>
 * @event nativeDragExit         Dispatched by an InteractiveObject when a
 *                               drag gesture leaves its boundary.
 * @event nativeDragOver         Dispatched by an InteractiveObject
 *                               continually while a drag gesture remains
 *                               within its boundary.
 *
 *                               <p><code>nativeDragOver</code> events are
 *                               dispatched whenever the mouse is moved. On
 *                               Windows and Mac, they are also dispatched on
 *                               a short timer interval even when the mouse
 *                               has not moved.</p>
 *
 *                               <p>Handle either the
 *                               <code>nativeDragOver</code> or
 *                               <code>nativeDragEnter</code> events to allow
 *                               the display object to become the drop
 *                               target.</p>
 *
 *                               <p>To determine whether the dispatching
 *                               display object can accept the drop, check the
 *                               suitability of the data in
 *                               <code>clipboard</code> property of the event
 *                               object, and the allowed drag actions in the
 *                               <code>allowedActions</code> property.</p>
 * @event nativeDragStart        Dispatched at the beginning of a drag
 *                               operation by the InteractiveObject that is
 *                               specified as the drag initiator in the
 *                               DragManager.doDrag() call.
 * @event nativeDragUpdate       Dispatched during a drag operation by the
 *                               InteractiveObject that is specified as the
 *                               drag initiator in the DragManager.doDrag()
 *                               call.
 *
 *                               <p><code>nativeDragUpdate</code> events are
 *                               not dispatched on Linux.</p>
 * @event paste                  Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a paste operation or selects 'Paste' from
 *                               the text context menu. This event is
 *                               dispatched to the object that currently has
 *                               focus. If the object that currently has focus
 *                               is a TextField, the default behavior of this
 *                               event is to cause the contents of the
 *                               clipboard to be pasted into the text field at
 *                               the current insertion point replacing any
 *                               currently selected text in the text field.
 * @event rightClick             Dispatched when a user presses and releases
 *                               the right button of the user's pointing
 *                               device over the same InteractiveObject. For a
 *                               <code>rightClick</code> event to occur, it
 *                               must always follow this series of events in
 *                               the order of occurrence:
 *                               <code>rightMouseDown</code> event, then
 *                               <code>rightMouseUp</code>. The target object
 *                               must be identical for both of these events;
 *                               otherwise the <code>rightClick</code> event
 *                               does not occur. Any number of other mouse
 *                               events can occur at any time between the
 *                               <code>rightMouseDown</code> or
 *                               <code>rightMouseUp</code> events; the
 *                               <code>rightClick</code> event still occurs.
 * @event rightMouseDown         Dispatched when a user presses the pointing
 *                               device button over an InteractiveObject
 *                               instance.
 * @event rightMouseUp           Dispatched when a user releases the pointing
 *                               device button over an InteractiveObject
 *                               instance.
 * @event rollOut                Dispatched when the user moves a pointing
 *                               device away from an InteractiveObject
 *                               instance. The event target is the object
 *                               previously under the pointing device or a
 *                               parent of that object. The
 *                               <code>relatedObject</code> is the object that
 *                               the pointing device has moved to. The
 *                               <code>rollOut</code> events are dispatched
 *                               consecutively up the parent chain of the
 *                               object, starting with the object and ending
 *                               with the highest parent that is neither the
 *                               root nor an ancestor of the
 *                               <code>relatedObject</code>.
 *
 *                               <p>The purpose of the <code>rollOut</code>
 *                               event is to simplify the coding of rollover
 *                               behaviors for display object containers with
 *                               children. When the mouse leaves the area of a
 *                               display object or the area of any of its
 *                               children to go to an object that is not one
 *                               of its children, the display object
 *                               dispatches the <code>rollOut</code> event.
 *                               This is different behavior than that of the
 *                               <code>mouseOut</code> event, which is
 *                               dispatched each time the mouse leaves the
 *                               area of any child object of the display
 *                               object container, even if the mouse remains
 *                               over another child object of the display
 *                               object container.</p>
 * @event rollOver               Dispatched when the user moves a pointing
 *                               device over an InteractiveObject instance.
 *                               The event target is the object under the
 *                               pointing device or a parent of that object.
 *                               The <code>relatedObject</code> is the object
 *                               that was previously under the pointing
 *                               device. The <code>rollOver</code> events are
 *                               dispatched consecutively down the parent
 *                               chain of the object, starting with the
 *                               highest parent that is neither the root nor
 *                               an ancestor of the <code>relatedObject</code>
 *                               and ending with the object.
 *
 *                               <p>The purpose of the <code>rollOver</code>
 *                               event is to simplify the coding of rollout
 *                               behaviors for display object containers with
 *                               children. When the mouse enters the area of a
 *                               display object or the area of any of its
 *                               children from an object that is not one of
 *                               its children, the display object dispatches
 *                               the <code>rollOver</code> event. This is
 *                               different behavior than that of the
 *                               <code>mouseOver</code> event, which is
 *                               dispatched each time the mouse enters the
 *                               area of any child object of the display
 *                               object container, even if the mouse was
 *                               already over another child object of the
 *                               display object container. </p>
 * @event selectAll              Dispatched when the user activates the
 *                               platform-specific accelerator key combination
 *                               for a select all operation or selects 'Select
 *                               All' from the text context menu. This event
 *                               is dispatched to the object that currently
 *                               has focus. If the object that currently has
 *                               focus is a TextField, the default behavior of
 *                               this event is to cause all the contents of
 *                               the text field to be selected.
 * @event softKeyboardActivate   Dispatched immediately after the soft
 *                               keyboard is raised.
 * @event softKeyboardActivating Dispatched immediately before the soft
 *                               keyboard is raised.
 * @event softKeyboardDeactivate Dispatched immediately after the soft
 *                               keyboard is lowered.
 * @event tabChildrenChange      Dispatched when the value of the object's
 *                               <code>tabChildren</code> flag changes.
 * @event tabEnabledChange       Dispatched when the object's
 *                               <code>tabEnabled</code> flag changes.
 * @event tabIndexChange         Dispatched when the value of the object's
 *                               <code>tabIndex</code> property changes.
 * @event textInput              Dispatched when a user enters one or more
 *                               characters of text. Various text input
 *                               methods can generate this event, including
 *                               standard keyboards, input method editors
 *                               (IMEs), voice or speech recognition systems,
 *                               and even the act of pasting plain text with
 *                               no formatting or style information.
 * @event touchBegin             Dispatched when the user first contacts a
 *                               touch-enabled device (such as touches a
 *                               finger to a mobile phone or tablet with a
 *                               touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>mouseDown</code> event.
 *
 *                               <p>Specifically, if a user touches a finger
 *                               to a touch screen, the InteractiveObject
 *                               instance can dispatch a
 *                               <code>mouseDown</code> event or a
 *                               <code>touchBegin</code> event, or both if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the nme.ui.Multitouch class to manage touch
 *                               event handling (enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseDown</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>touchBegin</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchEnd               Dispatched when the user removes contact with
 *                               a touch-enabled device (such as lifts a
 *                               finger off a mobile phone or tablet with a
 *                               touch screen). Some devices might also
 *                               interpret this contact as a
 *                               <code>mouseUp</code> event.
 *
 *                               <p>Specifically, if a user lifts a finger
 *                               from a touch screen, the InteractiveObject
 *                               instance can dispatch a <code>mouseUp</code>
 *                               event or a <code>touchEnd</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the nme.ui.Multitouch
 *                               class to manage touch event handling (enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>mouseUp</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchEnd</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchMove              Dispatched when the user moves the point of
 *                               contact with a touch-enabled device (such as
 *                               drags a finger across a mobile phone or
 *                               tablet with a touch screen). Some devices
 *                               might also interpret this contact as a
 *                               <code>mouseMove</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               across a touch screen, the InteractiveObject
 *                               instance can dispatch a
 *                               <code>mouseMove</code> event or a
 *                               <code>touchMove</code> event, or both if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the nme.ui.Multitouch class to manage touch
 *                               event handling (enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseMove</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>touchMove</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchOut               Dispatched when the user moves the point of
 *                               contact away from InteractiveObject instance
 *                               on a touch-enabled device (such as drags a
 *                               finger from one display object to another on
 *                               a mobile phone or tablet with a touch
 *                               screen). Some devices might also interpret
 *                               this contact as a <code>mouseOut</code>
 *                               event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               across a touch screen, the InteractiveObject
 *                               instance can dispatch a <code>mouseOut</code>
 *                               event or a <code>touchOut</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the nme.ui.Multitouch
 *                               class to manage touch event handling (enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>mouseOut</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchOut</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchOver              Dispatched when the user moves the point of
 *                               contact over an InteractiveObject instance on
 *                               a touch-enabled device (such as drags a
 *                               finger from a point outside a display object
 *                               to a point over a display object on a mobile
 *                               phone or tablet with a touch screen). Some
 *                               devices might also interpret this contact as
 *                               a <code>mouseOver</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>mouseOver</code> event or a
 *                               <code>touchOver</code> event, or both if the
 *                               current environment supports it. Choose how
 *                               you want to handle the user interaction. Use
 *                               the nme.ui.Multitouch class to manage touch
 *                               event handling (enable touch gesture event
 *                               handling, simple touch point event handling,
 *                               or disable touch events so only mouse events
 *                               are dispatched). If you choose to handle the
 *                               <code>mouseOver</code> event, then the same
 *                               event handler will run on a touch-enabled
 *                               device and a mouse enabled device. However,
 *                               if you choose to handle the
 *                               <code>touchOver</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchRollOut           Dispatched when the user moves the point of
 *                               contact away from an InteractiveObject
 *                               instance on a touch-enabled device (such as
 *                               drags a finger from over a display object to
 *                               a point outside the display object on a
 *                               mobile phone or tablet with a touch screen).
 *                               Some devices might also interpret this
 *                               contact as a <code>rollOut</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>rollOut</code> event or a
 *                               <code>touchRollOut</code> event, or both if
 *                               the current environment supports it. Choose
 *                               how you want to handle the user interaction.
 *                               Use the nme.ui.Multitouch class to manage
 *                               touch event handling (enable touch gesture
 *                               event handling, simple touch point event
 *                               handling, or disable touch events so only
 *                               mouse events are dispatched). If you choose
 *                               to handle the <code>rollOut</code> event,
 *                               then the same event handler will run on a
 *                               touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchRollOut</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchRollOver          Dispatched when the user moves the point of
 *                               contact over an InteractiveObject instance on
 *                               a touch-enabled device (such as drags a
 *                               finger from a point outside a display object
 *                               to a point over a display object on a mobile
 *                               phone or tablet with a touch screen). Some
 *                               devices might also interpret this contact as
 *                               a <code>rollOver</code> event.
 *
 *                               <p>Specifically, if a user moves a finger
 *                               over an InteractiveObject, the
 *                               InteractiveObject instance can dispatch a
 *                               <code>rollOver</code> event or a
 *                               <code>touchRollOver</code> event, or both if
 *                               the current environment supports it. Choose
 *                               how you want to handle the user interaction.
 *                               Use the nme.ui.Multitouch class to manage
 *                               touch event handling (enable touch gesture
 *                               event handling, simple touch point event
 *                               handling, or disable touch events so only
 *                               mouse events are dispatched). If you choose
 *                               to handle the <code>rollOver</code> event,
 *                               then the same event handler will run on a
 *                               touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchRollOver</code> event, you can
 *                               design your event handler to respond to the
 *                               specific needs of a touch-enabled environment
 *                               and provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>
 * @event touchTap               Dispatched when the user lifts the point of
 *                               contact over the same InteractiveObject
 *                               instance on which the contact was initiated
 *                               on a touch-enabled device (such as presses
 *                               and releases a finger from a single point
 *                               over a display object on a mobile phone or
 *                               tablet with a touch screen). Some devices
 *                               might also interpret this contact as a
 *                               <code>click</code> event.
 *
 *                               <p>Specifically, if a user taps a finger over
 *                               an InteractiveObject, the InteractiveObject
 *                               instance can dispatch a <code>click</code>
 *                               event or a <code>touchTap</code> event, or
 *                               both if the current environment supports it.
 *                               Choose how you want to handle the user
 *                               interaction. Use the nme.ui.Multitouch
 *                               class to manage touch event handling (enable
 *                               touch gesture event handling, simple touch
 *                               point event handling, or disable touch events
 *                               so only mouse events are dispatched). If you
 *                               choose to handle the <code>click</code>
 *                               event, then the same event handler will run
 *                               on a touch-enabled device and a mouse enabled
 *                               device. However, if you choose to handle the
 *                               <code>touchTap</code> event, you can design
 *                               your event handler to respond to the specific
 *                               needs of a touch-enabled environment and
 *                               provide users with a richer touch-enabled
 *                               experience. You can also handle both events,
 *                               separately, to provide a different response
 *                               for a touch event than a mouse event.</p>
 *
 *                               <p><b>Note:</b> See the Multitouch class for
 *                               environment compatibility information.</p>]]></haxe_doc>
	</class>
	<class path="nme.display.DisplayObjectContainer" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/DisplayObjectContainer.hx" extern="1">
		<extends path="nme.display.InteractiveObject"/>
		<swapChildrenAt public="1" set="method">
			<f a="index1:index2">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Swaps the z-order (front-to-back order) of the child objects at the two
	 * specified index positions in the child list. All other child objects in
	 * the display object container remain in the same index positions.
	 * 
	 * @param index1 The index position of the first child object.
	 * @param index2 The index position of the second child object.
	 * @throws RangeError If either index does not exist in the child list.</haxe_doc>
		</swapChildrenAt>
		<swapChildren public="1" set="method">
			<f a="child1:child2">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Swaps the z-order (front-to-back order) of the two specified child
	 * objects. All other child objects in the display object container remain in
	 * the same index positions.
	 * 
	 * @param child1 The first child object.
	 * @param child2 The second child object.
	 * @throws ArgumentError Throws if either child parameter is not a child of
	 *                       this object.</haxe_doc>
		</swapChildren>
		<setChildIndex public="1" set="method">
			<f a="child:index">
				<c path="nme.display.DisplayObject"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Changes the position of an existing child in the display object container.
	 * This affects the layering of child objects. For example, the following
	 * example shows three display objects, labeled a, b, and c, at index
	 * positions 0, 1, and 2, respectively:
	 *
	 * <p>When you use the <code>setChildIndex()</code> method and specify an
	 * index position that is already occupied, the only positions that change
	 * are those in between the display object's former and new position. All
	 * others will stay the same. If a child is moved to an index LOWER than its
	 * current index, all children in between will INCREASE by 1 for their index
	 * reference. If a child is moved to an index HIGHER than its current index,
	 * all children in between will DECREASE by 1 for their index reference. For
	 * example, if the display object container in the previous example is named
	 * <code>container</code>, you can swap the position of the display objects
	 * labeled a and b by calling the following code:</p>
	 *
	 * <p>This code results in the following arrangement of objects:</p>
	 * 
	 * @param child The child DisplayObject instance for which you want to change
	 *              the index number.
	 * @param index The resulting index number for the <code>child</code> display
	 *              object.
	 * @throws ArgumentError Throws if the child parameter is not a child of this
	 *                       object.
	 * @throws RangeError    Throws if the index does not exist in the child
	 *                       list.]]></haxe_doc>
		</setChildIndex>
		<removeChildAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Removes a child DisplayObject from the specified <code>index</code>
	 * position in the child list of the DisplayObjectContainer. The
	 * <code>parent</code> property of the removed child is set to
	 * <code>null</code>, and the object is garbage collected if no other
	 * references to the child exist. The index positions of any display objects
	 * above the child in the DisplayObjectContainer are decreased by 1.
	 *
	 * <p>The garbage collector reallocates unused memory space. When a variable
	 * or object is no longer actively referenced or stored somewhere, the
	 * garbage collector sweeps through and wipes out the memory space it used to
	 * occupy if no other references to it exist.</p>
	 * 
	 * @param index The child index of the DisplayObject to remove.
	 * @return The DisplayObject instance that was removed.
	 * @throws RangeError    Throws if the index does not exist in the child
	 *                       list.
	 * @throws SecurityError This child display object belongs to a sandbox to
	 *                       which the calling object does not have access. You
	 *                       can avoid this situation by having the child movie
	 *                       call the <code>Security.allowDomain()</code> method.]]></haxe_doc>
		</removeChildAt>
		<removeChild public="1" set="method">
			<f a="child">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Removes the specified <code>child</code> DisplayObject instance from the
	 * child list of the DisplayObjectContainer instance. The <code>parent</code>
	 * property of the removed child is set to <code>null</code> , and the object
	 * is garbage collected if no other references to the child exist. The index
	 * positions of any display objects above the child in the
	 * DisplayObjectContainer are decreased by 1.
	 *
	 * <p>The garbage collector reallocates unused memory space. When a variable
	 * or object is no longer actively referenced or stored somewhere, the
	 * garbage collector sweeps through and wipes out the memory space it used to
	 * occupy if no other references to it exist.</p>
	 * 
	 * @param child The DisplayObject instance to remove.
	 * @return The DisplayObject instance that you pass in the <code>child</code>
	 *         parameter.
	 * @throws ArgumentError Throws if the child parameter is not a child of this
	 *                       object.]]></haxe_doc>
		</removeChild>
		<getObjectsUnderPoint public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<c path="Array"><c path="nme.display.DisplayObject"/></c>
			</f>
			<haxe_doc><![CDATA[* Returns an array of objects that lie under the specified point and are
	 * children (or grandchildren, and so on) of this DisplayObjectContainer
	 * instance. Any child objects that are inaccessible for security reasons are
	 * omitted from the returned array. To determine whether this security
	 * restriction affects the returned array, call the
	 * <code>areInaccessibleObjectsUnderPoint()</code> method.
	 *
	 * <p>The <code>point</code> parameter is in the coordinate space of the
	 * Stage, which may differ from the coordinate space of the display object
	 * container (unless the display object container is the Stage). You can use
	 * the <code>globalToLocal()</code> and the <code>localToGlobal()</code>
	 * methods to convert points between these coordinate spaces.</p>
	 * 
	 * @param point The point under which to look.
	 * @return An array of objects that lie under the specified point and are
	 *         children (or grandchildren, and so on) of this
	 *         DisplayObjectContainer instance.]]></haxe_doc>
		</getObjectsUnderPoint>
		<getChildIndex public="1" set="method">
			<f a="child">
				<c path="nme.display.DisplayObject"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the index position of a <code>child</code> DisplayObject instance.
	 * 
	 * @param child The DisplayObject instance to identify.
	 * @return The index position of the child display object to identify.
	 * @throws ArgumentError Throws if the child parameter is not a child of this
	 *                       object.]]></haxe_doc>
		</getChildIndex>
		<getChildByName public="1" set="method">
			<f a="name">
				<c path="String"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns the child display object that exists with the specified name. If
	 * more that one child display object has the specified name, the method
	 * returns the first object in the child list.
	 *
	 * <p>The <code>getChildAt()</code> method is faster than the
	 * <code>getChildByName()</code> method. The <code>getChildAt()</code> method
	 * accesses a child from a cached array, whereas the
	 * <code>getChildByName()</code> method has to traverse a linked list to
	 * access a child.</p>
	 * 
	 * @param name The name of the child to return.
	 * @return The child display object with the specified name.
	 * @throws SecurityError This child display object belongs to a sandbox to
	 *                       which you do not have access. You can avoid this
	 *                       situation by having the child movie call the
	 *                       <code>Security.allowDomain()</code> method.]]></haxe_doc>
		</getChildByName>
		<getChildAt public="1" set="method">
			<f a="index">
				<c path="Int"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns the child display object instance that exists at the specified
	 * index.
	 * 
	 * @param index The index position of the child object.
	 * @return The child display object at the specified index position.
	 * @throws RangeError    Throws if the index does not exist in the child
	 *                       list.
	 * @throws SecurityError This child display object belongs to a sandbox to
	 *                       which you do not have access. You can avoid this
	 *                       situation by having the child movie call
	 *                       <code>Security.allowDomain()</code>.]]></haxe_doc>
		</getChildAt>
		<contains public="1" set="method">
			<f a="child">
				<c path="nme.display.DisplayObject"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the specified display object is a child of the
	 * DisplayObjectContainer instance or the instance itself. The search
	 * includes the entire display list including this DisplayObjectContainer
	 * instance. Grandchildren, great-grandchildren, and so on each return
	 * <code>true</code>.
	 * 
	 * @param child The child object to test.
	 * @return <code>true</code> if the <code>child</code> object is a child of
	 *         the DisplayObjectContainer or the container itself; otherwise
	 *         <code>false</code>.]]></haxe_doc>
		</contains>
		<areInaccessibleObjectsUnderPoint public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Indicates whether the security restrictions would cause any display
	 * objects to be omitted from the list returned by calling the
	 * <code>DisplayObjectContainer.getObjectsUnderPoint()</code> method with the
	 * specified <code>point</code> point. By default, content from one domain
	 * cannot access objects from another domain unless they are permitted to do
	 * so with a call to the <code>Security.allowDomain()</code> method. For more
	 * information, related to security, see the Flash Player Developer Center
	 * Topic: <a href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.
	 *
	 * <p>The <code>point</code> parameter is in the coordinate space of the
	 * Stage, which may differ from the coordinate space of the display object
	 * container (unless the display object container is the Stage). You can use
	 * the <code>globalToLocal()</code> and the <code>localToGlobal()</code>
	 * methods to convert points between these coordinate spaces.</p>
	 * 
	 * @param point The point under which to look.
	 * @return <code>true</code> if the point contains child display objects with
	 *         security restrictions.]]></haxe_doc>
		</areInaccessibleObjectsUnderPoint>
		<addChildAt public="1" set="method">
			<f a="child:index">
				<c path="nme.display.DisplayObject"/>
				<c path="Int"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Adds a child DisplayObject instance to this DisplayObjectContainer
	 * instance. The child is added at the index position specified. An index of
	 * 0 represents the back (bottom) of the display list for this
	 * DisplayObjectContainer object.
	 *
	 * <p>For example, the following example shows three display objects, labeled
	 * a, b, and c, at index positions 0, 2, and 1, respectively:</p>
	 *
	 * <p>If you add a child object that already has a different display object
	 * container as a parent, the object is removed from the child list of the
	 * other display object container. </p>
	 * 
	 * @param child The DisplayObject instance to add as a child of this
	 *              DisplayObjectContainer instance.
	 * @param index The index position to which the child is added. If you
	 *              specify a currently occupied index position, the child object
	 *              that exists at that position and all higher positions are
	 *              moved up one position in the child list.
	 * @return The DisplayObject instance that you pass in the <code>child</code>
	 *         parameter.
	 * @throws ArgumentError Throws if the child is the same as the parent. Also
	 *                       throws if the caller is a child (or grandchild etc.)
	 *                       of the child being added.
	 * @throws RangeError    Throws if the index position does not exist in the
	 *                       child list.
	 * @event added Dispatched when a display object is added to the display
	 *              list.]]></haxe_doc>
		</addChildAt>
		<addChild public="1" set="method">
			<f a="child">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Adds a child DisplayObject instance to this DisplayObjectContainer
	 * instance. The child is added to the front (top) of all other children in
	 * this DisplayObjectContainer instance. (To add a child to a specific index
	 * position, use the <code>addChildAt()</code> method.)
	 *
	 * <p>If you add a child object that already has a different display object
	 * container as a parent, the object is removed from the child list of the
	 * other display object container. </p>
	 *
	 * <p><b>Note:</b> The command <code>stage.addChild()</code> can cause
	 * problems with a published SWF file, including security problems and
	 * conflicts with other loaded SWF files. There is only one Stage within a
	 * Flash runtime instance, no matter how many SWF files you load into the
	 * runtime. So, generally, objects should not be added to the Stage,
	 * directly, at all. The only object the Stage should contain is the root
	 * object. Create a DisplayObjectContainer to contain all of the items on the
	 * display list. Then, if necessary, add that DisplayObjectContainer instance
	 * to the Stage.</p>
	 * 
	 * @param child The DisplayObject instance to add as a child of this
	 *              DisplayObjectContainer instance.
	 * @return The DisplayObject instance that you pass in the <code>child</code>
	 *         parameter.
	 * @throws ArgumentError Throws if the child is the same as the parent. Also
	 *                       throws if the caller is a child (or grandchild etc.)
	 *                       of the child being added.
	 * @event added Dispatched when a display object is added to the display
	 *              list.]]></haxe_doc>
		</addChild>
		<tabChildren public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Determines whether the children of the object are tab enabled. Enables or
	 * disables tabbing for the children of the object. The default is
	 * <code>true</code>.
	 *
	 * <p><b>Note:</b> Do not use the <code>tabChildren</code> property with
	 * Flex. Instead, use the
	 * <code>mx.core.UIComponent.hasFocusableChildren</code> property.</p>
	 * 
	 * @throws IllegalOperationError Calling this property of the Stage object
	 *                               throws an exception. The Stage object does
	 *                               not implement this property.]]></haxe_doc>
		</tabChildren>
		<numChildren public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* Returns the number of children of this object.</haxe_doc>
		</numChildren>
		<mouseChildren public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Determines whether or not the children of the object are mouse, or user
	 * input device, enabled. If an object is enabled, a user can interact with
	 * it by using a mouse or user input device. The default is
	 * <code>true</code>.
	 *
	 * <p>This property is useful when you create a button with an instance of
	 * the Sprite class (instead of using the SimpleButton class). When you use a
	 * Sprite instance to create a button, you can choose to decorate the button
	 * by using the <code>addChild()</code> method to add additional Sprite
	 * instances. This process can cause unexpected behavior with mouse events
	 * because the Sprite instances you add as children can become the target
	 * object of a mouse event when you expect the parent instance to be the
	 * target object. To ensure that the parent instance serves as the target
	 * objects for mouse events, you can set the <code>mouseChildren</code>
	 * property of the parent instance to <code>false</code>.</p>
	 *
	 * <p> No event is dispatched by setting this property. You must use the
	 * <code>addEventListener()</code> method to create interactive
	 * functionality.</p>]]></haxe_doc>
		</mouseChildren>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Calling the <code>new DisplayObjectContainer()</code> constructor throws
	 * an <code>ArgumentError</code> exception. You <i>can</i>, however, call
	 * constructors for the following subclasses of DisplayObjectContainer:
	 * <ul>
	 *   <li><code>new Loader()</code></li>
	 *   <li><code>new Sprite()</code></li>
	 *   <li><code>new MovieClip()</code></li>
	 * </ul>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The DisplayObjectContainer class is the base class for all objects that can
 * serve as display object containers on the display list. The display list
 * manages all objects displayed in the Flash runtimes. Use the
 * DisplayObjectContainer class to arrange the display objects in the display
 * list. Each DisplayObjectContainer object has its own child list for
 * organizing the z-order of the objects. The z-order is the front-to-back
 * order that determines which object is drawn in front, which is behind, and
 * so on.
 *
 * <p>DisplayObject is an abstract base class; therefore, you cannot call
 * DisplayObject directly. Invoking <code>new DisplayObject()</code> throws an
 * <code>ArgumentError</code> exception.</p>
 * The DisplayObjectContainer class is an abstract base class for all objects
 * that can contain child objects. It cannot be instantiated directly; calling
 * the <code>new DisplayObjectContainer()</code> constructor throws an
 * <code>ArgumentError</code> exception.
 *
 * <p>For more information, see the "Display Programming" chapter of the
 * <i>ActionScript 3.0 Developer's Guide</i>.</p>]]></haxe_doc>
	</class>
	<class path="nme.text.TextField" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/TextField.hx" extern="1">
		<extends path="nme.display.InteractiveObject"/>
		<isFontCompatible public="1" static="1">
			<f a="fontName:fontStyle">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Returns true if an embedded font is available with the specified
	 * <code>fontName</code> and <code>fontStyle</code> where
	 * <code>Font.fontType</code> is <code>nme.text.FontType.EMBEDDED</code>.
	 * Starting with Flash Player 10, two kinds of embedded fonts can appear in a
	 * SWF file. Normal embedded fonts are only used with TextField objects. CFF
	 * embedded fonts are only used with the nme.text.engine classes. The two
	 * types are distinguished by the <code>fontType</code> property of the
	 * <code>Font</code> class, as returned by the <code>enumerateFonts()</code>
	 * function.
	 *
	 * <p>TextField cannot use a font of type <code>EMBEDDED_CFF</code>. If
	 * <code>embedFonts</code> is set to <code>true</code> and the only font
	 * available at run time with the specified name and style is of type
	 * <code>EMBEDDED_CFF</code>, Flash Player fails to render the text, as if no
	 * embedded font were available with the specified name and style.</p>
	 *
	 * <p>If both <code>EMBEDDED</code> and <code>EMBEDDED_CFF</code> fonts are
	 * available with the same name and style, the <code>EMBEDDED</code> font is
	 * selected and text renders with the <code>EMBEDDED</code> font.</p>
	 * 
	 * @param fontName  The name of the embedded font to check.
	 * @param fontStyle Specifies the font style to check. Use
	 *                  <code>nme.text.FontStyle</code>
	 * @return <code>true</code> if a compatible embedded font is available,
	 *         otherwise <code>false</code>.
	 * @throws ArgumentError The <code>fontStyle</code> specified is not a member
	 *                       of <code>nme.text.FontStyle</code>.]]></haxe_doc>
		</isFontCompatible>
		<setTextFormat public="1" set="method">
			<f a="format:?beginIndex:?endIndex">
				<c path="nme.text.TextFormat"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Applies the text formatting that the <code>format</code> parameter
	 * specifies to the specified text in a text field. The value of
	 * <code>format</code> must be a TextFormat object that specifies the desired
	 * text formatting changes. Only the non-null properties of
	 * <code>format</code> are applied to the text field. Any property of
	 * <code>format</code> that is set to <code>null</code> is not applied. By
	 * default, all of the properties of a newly created TextFormat object are
	 * set to <code>null</code>.
	 *
	 * <p><b>Note:</b> This method does not work if a style sheet is applied to
	 * the text field.</p>
	 *
	 * <p>The <code>setTextFormat()</code> method changes the text formatting
	 * applied to a range of characters or to the entire body of text in a text
	 * field. To apply the properties of format to all text in the text field, do
	 * not specify values for <code>beginIndex</code> and <code>endIndex</code>.
	 * To apply the properties of the format to a range of text, specify values
	 * for the <code>beginIndex</code> and the <code>endIndex</code> parameters.
	 * You can use the <code>length</code> property to determine the index
	 * values.</p>
	 *
	 * <p>The two types of formatting information in a TextFormat object are
	 * character level formatting and paragraph level formatting. Each character
	 * in a text field can have its own character formatting settings, such as
	 * font name, font size, bold, and italic.</p>
	 *
	 * <p>For paragraphs, the first character of the paragraph is examined for
	 * the paragraph formatting settings for the entire paragraph. Examples of
	 * paragraph formatting settings are left margin, right margin, and
	 * indentation.</p>
	 *
	 * <p>Any text inserted manually by the user, or replaced by the
	 * <code>replaceSelectedText()</code> method, receives the default text field
	 * formatting for new text, and not the formatting specified for the text
	 * insertion point. To set the default formatting for new text, use
	 * <code>defaultTextFormat</code>.</p>
	 * 
	 * @param format A TextFormat object that contains character and paragraph
	 *               formatting information.
	 * @throws Error      This method cannot be used on a text field with a style
	 *                    sheet.
	 * @throws RangeError The <code>beginIndex</code> or <code>endIndex</code>
	 *                    specified is out of range.]]></haxe_doc>
		</setTextFormat>
		<setSelection public="1" set="method">
			<f a="beginIndex:endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sets as selected the text designated by the index values of the first and
	 * last characters, which are specified with the <code>beginIndex</code> and
	 * <code>endIndex</code> parameters. If the two parameter values are the
	 * same, this method sets the insertion point, as if you set the
	 * <code>caretIndex</code> property.
	 * 
	 * @param beginIndex The zero-based index value of the first character in the
	 *                   selection (for example, the first character is 0, the
	 *                   second character is 1, and so on).
	 * @param endIndex   The zero-based index value of the last character in the
	 *                   selection.]]></haxe_doc>
		</setSelection>
		<replaceText public="1" set="method">
			<f a="beginIndex:endIndex:newText">
				<c path="Int"/>
				<c path="Int"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Replaces the range of characters that the <code>beginIndex</code> and
	 * <code>endIndex</code> parameters specify with the contents of the
	 * <code>newText</code> parameter. As designed, the text from
	 * <code>beginIndex</code> to <code>endIndex-1</code> is replaced.
	 *
	 * <p><b>Note:</b> This method does not work if a style sheet is applied to
	 * the text field.</p>
	 * 
	 * @param beginIndex The zero-based index value for the start position of the
	 *                   replacement range.
	 * @param endIndex   The zero-based index position of the first character
	 *                   after the desired text span.
	 * @param newText    The text to use to replace the specified range of
	 *                   characters.
	 * @throws Error This method cannot be used on a text field with a style
	 *               sheet.]]></haxe_doc>
		</replaceText>
		<replaceSelectedText public="1" set="method">
			<f a="value">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Replaces the current selection with the contents of the <code>value</code>
	 * parameter. The text is inserted at the position of the current selection,
	 * using the current default character format and default paragraph format.
	 * The text is not treated as HTML.
	 *
	 * <p>You can use the <code>replaceSelectedText()</code> method to insert and
	 * delete text without disrupting the character and paragraph formatting of
	 * the rest of the text.</p>
	 *
	 * <p><b>Note:</b> This method does not work if a style sheet is applied to
	 * the text field.</p>
	 * 
	 * @param value The string to replace the currently selected text.
	 * @throws Error This method cannot be used on a text field with a style
	 *               sheet.]]></haxe_doc>
		</replaceSelectedText>
		<pasteRichText public="1" set="method"><f a="richText">
	<c path="String"/>
	<e path="Bool"/>
</f></pasteRichText>
		<insertXMLText public="1" set="method"><f a="beginIndex:endIndex:richText:?pasting">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></insertXMLText>
		<getXMLText public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="String"/>
</f></getXMLText>
		<getTextRuns public="1" set="method"><f a="?beginIndex:?endIndex">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Array"><d/></c>
</f></getTextRuns>
		<getTextFormat public="1" set="method">
			<f a="?beginIndex:?endIndex">
				<c path="Int"/>
				<c path="Int"/>
				<c path="nme.text.TextFormat"/>
			</f>
			<haxe_doc><![CDATA[* Returns a TextFormat object that contains formatting information for the
	 * range of text that the <code>beginIndex</code> and <code>endIndex</code>
	 * parameters specify. Only properties that are common to the entire text
	 * specified are set in the resulting TextFormat object. Any property that is
	 * <i>mixed</i>, meaning that it has different values at different points in
	 * the text, has a value of <code>null</code>.
	 *
	 * <p>If you do not specify values for these parameters, this method is
	 * applied to all the text in the text field. </p>
	 *
	 * <p>The following table describes three possible usages:</p>
	 * 
	 * @return The TextFormat object that represents the formatting properties
	 *         for the specified text.
	 * @throws RangeError The <code>beginIndex</code> or <code>endIndex</code>
	 *                    specified is out of range.]]></haxe_doc>
		</getTextFormat>
		<getRawText public="1" set="method"><f a=""><c path="String"/></f></getRawText>
		<getParagraphLength public="1" set="method">
			<f a="charIndex">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Given a character index, returns the length of the paragraph containing
	 * the given character. The length is relative to the first character in the
	 * paragraph (as returned by <code>getFirstCharInParagraph()</code>), not to
	 * the character index passed in.
	 * 
	 * @param charIndex The zero-based index value of the character (for example,
	 *                  the first character is 0, the second character is 1, and
	 *                  so on).
	 * @return Returns the number of characters in the paragraph.
	 * @throws RangeError The character index specified is out of range.]]></haxe_doc>
		</getParagraphLength>
		<getLineText public="1" set="method">
			<f a="lineIndex">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Returns the text of the line specified by the <code>lineIndex</code>
	 * parameter.
	 * 
	 * @param lineIndex The zero-based index value of the line (for example, the
	 *                  first line is 0, the second line is 1, and so on).
	 * @return The text string contained in the specified line.
	 * @throws RangeError The line number specified is out of range.]]></haxe_doc>
		</getLineText>
		<getLineOffset public="1" set="method">
			<f a="lineIndex">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the character index of the first character in the line that the
	 * <code>lineIndex</code> parameter specifies.
	 * 
	 * @param lineIndex The zero-based index value of the line (for example, the
	 *                  first line is 0, the second line is 1, and so on).
	 * @return The zero-based index value of the first character in the line.
	 * @throws RangeError The line number specified is out of range.]]></haxe_doc>
		</getLineOffset>
		<getLineLength public="1" set="method">
			<f a="lineIndex">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>* Returns the number of characters in a specific text line.
	 * 
	 * @param lineIndex The line number for which you want the length.
	 * @return The number of characters in the line.
	 * @throws RangeError The line number specified is out of range.</haxe_doc>
		</getLineLength>
		<getLineIndexOfChar public="1" set="method">
			<f a="charIndex">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the zero-based index value of the line containing the character
	 * specified by the <code>charIndex</code> parameter.
	 * 
	 * @param charIndex The zero-based index value of the character (for example,
	 *                  the first character is 0, the second character is 1, and
	 *                  so on).
	 * @return The zero-based index value of the line.
	 * @throws RangeError The character index specified is out of range.]]></haxe_doc>
		</getLineIndexOfChar>
		<getLineIndexAtPoint public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the zero-based index value of the line at the point specified by
	 * the <code>x</code> and <code>y</code> parameters.
	 * 
	 * @param x The <i>x</i> coordinate of the line.
	 * @param y The <i>y</i> coordinate of the line.
	 * @return The zero-based index value of the line (for example, the first
	 *         line is 0, the second line is 1, and so on). Returns -1 if the
	 *         point is not over any line.]]></haxe_doc>
		</getLineIndexAtPoint>
		<getImageReference public="1" set="method">
			<f a="id">
				<c path="String"/>
				<c path="nme.display.DisplayObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns a DisplayObject reference for the given <code>id</code>, for an
	 * image or SWF file that has been added to an HTML-formatted text field by
	 * using an <code><img></code> tag. The <code><img></code> tag is in the
	 * following format:
	 *
	 * <p><pre xml:space="preserve"><code> <img src = 'filename.jpg' id =
	 * 'instanceName' ></code></pre></p>
	 * 
	 * @param id The <code>id</code> to match (in the <code>id</code> attribute
	 *           of the <code><img></code> tag).
	 * @return The display object corresponding to the image or SWF file with the
	 *         matching <code>id</code> attribute in the <code><img></code> tag
	 *         of the text field. For media loaded from an external source, this
	 *         object is a Loader object, and, once loaded, the media object is a
	 *         child of that Loader object. For media embedded in the SWF file,
	 *         it is the loaded object. If no <code><img></code> tag with the
	 *         matching <code>id</code> exists, the method returns
	 *         <code>null</code>.]]></haxe_doc>
		</getImageReference>
		<getFirstCharInParagraph public="1" set="method">
			<f a="charIndex">
				<c path="Int"/>
				<c path="Int"/>
			</f>
			<haxe_doc>* Given a character index, returns the index of the first character in the
	 * same paragraph.
	 * 
	 * @param charIndex The zero-based index value of the character (for example,
	 *                  the first character is 0, the second character is 1, and
	 *                  so on).
	 * @return The zero-based index value of the first character in the same
	 *         paragraph.
	 * @throws RangeError The character index specified is out of range.</haxe_doc>
		</getFirstCharInParagraph>
		<getCharIndexAtPoint public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Int"/>
			</f>
			<haxe_doc><![CDATA[* Returns the zero-based index value of the character at the point specified
	 * by the <code>x</code> and <code>y</code> parameters.
	 * 
	 * @param x The <i>x</i> coordinate of the character.
	 * @param y The <i>y</i> coordinate of the character.
	 * @return The zero-based index value of the character (for example, the
	 *         first position is 0, the second position is 1, and so on). Returns
	 *         -1 if the point is not over any character.]]></haxe_doc>
		</getCharIndexAtPoint>
		<getCharBoundaries public="1" set="method">
			<f a="charIndex">
				<c path="Int"/>
				<c path="nme.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Returns a rectangle that is the bounding box of the character.
	 * 
	 * @param charIndex The zero-based index value for the character (for
	 *                  example, the first position is 0, the second position is
	 *                  1, and so on).
	 * @return A rectangle with <code>x</code> and <code>y</code> minimum and
	 *         maximum values defining the bounding box of the character.]]></haxe_doc>
		</getCharBoundaries>
		<copyRichText public="1" set="method"><f a=""><c path="String"/></f></copyRichText>
		<appendText public="1" set="method">
			<f a="newText">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Appends the string specified by the <code>newText</code> parameter to the
	 * end of the text of the text field. This method is more efficient than an
	 * addition assignment (<code>+=</code>) on a <code>text</code> property
	 * (such as <code>someTextField.text += moreText</code>), particularly for a
	 * text field that contains a significant amount of content.
	 * 
	 * @param newText The string to append to the existing text.]]></haxe_doc>
		</appendText>
		<wordWrap public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether the text field has word wrap. If
	 * the value of <code>wordWrap</code> is <code>true</code>, the text field
	 * has word wrap; if the value is <code>false</code>, the text field does not
	 * have word wrap. The default value is <code>false</code>.]]></haxe_doc>
		</wordWrap>
		<useRichTextClipboard public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether to copy and paste the text formatting along with the
	 * text. When set to <code>true</code>, Flash Player copies and pastes
	 * formatting (such as alignment, bold, and italics) when you copy and paste
	 * between text fields. Both the origin and destination text fields for the
	 * copy and paste procedure must have <code>useRichTextClipboard</code> set
	 * to <code>true</code>. The default value is <code>false</code>.]]></haxe_doc>
		</useRichTextClipboard>
		<type public="1">
			<e path="nme.text.TextFieldType"/>
			<haxe_doc><![CDATA[* The type of the text field. Either one of the following TextFieldType
	 * constants: <code>TextFieldType.DYNAMIC</code>, which specifies a dynamic
	 * text field, which a user cannot edit, or <code>TextFieldType.INPUT</code>,
	 * which specifies an input text field, which a user can edit.
	 * 
	 * @default dynamic
	 * @throws ArgumentError The <code>type</code> specified is not a member of
	 *                       nme.text.TextFieldType.]]></haxe_doc>
		</type>
		<thickness public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The thickness of the glyph edges in this text field. This property applies
	 * only when <code>nme.text.AntiAliasType</code> is set to
	 * <code>nme.text.AntiAliasType.ADVANCED</code>.
	 *
	 * <p>The range for <code>thickness</code> is a number from -200 to 200. If
	 * you attempt to set <code>thickness</code> to a value outside that range,
	 * the property is set to the nearest value in the range (either -200 or
	 * 200).</p>
	 * 
	 * @default 0]]></haxe_doc>
		</thickness>
		<textWidth public="1" set="null">
			<c path="Float"/>
			<haxe_doc>* The width of the text in pixels.</haxe_doc>
		</textWidth>
		<textHeight public="1" set="null">
			<c path="Float"/>
			<haxe_doc>* The height of the text in pixels.</haxe_doc>
		</textHeight>
		<textColor public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The color of the text in a text field, in hexadecimal format. The
	 * hexadecimal color system uses six digits to represent color values. Each
	 * digit has 16 possible values or characters. The characters range from 0-9
	 * and then A-F. For example, black is <code>0x000000</code>; white is
	 * <code>0xFFFFFF</code>.
	 * 
	 * @default 0 (0x000000)]]></haxe_doc>
		</textColor>
		<text public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* A string that is the current text in the text field. Lines are separated
	 * by the carriage return character (<code>'\r'</code>, ASCII 13). This
	 * property contains unformatted text in the text field, without HTML tags.
	 *
	 * <p>To get the text in HTML form, use the <code>htmlText</code>
	 * property.</p>]]></haxe_doc>
		</text>
		<sharpness public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The sharpness of the glyph edges in this text field. This property applies
	 * only if the <code>nme.text.AntiAliasType</code> property of the text
	 * field is set to <code>nme.text.AntiAliasType.ADVANCED</code>. The range
	 * for <code>sharpness</code> is a number from -400 to 400. If you attempt to
	 * set <code>sharpness</code> to a value outside that range, Flash sets the
	 * property to the nearest value in the range (either -400 or 400).
	 * 
	 * @default 0]]></haxe_doc>
		</sharpness>
		<selectionEndIndex public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The zero-based character index value of the last character in the current
	 * selection. For example, the first character is 0, the second character is
	 * 1, and so on. If no text is selected, this property is the value of
	 * <code>caretIndex</code>.]]></haxe_doc>
		</selectionEndIndex>
		<selectionBeginIndex public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The zero-based character index value of the first character in the current
	 * selection. For example, the first character is 0, the second character is
	 * 1, and so on. If no text is selected, this property is the value of
	 * <code>caretIndex</code>.]]></haxe_doc>
		</selectionBeginIndex>
		<selectedText public="1" set="null"><c path="String"/></selectedText>
		<selectable public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether the text field is selectable. The
	 * value <code>true</code> indicates that the text is selectable. The
	 * <code>selectable</code> property controls whether a text field is
	 * selectable, not whether a text field is editable. A dynamic text field can
	 * be selectable even if it is not editable. If a dynamic text field is not
	 * selectable, the user cannot select its text.
	 *
	 * <p>If <code>selectable</code> is set to <code>false</code>, the text in
	 * the text field does not respond to selection commands from the mouse or
	 * keyboard, and the text cannot be copied with the Copy command. If
	 * <code>selectable</code> is set to <code>true</code>, the text in the text
	 * field can be selected with the mouse or keyboard, and the text can be
	 * copied with the Copy command. You can select text this way even if the
	 * text field is a dynamic text field instead of an input text field. </p>
	 * 
	 * @default true]]></haxe_doc>
		</selectable>
		<scrollV public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The vertical position of text in a text field. The <code>scrollV</code>
	 * property is useful for directing users to a specific paragraph in a long
	 * passage, or creating scrolling text fields.
	 *
	 * <p>The units of vertical scrolling are lines, whereas the units of
	 * horizontal scrolling are pixels. If the first line displayed is the first
	 * line in the text field, scrollV is set to 1 (not 0). Horizontal scrolling
	 * is measured in pixels because most fonts are proportionally spaced; that
	 * is, the characters can have different widths. Flash performs vertical
	 * scrolling by line because users usually want to see a complete line of
	 * text rather than a partial line. Even if there are multiple fonts on a
	 * line, the height of the line adjusts to fit the largest font in use.</p>]]></haxe_doc>
		</scrollV>
		<scrollH public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The current horizontal scrolling position. If the <code>scrollH</code>
	 * property is 0, the text is not horizontally scrolled. This property value
	 * is an integer that represents the horizontal position in pixels.
	 *
	 * <p>The units of horizontal scrolling are pixels, whereas the units of
	 * vertical scrolling are lines. Horizontal scrolling is measured in pixels
	 * because most fonts you typically use are proportionally spaced; that is,
	 * the characters can have different widths. Flash Player performs vertical
	 * scrolling by line because users usually want to see a complete line of
	 * text rather than a partial line. Even if a line uses multiple fonts, the
	 * height of the line adjusts to fit the largest font in use.</p>
	 *
	 * <p><b>Note: </b>The <code>scrollH</code> property is zero-based, not
	 * 1-based like the <code>scrollV</code> vertical scrolling property.</p>]]></haxe_doc>
		</scrollH>
		<restrict public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the set of characters that a user can enter into the text field.
	 * If the value of the <code>restrict</code> property is <code>null</code>,
	 * you can enter any character. If the value of the <code>restrict</code>
	 * property is an empty string, you cannot enter any character. If the value
	 * of the <code>restrict</code> property is a string of characters, you can
	 * enter only characters in the string into the text field. The string is
	 * scanned from left to right. You can specify a range by using the hyphen
	 * (-) character. Only user interaction is restricted; a script can put any
	 * text into the text field. <ph outputclass="flashonly">This property does
	 * not synchronize with the Embed font options in the Property inspector.
	 *
	 * <p>If the string begins with a caret (^) character, all characters are
	 * initially accepted and succeeding characters in the string are excluded
	 * from the set of accepted characters. If the string does not begin with a
	 * caret (^) character, no characters are initially accepted and succeeding
	 * characters in the string are included in the set of accepted
	 * characters.</p>
	 *
	 * <p>The following example allows only uppercase characters, spaces, and
	 * numbers to be entered into a text field:</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "A-Z 0-9"; </pre>
	 *
	 * <p>The following example includes all characters, but excludes lowercase
	 * letters:</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "^a-z"; </pre>
	 *
	 * <p>You can use a backslash to enter a ^ or - verbatim. The accepted
	 * backslash sequences are \-, \^ or \\. The backslash must be an actual
	 * character in the string, so when specified in ActionScript, a double
	 * backslash must be used. For example, the following code includes only the
	 * dash (-) and caret (^):</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "\\-\\^"; </pre>
	 *
	 * <p>The ^ can be used anywhere in the string to toggle between including
	 * characters and excluding characters. The following code includes only
	 * uppercase letters, but excludes the uppercase letter Q:</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "A-Z^Q"; </pre>
	 *
	 * <p>You can use the <code>\u</code> escape sequence to construct
	 * <code>restrict</code> strings. The following code includes only the
	 * characters from ASCII 32 (space) to ASCII 126 (tilde).</p>
	 * <pre xml:space="preserve"> my_txt.restrict = "\u0020-\u007E"; </pre>
	 * 
	 * @default null]]></haxe_doc>
		</restrict>
		<numLines public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Defines the number of text lines in a multiline text field. If
	 * <code>wordWrap</code> property is set to <code>true</code>, the number of
	 * lines increases when text wraps.]]></haxe_doc>
		</numLines>
		<multiline public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether field is a multiline text field. If the value is
	 * <code>true</code>, the text field is multiline; if the value is
	 * <code>false</code>, the text field is a single-line text field. In a field
	 * of type <code>TextFieldType.INPUT</code>, the <code>multiline</code> value
	 * determines whether the <code>Enter</code> key creates a new line (a value
	 * of <code>false</code>, and the <code>Enter</code> key is ignored). If you
	 * paste text into a <code>TextField</code> with a <code>multiline</code>
	 * value of <code>false</code>, newlines are stripped out of the text.
	 * 
	 * @default false]]></haxe_doc>
		</multiline>
		<mouseWheelEnabled public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether Flash Player automatically scrolls
	 * multiline text fields when the user clicks a text field and rolls the
	 * mouse wheel. By default, this value is <code>true</code>. This property is
	 * useful if you want to prevent mouse wheel scrolling of text fields, or
	 * implement your own text field scrolling.]]></haxe_doc>
		</mouseWheelEnabled>
		<maxScrollV public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The maximum value of <code>scrollV</code>.]]></haxe_doc>
		</maxScrollV>
		<maxScrollH public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The maximum value of <code>scrollH</code>.]]></haxe_doc>
		</maxScrollH>
		<maxChars public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The maximum number of characters that the text field can contain, as
	 * entered by a user. A script can insert more text than
	 * <code>maxChars</code> allows; the <code>maxChars</code> property indicates
	 * only how much text a user can enter. If the value of this property is
	 * <code>0</code>, a user can enter an unlimited amount of text.
	 * 
	 * @default 0]]></haxe_doc>
		</maxChars>
		<length public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of characters in a text field. A character such as tab
	 * (<code>\t</code>) counts as one character.]]></haxe_doc>
		</length>
		<htmlText public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Contains the HTML representation of the text field contents.
	 *
	 * <p>Flash Player supports the following HTML tags:</p>
	 *
	 * <p>Flash Player and AIR also support explicit character codes, such as
	 * &#38; (ASCII ampersand) and &#x20AC; (Unicode € symbol). </p>]]></haxe_doc>
		</htmlText>
		<embedFonts public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether to render by using embedded font outlines. If
	 * <code>false</code>, Flash Player renders the text field by using device
	 * fonts.
	 *
	 * <p>If you set the <code>embedFonts</code> property to <code>true</code>
	 * for a text field, you must specify a font for that text by using the
	 * <code>font</code> property of a TextFormat object applied to the text
	 * field. If the specified font is not embedded in the SWF file, the text is
	 * not displayed.</p>
	 * 
	 * @default false]]></haxe_doc>
		</embedFonts>
		<displayAsPassword public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the text field is a password text field. If the value of
	 * this property is <code>true</code>, the text field is treated as a
	 * password text field and hides the input characters using asterisks instead
	 * of the actual characters. If <code>false</code>, the text field is not
	 * treated as a password text field. When password mode is enabled, the Cut
	 * and Copy commands and their corresponding keyboard shortcuts will not
	 * function. This security mechanism prevents an unscrupulous user from using
	 * the shortcuts to discover a password on an unattended computer.
	 * 
	 * @default false]]></haxe_doc>
		</displayAsPassword>
		<defaultTextFormat public="1">
			<c path="nme.text.TextFormat"/>
			<haxe_doc><![CDATA[* Specifies the format applied to newly inserted text, such as text entered
	 * by a user or text inserted with the <code>replaceSelectedText()</code>
	 * method.
	 *
	 * <p><b>Note:</b> When selecting characters to be replaced with
	 * <code>setSelection()</code> and <code>replaceSelectedText()</code>, the
	 * <code>defaultTextFormat</code> will be applied only if the text has been
	 * selected up to and including the last character. Here is an example:</p>
	 * <pre xml:space="preserve"> var my_txt:TextField new TextField();
	 * my_txt.text = "Flash Macintosh version"; var my_fmt:TextFormat = new
	 * TextFormat(); my_fmt.color = 0xFF0000; my_txt.defaultTextFormat = my_fmt;
	 * my_txt.setSelection(6,15); // partial text selected - defaultTextFormat
	 * not applied my_txt.setSelection(6,23); // text selected to end -
	 * defaultTextFormat applied my_txt.replaceSelectedText("Windows version");
	 * </pre>
	 *
	 * <p>When you access the <code>defaultTextFormat</code> property, the
	 * returned TextFormat object has all of its properties defined. No property
	 * is <code>null</code>.</p>
	 *
	 * <p><b>Note:</b> You can't set this property if a style sheet is applied to
	 * the text field.</p>
	 * 
	 * @throws Error This method cannot be used on a text field with a style
	 *               sheet.]]></haxe_doc>
		</defaultTextFormat>
		<condenseWhite public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that specifies whether extra white space (spaces, line
	 * breaks, and so on) in a text field with HTML text is removed. The default
	 * value is <code>false</code>. The <code>condenseWhite</code> property only
	 * affects text set with the <code>htmlText</code> property, not the
	 * <code>text</code> property. If you set text with the <code>text</code>
	 * property, <code>condenseWhite</code> is ignored.
	 *
	 * <p>If <code>condenseWhite</code> is set to <code>true</code>, use standard
	 * HTML commands such as <code><BR></code> and <code><P></code> to place line
	 * breaks in the text field.</p>
	 *
	 * <p>Set the <code>condenseWhite</code> property before setting the
	 * <code>htmlText</code> property.</p>]]></haxe_doc>
		</condenseWhite>
		<caretIndex public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The index of the insertion point (caret) position. If no insertion point
	 * is displayed, the value is the position the insertion point would be if
	 * you restored focus to the field (typically where the insertion point last
	 * was, or 0 if the field has not had focus).
	 *
	 * <p>Selection span indexes are zero-based (for example, the first position
	 * is 0, the second position is 1, and so on).</p>]]></haxe_doc>
		</caretIndex>
		<bottomScrollV public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* An integer (1-based index) that indicates the bottommost line that is
	 * currently visible in the specified text field. Think of the text field as
	 * a window onto a block of text. The <code>scrollV</code> property is the
	 * 1-based index of the topmost visible line in the window.
	 *
	 * <p>All the text between the lines indicated by <code>scrollV</code> and
	 * <code>bottomScrollV</code> is currently visible in the text field.</p>]]></haxe_doc>
		</bottomScrollV>
		<borderColor public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The color of the text field border. The default value is
	 * <code>0x000000</code> (black). This property can be retrieved or set, even
	 * if there currently is no border, but the color is visible only if the text
	 * field has the <code>border</code> property set to <code>true</code>.]]></haxe_doc>
		</borderColor>
		<border public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the text field has a border. If <code>true</code>, the
	 * text field has a border. If <code>false</code>, the text field has no
	 * border. Use the <code>borderColor</code> property to set the border color.
	 * 
	 * @default false]]></haxe_doc>
		</border>
		<backgroundColor public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The color of the text field background. The default value is
	 * <code>0xFFFFFF</code> (white). This property can be retrieved or set, even
	 * if there currently is no background, but the color is visible only if the
	 * text field has the <code>background</code> property set to
	 * <code>true</code>.]]></haxe_doc>
		</backgroundColor>
		<background public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the text field has a background fill. If
	 * <code>true</code>, the text field has a background fill. If
	 * <code>false</code>, the text field has no background fill. Use the
	 * <code>backgroundColor</code> property to set the background color of a
	 * text field.
	 * 
	 * @default false]]></haxe_doc>
		</background>
		<autoSize public="1">
			<e path="nme.text.TextFieldAutoSize"/>
			<haxe_doc><![CDATA[* Controls automatic sizing and alignment of text fields. Acceptable values
	 * for the <code>TextFieldAutoSize</code> constants:
	 * <code>TextFieldAutoSize.NONE</code> (the default),
	 * <code>TextFieldAutoSize.LEFT</code>, <code>TextFieldAutoSize.RIGHT</code>,
	 * and <code>TextFieldAutoSize.CENTER</code>.
	 *
	 * <p>If <code>autoSize</code> is set to <code>TextFieldAutoSize.NONE</code>
	 * (the default) no resizing occurs.</p>
	 *
	 * <p>If <code>autoSize</code> is set to <code>TextFieldAutoSize.LEFT</code>,
	 * the text is treated as left-justified text, meaning that the left margin
	 * of the text field remains fixed and any resizing of a single line of the
	 * text field is on the right margin. If the text includes a line break (for
	 * example, <code>"\n"</code> or <code>"\r"</code>), the bottom is also
	 * resized to fit the next line of text. If <code>wordWrap</code> is also set
	 * to <code>true</code>, only the bottom of the text field is resized and the
	 * right side remains fixed.</p>
	 *
	 * <p>If <code>autoSize</code> is set to
	 * <code>TextFieldAutoSize.RIGHT</code>, the text is treated as
	 * right-justified text, meaning that the right margin of the text field
	 * remains fixed and any resizing of a single line of the text field is on
	 * the left margin. If the text includes a line break (for example,
	 * <code>"\n" or "\r")</code>, the bottom is also resized to fit the next
	 * line of text. If <code>wordWrap</code> is also set to <code>true</code>,
	 * only the bottom of the text field is resized and the left side remains
	 * fixed.</p>
	 *
	 * <p>If <code>autoSize</code> is set to
	 * <code>TextFieldAutoSize.CENTER</code>, the text is treated as
	 * center-justified text, meaning that any resizing of a single line of the
	 * text field is equally distributed to both the right and left margins. If
	 * the text includes a line break (for example, <code>"\n"</code> or
	 * <code>"\r"</code>), the bottom is also resized to fit the next line of
	 * text. If <code>wordWrap</code> is also set to <code>true</code>, only the
	 * bottom of the text field is resized and the left and right sides remain
	 * fixed.</p>
	 * 
	 * @throws ArgumentError The <code>autoSize</code> specified is not a member
	 *                       of nme.text.TextFieldAutoSize.]]></haxe_doc>
		</autoSize>
		<antiAliasType public="1">
			<e path="nme.text.AntiAliasType"/>
			<haxe_doc><![CDATA[* The type of anti-aliasing used for this text field. Use
	 * <code>nme.text.AntiAliasType</code> constants for this property. You can
	 * control this setting only if the font is embedded (with the
	 * <code>embedFonts</code> property set to <code>true</code>). The default
	 * setting is <code>nme.text.AntiAliasType.NORMAL</code>.
	 *
	 * <p>To set values for this property, use the following string values:</p>]]></haxe_doc>
		</antiAliasType>
		<alwaysShowSelection public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* When set to <code>true</code> and the text field is not in focus, Flash
	 * Player highlights the selection in the text field in gray. When set to
	 * <code>false</code> and the text field is not in focus, Flash Player does
	 * not highlight the selection in the text field.
	 * 
	 * @default false]]></haxe_doc>
		</alwaysShowSelection>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Creates a new TextField instance. After you create the TextField instance,
	 * call the <code>addChild()</code> or <code>addChildAt()</code> method of
	 * the parent DisplayObjectContainer object to add the TextField instance to
	 * the display list.
	 *
	 * <p>The default size for a text field is 100 x 100 pixels.</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The TextField class is used to create display objects for text display and
 * input. <ph outputclass="flexonly">You can use the TextField class to
 * perform low-level text rendering. However, in Flex, you typically use the
 * Label, Text, TextArea, and TextInput controls to process text. <ph
 * outputclass="flashonly">You can give a text field an instance name in the
 * Property inspector and use the methods and properties of the TextField
 * class to manipulate it with ActionScript. TextField instance names are
 * displayed in the Movie Explorer and in the Insert Target Path dialog box in
 * the Actions panel.
 *
 * <p>To create a text field dynamically, use the <code>TextField()</code>
 * constructor.</p>
 *
 * <p>The methods of the TextField class let you set, select, and manipulate
 * text in a dynamic or input text field that you create during authoring or
 * at runtime. </p>
 *
 * <p>ActionScript provides several ways to format your text at runtime. The
 * TextFormat class lets you set character and paragraph formatting for
 * TextField objects. You can apply Cascading Style Sheets (CSS) styles to
 * text fields by using the <code>TextField.styleSheet</code> property and the
 * StyleSheet class. You can use CSS to style built-in HTML tags, define new
 * formatting tags, or apply styles. You can assign HTML formatted text, which
 * optionally uses CSS styles, directly to a text field. HTML text that you
 * assign to a text field can contain embedded media (movie clips, SWF files,
 * GIF files, PNG files, and JPEG files). The text wraps around the embedded
 * media in the same way that a web browser wraps text around media embedded
 * in an HTML document. </p>
 *
 * <p>Flash Player supports a subset of HTML tags that you can use to format
 * text. See the list of supported HTML tags in the description of the
 * <code>htmlText</code> property.</p>
 * 
 * @event change                    Dispatched after a control value is
 *                                  modified, unlike the
 *                                  <code>textInput</code> event, which is
 *                                  dispatched before the value is modified.
 *                                  Unlike the W3C DOM Event Model version of
 *                                  the <code>change</code> event, which
 *                                  dispatches the event only after the
 *                                  control loses focus, the ActionScript 3.0
 *                                  version of the <code>change</code> event
 *                                  is dispatched any time the control
 *                                  changes. For example, if a user types text
 *                                  into a text field, a <code>change</code>
 *                                  event is dispatched after every keystroke.
 * @event link                      Dispatched when a user clicks a hyperlink
 *                                  in an HTML-enabled text field, where the
 *                                  URL begins with "event:". The remainder of
 *                                  the URL after "event:" is placed in the
 *                                  text property of the LINK event.
 *
 *                                  <p><b>Note:</b> The default behavior,
 *                                  adding the text to the text field, occurs
 *                                  only when Flash Player generates the
 *                                  event, which in this case happens when a
 *                                  user attempts to input text. You cannot
 *                                  put text into a text field by sending it
 *                                  <code>textInput</code> events.</p>
 * @event scroll                    Dispatched by a TextField object
 *                                  <i>after</i> the user scrolls.
 * @event textInput                 Flash Player dispatches the
 *                                  <code>textInput</code> event when a user
 *                                  enters one or more characters of text.
 *                                  Various text input methods can generate
 *                                  this event, including standard keyboards,
 *                                  input method editors (IMEs), voice or
 *                                  speech recognition systems, and even the
 *                                  act of pasting plain text with no
 *                                  formatting or style information.
 * @event textInteractionModeChange Flash Player dispatches the
 *                                  <code>textInteractionModeChange</code>
 *                                  event when a user changes the interaction
 *                                  mode of a text field. for example on
 *                                  Android, one can toggle from NORMAL mode
 *                                  to SELECTION mode using context menu
 *                                  options]]></haxe_doc>
	</class>
	<class path="nme.display.FPS" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/FPS.hx">
		<extends path="nme.text.TextField"/>
		<onEnter set="method" line="38"><f a="_">
	<unknown/>
	<e path="Void"/>
</f></onEnter>
		<times><c path="Array"><c path="Float"/></c></times>
		<new public="1" set="method" line="16"><f a="?inX:?inY:?inCol">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.GradientType" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/GradientType.hx">
		<RADIAL><haxe_doc>* Value used to specify a radial gradient fill.</haxe_doc></RADIAL>
		<LINEAR><haxe_doc>* Value used to specify a linear gradient fill.</haxe_doc></LINEAR>
		<haxe_doc><![CDATA[* The GradientType class provides values for the <code>type</code> parameter
 * in the <code>beginGradientFill()</code> and
 * <code>lineGradientStyle()</code> methods of the nme.display.Graphics
 * class.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.display.Graphics" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/Graphics.hx" extern="1">
		<moveTo public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Moves the current drawing position to (<code>x</code>, <code>y</code>). If
	 * any of the parameters are missing, this method fails and the current
	 * drawing position is not changed.
	 * 
	 * @param x A number that indicates the horizontal position relative to the
	 *          registration point of the parent display object (in pixels).
	 * @param y A number that indicates the vertical position relative to the
	 *          registration point of the parent display object (in pixels).]]></haxe_doc>
		</moveTo>
		<lineTo public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a line using the current line style from the current drawing
	 * position to (<code>x</code>, <code>y</code>); the current drawing position
	 * is then set to (<code>x</code>, <code>y</code>). If the display object in
	 * which you are drawing contains content that was created with the Flash
	 * drawing tools, calls to the <code>lineTo()</code> method are drawn
	 * underneath the content. If you call <code>lineTo()</code> before any calls
	 * to the <code>moveTo()</code> method, the default position for the current
	 * drawing is (<i>0, 0</i>). If any of the parameters are missing, this
	 * method fails and the current drawing position is not changed.
	 * 
	 * @param x A number that indicates the horizontal position relative to the
	 *          registration point of the parent display object (in pixels).
	 * @param y A number that indicates the vertical position relative to the
	 *          registration point of the parent display object (in pixels).]]></haxe_doc>
		</lineTo>
		<lineStyle public="1" set="method">
			<f a="?thickness:?color:?alpha:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
				<c path="Float"/>
				<c path="Int"/>
				<c path="Float"/>
				<e path="Bool"/>
				<e path="nme.display.LineScaleMode"/>
				<e path="nme.display.CapsStyle"/>
				<e path="nme.display.JointStyle"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a line style used for subsequent calls to Graphics methods such
	 * as the <code>lineTo()</code> method or the <code>drawCircle()</code>
	 * method. The line style remains in effect until you call the
	 * <code>lineGradientStyle()</code> method, the
	 * <code>lineBitmapStyle()</code> method, or the <code>lineStyle()</code>
	 * method with different parameters.
	 *
	 * <p>You can call the <code>lineStyle()</code> method in the middle of
	 * drawing a path to specify different styles for different line segments
	 * within the path.</p>
	 *
	 * <p><b>Note: </b>Calls to the <code>clear()</code> method set the line
	 * style back to <code>undefined</code>.</p>
	 *
	 * <p><b>Note: </b>Flash Lite 4 supports only the first three parameters
	 * (<code>thickness</code>, <code>color</code>, and <code>alpha</code>).</p>
	 * 
	 * @param thickness    An integer that indicates the thickness of the line in
	 *                     points; valid values are 0-255. If a number is not
	 *                     specified, or if the parameter is undefined, a line is
	 *                     not drawn. If a value of less than 0 is passed, the
	 *                     default is 0. The value 0 indicates hairline
	 *                     thickness; the maximum thickness is 255. If a value
	 *                     greater than 255 is passed, the default is 255.
	 * @param color        A hexadecimal color value of the line; for example,
	 *                     red is 0xFF0000, blue is 0x0000FF, and so on. If a
	 *                     value is not indicated, the default is 0x000000
	 *                     (black). Optional.
	 * @param alpha        A number that indicates the alpha value of the color
	 *                     of the line; valid values are 0 to 1. If a value is
	 *                     not indicated, the default is 1 (solid). If the value
	 *                     is less than 0, the default is 0. If the value is
	 *                     greater than 1, the default is 1.
	 * @param pixelHinting (Not supported in Flash Lite 4) A Boolean value that
	 *                     specifies whether to hint strokes to full pixels. This
	 *                     affects both the position of anchors of a curve and
	 *                     the line stroke size itself. With
	 *                     <code>pixelHinting</code> set to <code>true</code>,
	 *                     line widths are adjusted to full pixel widths. With
	 *                     <code>pixelHinting</code> set to <code>false</code>,
	 *                     disjoints can appear for curves and straight lines.
	 *                     For example, the following illustrations show how
	 *                     Flash Player or Adobe AIR renders two rounded
	 *                     rectangles that are identical, except that the
	 *                     <code>pixelHinting</code> parameter used in the
	 *                     <code>lineStyle()</code> method is set differently
	 *                     (the images are scaled by 200%, to emphasize the
	 *                     difference):
	 *
	 *                     <p>If a value is not supplied, the line does not use
	 *                     pixel hinting.</p>
	 * @param scaleMode    (Not supported in Flash Lite 4) A value from the
	 *                     LineScaleMode class that specifies which scale mode to
	 *                     use:
	 *                     <ul>
	 *                       <li> <code>LineScaleMode.NORMAL</code> - Always
	 *                     scale the line thickness when the object is scaled
	 *                     (the default). </li>
	 *                       <li> <code>LineScaleMode.NONE</code> - Never scale
	 *                     the line thickness. </li>
	 *                       <li> <code>LineScaleMode.VERTICAL</code> - Do not
	 *                     scale the line thickness if the object is scaled
	 *                     vertically <i>only</i>. For example, consider the
	 *                     following circles, drawn with a one-pixel line, and
	 *                     each with the <code>scaleMode</code> parameter set to
	 *                     <code>LineScaleMode.VERTICAL</code>. The circle on the
	 *                     left is scaled vertically only, and the circle on the
	 *                     right is scaled both vertically and horizontally:
	 *                     </li>
	 *                       <li> <code>LineScaleMode.HORIZONTAL</code> - Do not
	 *                     scale the line thickness if the object is scaled
	 *                     horizontally <i>only</i>. For example, consider the
	 *                     following circles, drawn with a one-pixel line, and
	 *                     each with the <code>scaleMode</code> parameter set to
	 *                     <code>LineScaleMode.HORIZONTAL</code>. The circle on
	 *                     the left is scaled horizontally only, and the circle
	 *                     on the right is scaled both vertically and
	 *                     horizontally:   </li>
	 *                     </ul>
	 * @param caps         (Not supported in Flash Lite 4) A value from the
	 *                     CapsStyle class that specifies the type of caps at the
	 *                     end of lines. Valid values are:
	 *                     <code>CapsStyle.NONE</code>,
	 *                     <code>CapsStyle.ROUND</code>, and
	 *                     <code>CapsStyle.SQUARE</code>. If a value is not
	 *                     indicated, Flash uses round caps.
	 *
	 *                     <p>For example, the following illustrations show the
	 *                     different <code>capsStyle</code> settings. For each
	 *                     setting, the illustration shows a blue line with a
	 *                     thickness of 30 (for which the <code>capsStyle</code>
	 *                     applies), and a superimposed black line with a
	 *                     thickness of 1 (for which no <code>capsStyle</code>
	 *                     applies): </p>
	 * @param joints       (Not supported in Flash Lite 4) A value from the
	 *                     JointStyle class that specifies the type of joint
	 *                     appearance used at angles. Valid values are:
	 *                     <code>JointStyle.BEVEL</code>,
	 *                     <code>JointStyle.MITER</code>, and
	 *                     <code>JointStyle.ROUND</code>. If a value is not
	 *                     indicated, Flash uses round joints.
	 *
	 *                     <p>For example, the following illustrations show the
	 *                     different <code>joints</code> settings. For each
	 *                     setting, the illustration shows an angled blue line
	 *                     with a thickness of 30 (for which the
	 *                     <code>jointStyle</code> applies), and a superimposed
	 *                     angled black line with a thickness of 1 (for which no
	 *                     <code>jointStyle</code> applies): </p>
	 *
	 *                     <p><b>Note:</b> For <code>joints</code> set to
	 *                     <code>JointStyle.MITER</code>, you can use the
	 *                     <code>miterLimit</code> parameter to limit the length
	 *                     of the miter.</p>
	 * @param miterLimit   (Not supported in Flash Lite 4) A number that
	 *                     indicates the limit at which a miter is cut off. Valid
	 *                     values range from 1 to 255 (and values outside that
	 *                     range are rounded to 1 or 255). This value is only
	 *                     used if the <code>jointStyle</code> is set to
	 *                     <code>"miter"</code>. The <code>miterLimit</code>
	 *                     value represents the length that a miter can extend
	 *                     beyond the point at which the lines meet to form a
	 *                     joint. The value expresses a factor of the line
	 *                     <code>thickness</code>. For example, with a
	 *                     <code>miterLimit</code> factor of 2.5 and a
	 *                     <code>thickness</code> of 10 pixels, the miter is cut
	 *                     off at 25 pixels.
	 *
	 *                     <p>For example, consider the following angled lines,
	 *                     each drawn with a <code>thickness</code> of 20, but
	 *                     with <code>miterLimit</code> set to 1, 2, and 4.
	 *                     Superimposed are black reference lines showing the
	 *                     meeting points of the joints:</p>
	 *
	 *                     <p>Notice that a given <code>miterLimit</code> value
	 *                     has a specific maximum angle for which the miter is
	 *                     cut off. The following table lists some examples:</p>]]></haxe_doc>
		</lineStyle>
		<lineGradientStyle public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
				<e path="nme.display.GradientType"/>
				<c path="Array"><c path="Int"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="nme.geom.Matrix"/>
				<e path="nme.display.SpreadMethod"/>
				<e path="nme.display.InterpolationMethod"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a gradient to use for the stroke when drawing lines.
	 *
	 * <p>The gradient line style is used for subsequent calls to Graphics
	 * methods such as the <code>lineTo()</code> methods or the
	 * <code>drawCircle()</code> method. The line style remains in effect until
	 * you call the <code>lineStyle()</code> or <code>lineBitmapStyle()</code>
	 * methods, or the <code>lineGradientStyle()</code> method again with
	 * different parameters. </p>
	 *
	 * <p>You can call the <code>lineGradientStyle()</code> method in the middle
	 * of drawing a path to specify different styles for different line segments
	 * within a path. </p>
	 *
	 * <p>Call the <code>lineStyle()</code> method before you call the
	 * <code>lineGradientStyle()</code> method to enable a stroke, or else the
	 * value of the line style is <code>undefined</code>.</p>
	 *
	 * <p>Calls to the <code>clear()</code> method set the line style back to
	 * <code>undefined</code>. </p>
	 * 
	 * @param type                A value from the GradientType class that
	 *                            specifies which gradient type to use, either
	 *                            GradientType.LINEAR or GradientType.RADIAL.
	 * @param matrix              A transformation matrix as defined by the
	 *                            nme.geom.Matrix class. The nme.geom.Matrix
	 *                            class includes a
	 *                            <code>createGradientBox()</code> method, which
	 *                            lets you conveniently set up the matrix for use
	 *                            with the <code>lineGradientStyle()</code>
	 *                            method.
	 * @param spreadMethod        A value from the SpreadMethod class that
	 *                            specifies which spread method to use:
	 * @param interpolationMethod A value from the InterpolationMethod class that
	 *                            specifies which value to use. For example,
	 *                            consider a simple linear gradient between two
	 *                            colors (with the <code>spreadMethod</code>
	 *                            parameter set to
	 *                            <code>SpreadMethod.REFLECT</code>). The
	 *                            different interpolation methods affect the
	 *                            appearance as follows:
	 * @param focalPointRatio     A number that controls the location of the
	 *                            focal point of the gradient. The value 0 means
	 *                            the focal point is in the center. The value 1
	 *                            means the focal point is at one border of the
	 *                            gradient circle. The value -1 means that the
	 *                            focal point is at the other border of the
	 *                            gradient circle. Values less than -1 or greater
	 *                            than 1 are rounded to -1 or 1. The following
	 *                            image shows a gradient with a
	 *                            <code>focalPointRatio</code> of -0.75:]]></haxe_doc>
		</lineGradientStyle>
		<lineBitmapStyle public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Matrix"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a bitmap to use for the line stroke when drawing lines.
	 *
	 * <p>The bitmap line style is used for subsequent calls to Graphics methods
	 * such as the <code>lineTo()</code> method or the <code>drawCircle()</code>
	 * method. The line style remains in effect until you call the
	 * <code>lineStyle()</code> or <code>lineGradientStyle()</code> methods, or
	 * the <code>lineBitmapStyle()</code> method again with different parameters.
	 * </p>
	 *
	 * <p>You can call the <code>lineBitmapStyle()</code> method in the middle of
	 * drawing a path to specify different styles for different line segments
	 * within a path. </p>
	 *
	 * <p>Call the <code>lineStyle()</code> method before you call the
	 * <code>lineBitmapStyle()</code> method to enable a stroke, or else the
	 * value of the line style is <code>undefined</code>.</p>
	 *
	 * <p>Calls to the <code>clear()</code> method set the line style back to
	 * <code>undefined</code>. </p>
	 * 
	 * @param bitmap The bitmap to use for the line stroke.
	 * @param matrix An optional transformation matrix as defined by the
	 *               nme.geom.Matrix class. The matrix can be used to scale or
	 *               otherwise manipulate the bitmap before applying it to the
	 *               line style.
	 * @param repeat Whether to repeat the bitmap in a tiled fashion.
	 * @param smooth Whether smoothing should be applied to the bitmap.]]></haxe_doc>
		</lineBitmapStyle>
		<endFill public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Applies a fill to the lines and curves that were added since the last call
	 * to the <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	 * <code>beginBitmapFill()</code> method. Flash uses the fill that was
	 * specified in the previous call to the <code>beginFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	 * method. If the current drawing position does not equal the previous
	 * position specified in a <code>moveTo()</code> method and a fill is
	 * defined, the path is closed with a line and then filled.
	 *]]></haxe_doc>
		</endFill>
		<drawTriangles public="1" set="method">
			<f a="vertices:?indices:?uvtData:?culling">
				<t path="nme.Vector"><c path="Float"/></t>
				<t path="nme.Vector"><c path="Int"/></t>
				<t path="nme.Vector"><c path="Float"/></t>
				<e path="nme.display.TriangleCulling"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Renders a set of triangles, typically to distort bitmaps and give them a
	 * three-dimensional appearance. The <code>drawTriangles()</code> method maps
	 * either the current fill, or a bitmap fill, to the triangle faces using a
	 * set of (u,v) coordinates.
	 *
	 * <p> Any type of fill can be used, but if the fill has a transform matrix
	 * that transform matrix is ignored. </p>
	 *
	 * <p> A <code>uvtData</code> parameter improves texture mapping when a
	 * bitmap fill is used. </p>
	 * 
	 * @param culling Specifies whether to render triangles that face in a
	 *                specified direction. This parameter prevents the rendering
	 *                of triangles that cannot be seen in the current view. This
	 *                parameter can be set to any value defined by the
	 *                TriangleCulling class.]]></haxe_doc>
		</drawTriangles>
		<drawRoundRectComplex public="1" set="method"><f a="x:y:width:height:topLeftRadius:topRightRadius:bottomLeftRadius:bottomRightRadius">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></drawRoundRectComplex>
		<drawRoundRect public="1" set="method">
			<f a="x:y:width:height:ellipseWidth:?ellipseHeight">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a rounded rectangle. Set the line style, fill, or both before you
	 * call the <code>drawRoundRect()</code> method, by calling the
	 * <code>linestyle()</code>, <code>lineGradientStyle()</code>,
	 * <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	 * <code>beginBitmapFill()</code> method.
	 * 
	 * @param x             A number indicating the horizontal position relative
	 *                      to the registration point of the parent display
	 *                      object (in pixels).
	 * @param y             A number indicating the vertical position relative to
	 *                      the registration point of the parent display object
	 *                      (in pixels).
	 * @param width         The width of the round rectangle (in pixels).
	 * @param height        The height of the round rectangle (in pixels).
	 * @param ellipseWidth  The width of the ellipse used to draw the rounded
	 *                      corners (in pixels).
	 * @param ellipseHeight The height of the ellipse used to draw the rounded
	 *                      corners (in pixels). Optional; if no value is
	 *                      specified, the default value matches that provided
	 *                      for the <code>ellipseWidth</code> parameter.
	 * @throws ArgumentError If the <code>width</code>, <code>height</code>,
	 *                       <code>ellipseWidth</code> or
	 *                       <code>ellipseHeight</code> parameters are not a
	 *                       number (<code>Number.NaN</code>).]]></haxe_doc>
		</drawRoundRect>
		<drawRect public="1" set="method">
			<f a="x:y:width:height">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a rectangle. Set the line style, fill, or both before you call the
	 * <code>drawRect()</code> method, by calling the <code>linestyle()</code>,
	 * <code>lineGradientStyle()</code>, <code>beginFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	 * method.
	 * 
	 * @param x      A number indicating the horizontal position relative to the
	 *               registration point of the parent display object (in pixels).
	 * @param y      A number indicating the vertical position relative to the
	 *               registration point of the parent display object (in pixels).
	 * @param width  The width of the rectangle (in pixels).
	 * @param height The height of the rectangle (in pixels).
	 * @throws ArgumentError If the <code>width</code> or <code>height</code>
	 *                       parameters are not a number
	 *                       (<code>Number.NaN</code>).]]></haxe_doc>
		</drawRect>
		<drawPath public="1" set="method">
			<f a="commands:data:?winding">
				<t path="nme.Vector"><c path="Int"/></t>
				<t path="nme.Vector"><c path="Float"/></t>
				<e path="nme.display.GraphicsPathWinding"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Submits a series of commands for drawing. The <code>drawPath()</code>
	 * method uses vector arrays to consolidate individual <code>moveTo()</code>,
	 * <code>lineTo()</code>, and <code>curveTo()</code> drawing commands into a
	 * single call. The <code>drawPath()</code> method parameters combine drawing
	 * commands with x- and y-coordinate value pairs and a drawing direction. The
	 * drawing commands are values from the GraphicsPathCommand class. The x- and
	 * y-coordinate value pairs are Numbers in an array where each pair defines a
	 * coordinate location. The drawing direction is a value from the
	 * GraphicsPathWinding class.
	 *
	 * <p> Generally, drawings render faster with <code>drawPath()</code> than
	 * with a series of individual <code>lineTo()</code> and
	 * <code>curveTo()</code> methods. </p>
	 *
	 * <p> The <code>drawPath()</code> method uses a uses a floating computation
	 * so rotation and scaling of shapes is more accurate and gives better
	 * results. However, curves submitted using the <code>drawPath()</code>
	 * method can have small sub-pixel alignment errors when used in conjunction
	 * with the <code>lineTo()</code> and <code>curveTo()</code> methods. </p>
	 *
	 * <p> The <code>drawPath()</code> method also uses slightly different rules
	 * for filling and drawing lines. They are: </p>
	 *
	 * <ul>
	 *   <li>When a fill is applied to rendering a path:
	 * <ul>
	 *   <li>A sub-path of less than 3 points is not rendered. (But note that the
	 * stroke rendering will still occur, consistent with the rules for strokes
	 * below.)</li>
	 *   <li>A sub-path that isn't closed (the end point is not equal to the
	 * begin point) is implicitly closed.</li>
	 * </ul>
	 * </li>
	 *   <li>When a stroke is applied to rendering a path:
	 * <ul>
	 *   <li>The sub-paths can be composed of any number of points.</li>
	 *   <li>The sub-path is never implicitly closed.</li>
	 * </ul>
	 * </li>
	 * </ul>
	 * 
	 * @param winding Specifies the winding rule using a value defined in the
	 *                GraphicsPathWinding class.]]></haxe_doc>
		</drawPath>
		<drawGraphicsData public="1" set="method">
			<f a="graphicsData">
				<t path="nme.Vector"><c path="nme.display.IGraphicsData"/></t>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Submits a series of IGraphicsData instances for drawing. This method
	 * accepts a Vector containing objects including paths, fills, and strokes
	 * that implement the IGraphicsData interface. A Vector of IGraphicsData
	 * instances can refer to a part of a shape, or a complex fully defined set
	 * of data for rendering a complete shape.
	 *
	 * <p> Graphics paths can contain other graphics paths. If the
	 * <code>graphicsData</code> Vector includes a path, that path and all its
	 * sub-paths are rendered during this operation. </p>
	 *]]></haxe_doc>
		</drawGraphicsData>
		<drawEllipse public="1" set="method">
			<f a="x:y:width:height">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws an ellipse. Set the line style, fill, or both before you call the
	 * <code>drawEllipse()</code> method, by calling the
	 * <code>linestyle()</code>, <code>lineGradientStyle()</code>,
	 * <code>beginFill()</code>, <code>beginGradientFill()</code>, or
	 * <code>beginBitmapFill()</code> method.
	 * 
	 * @param x      The <i>x</i> location of the top-left of the bounding-box of
	 *               the ellipse relative to the registration point of the parent
	 *               display object (in pixels).
	 * @param y      The <i>y</i> location of the top left of the bounding-box of
	 *               the ellipse relative to the registration point of the parent
	 *               display object (in pixels).
	 * @param width  The width of the ellipse (in pixels).
	 * @param height The height of the ellipse (in pixels).]]></haxe_doc>
		</drawEllipse>
		<drawCircle public="1" set="method">
			<f a="x:y:radius">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a circle. Set the line style, fill, or both before you call the
	 * <code>drawCircle()</code> method, by calling the <code>linestyle()</code>,
	 * <code>lineGradientStyle()</code>, <code>beginFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginBitmapFill()</code>
	 * method.
	 * 
	 * @param x      The <i>x</i> location of the center of the circle relative
	 *               to the registration point of the parent display object (in
	 *               pixels).
	 * @param y      The <i>y</i> location of the center of the circle relative
	 *               to the registration point of the parent display object (in
	 *               pixels).
	 * @param radius The radius of the circle (in pixels).]]></haxe_doc>
		</drawCircle>
		<curveTo public="1" set="method">
			<f a="controlX:controlY:anchorX:anchorY">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Draws a curve using the current line style from the current drawing
	 * position to (anchorX, anchorY) and using the control point that
	 * (<code>controlX</code>, <code>controlY</code>) specifies. The current
	 * drawing position is then set to (<code>anchorX</code>,
	 * <code>anchorY</code>). If the movie clip in which you are drawing contains
	 * content created with the Flash drawing tools, calls to the
	 * <code>curveTo()</code> method are drawn underneath this content. If you
	 * call the <code>curveTo()</code> method before any calls to the
	 * <code>moveTo()</code> method, the default of the current drawing position
	 * is (0, 0). If any of the parameters are missing, this method fails and the
	 * current drawing position is not changed.
	 *
	 * <p>The curve drawn is a quadratic Bezier curve. Quadratic Bezier curves
	 * consist of two anchor points and one control point. The curve interpolates
	 * the two anchor points and curves toward the control point. </p>
	 * 
	 * @param controlX A number that specifies the horizontal position of the
	 *                 control point relative to the registration point of the
	 *                 parent display object.
	 * @param controlY A number that specifies the vertical position of the
	 *                 control point relative to the registration point of the
	 *                 parent display object.
	 * @param anchorX  A number that specifies the horizontal position of the
	 *                 next anchor point relative to the registration point of
	 *                 the parent display object.
	 * @param anchorY  A number that specifies the vertical position of the next
	 *                 anchor point relative to the registration point of the
	 *                 parent display object.]]></haxe_doc>
		</curveTo>
		<clear public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Clears the graphics that were drawn to this Graphics object, and resets
	 * fill and line style settings.
	 *</haxe_doc>
		</clear>
		<beginGradientFill public="1" set="method">
			<f a="type:colors:alphas:ratios:?matrix:?spreadMethod:?interpolationMethod:?focalPointRatio">
				<e path="nme.display.GradientType"/>
				<c path="Array"><c path="Int"/></c>
				<c path="Array"><d/></c>
				<c path="Array"><d/></c>
				<c path="nme.geom.Matrix"/>
				<e path="nme.display.SpreadMethod"/>
				<e path="nme.display.InterpolationMethod"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a gradient fill used by subsequent calls to other Graphics
	 * methods (such as <code>lineTo()</code> or <code>drawCircle()</code>) for
	 * the object. The fill remains in effect until you call the
	 * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	 * method. Calling the <code>clear()</code> method clears the fill.
	 *
	 * <p>The application renders the fill whenever three or more points are
	 * drawn, or when the <code>endFill()</code> method is called. </p>
	 * 
	 * @param type                A value from the GradientType class that
	 *                            specifies which gradient type to use:
	 *                            <code>GradientType.LINEAR</code> or
	 *                            <code>GradientType.RADIAL</code>.
	 * @param matrix              A transformation matrix as defined by the
	 *                            nme.geom.Matrix class. The nme.geom.Matrix
	 *                            class includes a
	 *                            <code>createGradientBox()</code> method, which
	 *                            lets you conveniently set up the matrix for use
	 *                            with the <code>beginGradientFill()</code>
	 *                            method.
	 * @param spreadMethod        A value from the SpreadMethod class that
	 *                            specifies which spread method to use, either:
	 *                            <code>SpreadMethod.PAD</code>,
	 *                            <code>SpreadMethod.REFLECT</code>, or
	 *                            <code>SpreadMethod.REPEAT</code>.
	 *
	 *                            <p>For example, consider a simple linear
	 *                            gradient between two colors:</p>
	 *
	 *                            <p>This example uses
	 *                            <code>SpreadMethod.PAD</code> for the spread
	 *                            method, and the gradient fill looks like the
	 *                            following:</p>
	 *
	 *                            <p>If you use <code>SpreadMethod.REFLECT</code>
	 *                            for the spread method, the gradient fill looks
	 *                            like the following:</p>
	 *
	 *                            <p>If you use <code>SpreadMethod.REPEAT</code>
	 *                            for the spread method, the gradient fill looks
	 *                            like the following:</p>
	 * @param interpolationMethod A value from the InterpolationMethod class that
	 *                            specifies which value to use:
	 *                            <code>InterpolationMethod.LINEAR_RGB</code> or
	 *                            <code>InterpolationMethod.RGB</code>
	 *
	 *                            <p>For example, consider a simple linear
	 *                            gradient between two colors (with the
	 *                            <code>spreadMethod</code> parameter set to
	 *                            <code>SpreadMethod.REFLECT</code>). The
	 *                            different interpolation methods affect the
	 *                            appearance as follows: </p>
	 * @param focalPointRatio     A number that controls the location of the
	 *                            focal point of the gradient. 0 means that the
	 *                            focal point is in the center. 1 means that the
	 *                            focal point is at one border of the gradient
	 *                            circle. -1 means that the focal point is at the
	 *                            other border of the gradient circle. A value
	 *                            less than -1 or greater than 1 is rounded to -1
	 *                            or 1. For example, the following example shows
	 *                            a <code>focalPointRatio</code> set to 0.75:
	 * @throws ArgumentError If the <code>type</code> parameter is not valid.]]></haxe_doc>
		</beginGradientFill>
		<beginFill public="1" set="method">
			<f a="color:?alpha">
				<c path="Int"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Specifies a simple one-color fill that subsequent calls to other Graphics
	 * methods (such as <code>lineTo()</code> or <code>drawCircle()</code>) use
	 * when drawing. The fill remains in effect until you call the
	 * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	 * method. Calling the <code>clear()</code> method clears the fill.
	 *
	 * <p>The application renders the fill whenever three or more points are
	 * drawn, or when the <code>endFill()</code> method is called.</p>
	 * 
	 * @param color The color of the fill (0xRRGGBB).
	 * @param alpha The alpha value of the fill (0.0 to 1.0).]]></haxe_doc>
		</beginFill>
		<beginBitmapFill public="1" set="method">
			<f a="bitmap:?matrix:?repeat:?smooth">
				<c path="nme.display.BitmapData"/>
				<c path="nme.geom.Matrix"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Fills a drawing area with a bitmap image. The bitmap can be repeated or
	 * tiled to fill the area. The fill remains in effect until you call the
	 * <code>beginFill()</code>, <code>beginBitmapFill()</code>,
	 * <code>beginGradientFill()</code>, or <code>beginShaderFill()</code>
	 * method. Calling the <code>clear()</code> method clears the fill.
	 *
	 * <p>The application renders the fill whenever three or more points are
	 * drawn, or when the <code>endFill()</code> method is called. </p>
	 * 
	 * @param bitmap A transparent or opaque bitmap image that contains the bits
	 *               to be displayed.
	 * @param matrix A matrix object (of the nme.geom.Matrix class), which you
	 *               can use to define transformations on the bitmap. For
	 *               example, you can use the following matrix to rotate a bitmap
	 *               by 45 degrees (pi/4 radians):
	 * @param repeat If <code>true</code>, the bitmap image repeats in a tiled
	 *               pattern. If <code>false</code>, the bitmap image does not
	 *               repeat, and the edges of the bitmap are used for any fill
	 *               area that extends beyond the bitmap.
	 *
	 *               <p>For example, consider the following bitmap (a 20 x
	 *               20-pixel checkerboard pattern):</p>
	 *
	 *               <p>When <code>repeat</code> is set to <code>true</code> (as
	 *               in the following example), the bitmap fill repeats the
	 *               bitmap:</p>
	 *
	 *               <p>When <code>repeat</code> is set to <code>false</code>,
	 *               the bitmap fill uses the edge pixels for the fill area
	 *               outside the bitmap:</p>
	 * @param smooth If <code>false</code>, upscaled bitmap images are rendered
	 *               by using a nearest-neighbor algorithm and look pixelated. If
	 *               <code>true</code>, upscaled bitmap images are rendered by
	 *               using a bilinear algorithm. Rendering by using the nearest
	 *               neighbor algorithm is faster.]]></haxe_doc>
		</beginBitmapFill>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc><![CDATA[* The Graphics class contains a set of methods that you can use to create a
 * vector shape. Display objects that support drawing include Sprite and Shape
 * objects. Each of these classes includes a <code>graphics</code> property
 * that is a Graphics object. The following are among those helper functions
 * provided for ease of use: <code>drawRect()</code>,
 * <code>drawRoundRect()</code>, <code>drawCircle()</code>, and
 * <code>drawEllipse()</code>.
 *
 * <p>You cannot create a Graphics object directly from ActionScript code. If
 * you call <code>new Graphics()</code>, an exception is thrown.</p>
 *
 * <p>The Graphics class is final; it cannot be subclassed.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.display.IGraphicsData" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/IGraphicsData.hx" extern="1" interface="1"/>
	<class path="nme.display.GraphicsEndFill" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/GraphicsEndFill.hx" extern="1">
		<implements path="nme.display.IGraphicsData"/>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Creates an object to use with the <code>Graphics.drawGraphicsData()</code>
	 * method to end the fill, explicitly.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* Indicates the end of a graphics fill. Use a GraphicsEndFill object with the
 * <code>Graphics.drawGraphicsData()</code> method.
 *
 * <p> Drawing a GraphicsEndFill object is the equivalent of calling the
 * <code>Graphics.endFill()</code> method. </p>]]></haxe_doc>
	</class>
	<class path="nme.display.GraphicsPath" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/GraphicsPath.hx" extern="1">
		<implements path="nme.display.IGraphicsData"/>
		<wideMoveTo public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adds a new "wideMoveTo" command to the <code>commands</code> vector and
	 * new coordinates to the <code>data</code> vector.
	 * 
	 * @param x The x-coordinate of the destination point.
	 * @param y The y-coordinate of the destination point.]]></haxe_doc>
		</wideMoveTo>
		<wideLineTo public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adds a new "wideLineTo" command to the <code>commands</code> vector and
	 * new coordinates to the <code>data</code> vector.
	 * 
	 * @param x The x-coordinate of the destination point for the line.
	 * @param y The y-coordinate of the destination point for the line.]]></haxe_doc>
		</wideLineTo>
		<moveTo public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adds a new "moveTo" command to the <code>commands</code> vector and new
	 * coordinates to the <code>data</code> vector.
	 * 
	 * @param x The x coordinate of the destination point.
	 * @param y The y coordinate of the destination point.]]></haxe_doc>
		</moveTo>
		<lineTo public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adds a new "lineTo" command to the <code>commands</code> vector and new
	 * coordinates to the <code>data</code> vector.
	 * 
	 * @param x The x coordinate of the destination point for the line.
	 * @param y The y coordinate of the destination point for the line.]]></haxe_doc>
		</lineTo>
		<curveTo public="1" set="method">
			<f a="controlX:controlY:anchorX:anchorY">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adds a new "curveTo" command to the <code>commands</code> vector and new
	 * coordinates to the <code>data</code> vector.
	 * 
	 * @param controlX A number that specifies the horizontal position of the
	 *                 control point relative to the registration point of the
	 *                 parent display object.
	 * @param controlY A number that specifies the vertical position of the
	 *                 control point relative to the registration point of the
	 *                 parent display object.
	 * @param anchorX  A number that specifies the horizontal position of the
	 *                 next anchor point relative to the registration point of
	 *                 the parent display object.
	 * @param anchorY  A number that specifies the vertical position of the next
	 *                 anchor point relative to the registration point of the
	 *                 parent display object.]]></haxe_doc>
		</curveTo>
		<cubicCurveTo public="1">
			<f a="controlX1:controlY1:controlX2:controlY2:anchorX:anchorY">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</cubicCurveTo>
		<winding public="1">
			<e path="nme.display.GraphicsPathWinding"/>
			<haxe_doc>* Specifies the winding rule using a value defined in the
	 * GraphicsPathWinding class.</haxe_doc>
		</winding>
		<data public="1">
			<t path="nme.Vector"><c path="Float"/></t>
			<haxe_doc>* The Vector of Numbers containing the parameters used with the drawing
	 * commands.</haxe_doc>
		</data>
		<commands public="1">
			<t path="nme.Vector"><c path="Int"/></t>
			<haxe_doc>* The Vector of drawing commands as integers representing the path. Each
	 * command can be one of the values defined by the GraphicsPathCommand class.</haxe_doc>
		</commands>
		<new public="1" set="method">
			<f a="?commands:?data:?winding">
				<t path="nme.Vector"><c path="Int"/></t>
				<t path="nme.Vector"><c path="Float"/></t>
				<e path="nme.display.GraphicsPathWinding"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a new GraphicsPath object.
	 * 
	 * @param winding Specifies the winding rule using a value defined in the
	 *                GraphicsPathWinding class.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A collection of drawing commands and the coordinate parameters for those
 * commands.
 *
 * <p> Use a GraphicsPath object with the
 * <code>Graphics.drawGraphicsData()</code> method. Drawing a GraphicsPath
 * object is the equivalent of calling the <code>Graphics.drawPath()</code>
 * method. </p>
 *
 * <p>The GraphicsPath class also has its own set of methods
 * (<code>curveTo()</code>, <code>lineTo()</code>, <code>moveTo()</code>
 * <code>wideLineTo()</code> and <code>wideMoveTo()</code>) similar to those
 * in the Graphics class for making adjustments to the
 * <code>GraphicsPath.commands</code> and <code>GraphicsPath.data</code>
 * vector arrays.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="nme.display.GraphicsPathWinding" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/GraphicsPathWinding.hx">
		<NON_ZERO/>
		<EVEN_ODD/>
		<haxe_doc><![CDATA[* The GraphicsPathWinding class provides values for the
 * <code>nme.display.GraphicsPath.winding</code> property and the
 * <code>nme.display.Graphics.drawPath()</code> method to determine the
 * direction to draw a path. A clockwise path is positively wound, and a
 * counter-clockwise path is negatively wound:
 *
 * <p> When paths intersect or overlap, the winding direction determines the
 * rules for filling the areas created by the intersection or overlap:</p>]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.display.GraphicsSolidFill" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/GraphicsSolidFill.hx" extern="1">
		<implements path="nme.display.IGraphicsData"/>
		<color public="1">
			<c path="Int"/>
			<haxe_doc>* The color of the fill. Valid values are in the hexadecimal format
	 * 0xRRGGBB. The default value is 0xFF0000 (or the uint 0).</haxe_doc>
		</color>
		<alpha public="1">
			<c path="Float"/>
			<haxe_doc>* Indicates the alpha transparency value of the fill. Valid values are 0
	 * (fully transparent) to 1 (fully opaque). The default value is 1. Display
	 * objects with alpha set to 0 are active, even though they are invisible.</haxe_doc>
		</alpha>
		<new public="1" set="method">
			<f a="?color:?alpha">
				<c path="Int"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a new GraphicsSolidFill object.
	 * 
	 * @param color The color value. Valid values are in the hexadecimal format
	 *              0xRRGGBB.
	 * @param alpha The alpha transparency value. Valid values are 0 (fully
	 *              transparent) to 1 (fully opaque).</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* Defines a solid fill.
 *
 * <p> Use a GraphicsSolidFill object with the
 * <code>Graphics.drawGraphicsData()</code> method. Drawing a
 * GraphicsSolidFill object is the equivalent of calling the
 * <code>Graphics.beginFill()</code> method. </p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.display.GraphicsStroke" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/GraphicsStroke.hx" extern="1">
		<implements path="nme.display.IGraphicsData"/>
		<thickness public="1">
			<c path="Float"/>
			<haxe_doc>* Indicates the thickness of the line in points; valid values are 0-255. If
	 * a number is not specified, or if the parameter is undefined, a line is not
	 * drawn. If a value of less than 0 is passed, the default is 0. The value 0
	 * indicates hairline thickness; the maximum thickness is 255. If a value
	 * greater than 255 is passed, the default is 255.</haxe_doc>
		</thickness>
		<scaleMode public="1">
			<e path="nme.display.LineScaleMode"/>
			<haxe_doc><![CDATA[* Specifies the stroke thickness scaling. Valid values are:
	 * <ul>
	 *   <li> <code>LineScaleMode.NORMAL</code> - Always scale the line thickness
	 * when the object is scaled (the default). </li>
	 *   <li> <code>LineScaleMode.NONE</code> - Never scale the line thickness.
	 * </li>
	 *   <li> <code>LineScaleMode.VERTICAL</code> - Do not scale the line
	 * thickness if the object is scaled vertically <i>only</i>. For example,
	 * consider the following circles, drawn with a one-pixel line, and each with
	 * the <code>scaleMode</code> parameter set to
	 * <code>LineScaleMode.VERTICAL</code>. The circle on the left is scaled
	 * vertically only, and the circle on the right is scaled both vertically and
	 * horizontally:   </li>
	 *   <li> <code>LineScaleMode.HORIZONTAL</code> - Do not scale the line
	 * thickness if the object is scaled horizontally <i>only</i>. For example,
	 * consider the following circles, drawn with a one-pixel line, and each with
	 * the <code>scaleMode</code> parameter set to
	 * <code>LineScaleMode.HORIZONTAL</code>. The circle on the left is scaled
	 * horizontally only, and the circle on the right is scaled both vertically
	 * and horizontally:   </li>
	 * </ul>]]></haxe_doc>
		</scaleMode>
		<pixelHinting public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether to hint strokes to full pixels. This affects both the
	 * position of anchors of a curve and the line stroke size itself. With
	 * <code>pixelHinting</code> set to <code>true</code>, Flash Player hints
	 * line widths to full pixel widths. With <code>pixelHinting</code> set to
	 * <code>false</code>, disjoints can appear for curves and straight lines.
	 * For example, the following illustrations show how Flash Player renders two
	 * rounded rectangles that are identical, except that the
	 * <code>pixelHinting</code> parameter used in the <code>lineStyle()</code>
	 * method is set differently (the images are scaled by 200%, to emphasize the
	 * difference):]]></haxe_doc>
		</pixelHinting>
		<miterLimit public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Indicates the limit at which a miter is cut off. Valid values range from 1
	 * to 255 (and values outside that range are rounded to 1 or 255). This value
	 * is only used if the <code>jointStyle</code> is set to
	 * <code>"miter"</code>. The <code>miterLimit</code> value represents the
	 * length that a miter can extend beyond the point at which the lines meet to
	 * form a joint. The value expresses a factor of the line
	 * <code>thickness</code>. For example, with a <code>miterLimit</code> factor
	 * of 2.5 and a <code>thickness</code> of 10 pixels, the miter is cut off at
	 * 25 pixels.
	 *
	 * <p>For example, consider the following angled lines, each drawn with a
	 * <code>thickness</code> of 20, but with <code>miterLimit</code> set to 1,
	 * 2, and 4. Superimposed are black reference lines showing the meeting
	 * points of the joints:</p>
	 *
	 * <p>Notice that a given <code>miterLimit</code> value has a specific
	 * maximum angle for which the miter is cut off. The following table lists
	 * some examples:</p>]]></haxe_doc>
		</miterLimit>
		<joints public="1">
			<e path="nme.display.JointStyle"/>
			<haxe_doc><![CDATA[* Specifies the type of joint appearance used at angles. Valid values are:
	 * <code>JointStyle.BEVEL</code>, <code>JointStyle.MITER</code>, and
	 * <code>JointStyle.ROUND</code>. If a value is not indicated, Flash uses
	 * round joints.
	 *
	 * <p>For example, the following illustrations show the different
	 * <code>joints</code> settings. For each setting, the illustration shows an
	 * angled blue line with a thickness of 30 (for which the
	 * <code>jointStyle</code> applies), and a superimposed angled black line
	 * with a thickness of 1 (for which no <code>jointStyle</code> applies): </p>
	 *
	 * <p><b>Note:</b> For <code>joints</code> set to
	 * <code>JointStyle.MITER</code>, you can use the <code>miterLimit</code>
	 * parameter to limit the length of the miter.</p>]]></haxe_doc>
		</joints>
		<caps public="1">
			<e path="nme.display.CapsStyle"/>
			<haxe_doc><![CDATA[* Specifies the type of caps at the end of lines. Valid values are:
	 * <code>CapsStyle.NONE</code>, <code>CapsStyle.ROUND</code>, and
	 * <code>CapsStyle.SQUARE</code>. If a value is not indicated, Flash uses
	 * round caps.
	 *
	 * <p>For example, the following illustrations show the different
	 * <code>capsStyle</code> settings. For each setting, the illustration shows
	 * a blue line with a thickness of 30 (for which the <code>capsStyle</code>
	 * applies), and a superimposed black line with a thickness of 1 (for which
	 * no <code>capsStyle</code> applies): </p>]]></haxe_doc>
		</caps>
		<new public="1" set="method">
			<f a="?thickness:?pixelHinting:?scaleMode:?caps:?joints:?miterLimit">
				<c path="Float"/>
				<e path="Bool"/>
				<e path="nme.display.LineScaleMode"/>
				<e path="nme.display.CapsStyle"/>
				<e path="nme.display.JointStyle"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new GraphicsStroke object.
	 * 
	 * @param pixelHinting A Boolean value that specifies whether to hint strokes
	 *                     to full pixels. This affects both the position of
	 *                     anchors of a curve and the line stroke size itself.
	 *                     With <code>pixelHinting</code> set to
	 *                     <code>true</code>, Flash Player hints line widths to
	 *                     full pixel widths. With <code>pixelHinting</code> set
	 *                     to <code>false</code>, disjoints can appear for curves
	 *                     and straight lines. For example, the following
	 *                     illustrations show how Flash Player renders two
	 *                     rounded rectangles that are identical, except that the
	 *                     <code>pixelHinting</code> parameter used in the
	 *                     <code>lineStyle()</code> method is set differently
	 *                     (the images are scaled by 200%, to emphasize the
	 *                     difference):
	 *
	 *                     <p>If a value is not supplied, the line does not use
	 *                     pixel hinting.</p>
	 * @param scaleMode    A value from the LineScaleMode class that specifies
	 *                     which scale mode to use:
	 *                     <ul>
	 *                       <li> <code>LineScaleMode.NORMAL</code> - Always
	 *                     scale the line thickness when the object is scaled
	 *                     (the default). </li>
	 *                       <li> <code>LineScaleMode.NONE</code> - Never scale
	 *                     the line thickness. </li>
	 *                       <li> <code>LineScaleMode.VERTICAL</code> - Do not
	 *                     scale the line thickness if the object is scaled
	 *                     vertically <i>only</i>. For example, consider the
	 *                     following circles, drawn with a one-pixel line, and
	 *                     each with the <code>scaleMode</code> parameter set to
	 *                     <code>LineScaleMode.VERTICAL</code>. The circle on the
	 *                     left is scaled vertically only, and the circle on the
	 *                     right is scaled both vertically and horizontally:
	 *                     </li>
	 *                       <li> <code>LineScaleMode.HORIZONTAL</code> - Do not
	 *                     scale the line thickness if the object is scaled
	 *                     horizontally <i>only</i>. For example, consider the
	 *                     following circles, drawn with a one-pixel line, and
	 *                     each with the <code>scaleMode</code> parameter set to
	 *                     <code>LineScaleMode.HORIZONTAL</code>. The circle on
	 *                     the left is scaled horizontally only, and the circle
	 *                     on the right is scaled both vertically and
	 *                     horizontally:   </li>
	 *                     </ul>
	 * @param caps         A value from the CapsStyle class that specifies the
	 *                     type of caps at the end of lines. Valid values are:
	 *                     <code>CapsStyle.NONE</code>,
	 *                     <code>CapsStyle.ROUND</code>, and
	 *                     <code>CapsStyle.SQUARE</code>. If a value is not
	 *                     indicated, Flash uses round caps.
	 *
	 *                     <p>For example, the following illustrations show the
	 *                     different <code>capsStyle</code> settings. For each
	 *                     setting, the illustration shows a blue line with a
	 *                     thickness of 30 (for which the <code>capsStyle</code>
	 *                     applies), and a superimposed black line with a
	 *                     thickness of 1 (for which no <code>capsStyle</code>
	 *                     applies): </p>
	 * @param joints       A value from the JointStyle class that specifies the
	 *                     type of joint appearance used at angles. Valid values
	 *                     are: <code>JointStyle.BEVEL</code>,
	 *                     <code>JointStyle.MITER</code>, and
	 *                     <code>JointStyle.ROUND</code>. If a value is not
	 *                     indicated, Flash uses round joints.
	 *
	 *                     <p>For example, the following illustrations show the
	 *                     different <code>joints</code> settings. For each
	 *                     setting, the illustration shows an angled blue line
	 *                     with a thickness of 30 (for which the
	 *                     <code>jointStyle</code> applies), and a superimposed
	 *                     angled black line with a thickness of 1 (for which no
	 *                     <code>jointStyle</code> applies): </p>
	 *
	 *                     <p><b>Note:</b> For <code>joints</code> set to
	 *                     <code>JointStyle.MITER</code>, you can use the
	 *                     <code>miterLimit</code> parameter to limit the length
	 *                     of the miter.</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* Defines a line style or stroke.
 *
 * <p> Use a GraphicsStroke object with the
 * <code>Graphics.drawGraphicsData()</code> method. Drawing a GraphicsStroke
 * object is the equivalent of calling one of the methods of the Graphics
 * class that sets the line style, such as the
 * <code>Graphics.lineStyle()</code> method, the
 * <code>Graphics.lineBitmapStyle()</code> method, or the
 * <code>Graphics.lineGradientStyle()</code> method. </p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<enum path="nme.display.InterpolationMethod" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/InterpolationMethod.hx">
		<RGB><haxe_doc><![CDATA[* Specifies that the RGB interpolation method should be used. This means
	 * that the gradient is rendered with exponential sRGB (standard RGB) space.
	 * The sRGB space is a W3C-endorsed standard that defines a non-linear
	 * conversion between red, green, and blue component values and the actual
	 * intensity of the visible component color.
	 *
	 * <p>For example, consider a simple linear gradient between two colors (with
	 * the <code>spreadMethod</code> parameter set to
	 * <code>SpreadMethod.REFLECT</code>). The different interpolation methods
	 * affect the appearance as follows: </p>]]></haxe_doc></RGB>
		<LINEAR_RGB><haxe_doc><![CDATA[* Specifies that the RGB interpolation method should be used. This means
	 * that the gradient is rendered with exponential sRGB (standard RGB) space.
	 * The sRGB space is a W3C-endorsed standard that defines a non-linear
	 * conversion between red, green, and blue component values and the actual
	 * intensity of the visible component color.
	 *
	 * <p>For example, consider a simple linear gradient between two colors (with
	 * the <code>spreadMethod</code> parameter set to
	 * <code>SpreadMethod.REFLECT</code>). The different interpolation methods
	 * affect the appearance as follows: </p>]]></haxe_doc></LINEAR_RGB>
		<haxe_doc><![CDATA[* The InterpolationMethod class provides values for the
 * <code>interpolationMethod</code> parameter in the
 * <code>Graphics.beginGradientFill()</code> and
 * <code>Graphics.lineGradientStyle()</code> methods. This parameter
 * determines the RGB space to use when rendering the gradient.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.display.JointStyle" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/JointStyle.hx">
		<ROUND><haxe_doc><![CDATA[* Specifies round joints in the <code>joints</code> parameter of the
	 * <code>nme.display.Graphics.lineStyle()</code> method.]]></haxe_doc></ROUND>
		<MITER><haxe_doc><![CDATA[* Specifies mitered joints in the <code>joints</code> parameter of the
	 * <code>nme.display.Graphics.lineStyle()</code> method.]]></haxe_doc></MITER>
		<BEVEL><haxe_doc><![CDATA[* Specifies beveled joints in the <code>joints</code> parameter of the
	 * <code>nme.display.Graphics.lineStyle()</code> method.]]></haxe_doc></BEVEL>
		<haxe_doc><![CDATA[* The JointStyle class is an enumeration of constant values that specify the
 * joint style to use in drawing lines. These constants are provided for use
 * as values in the <code>joints</code> parameter of the
 * <code>nme.display.Graphics.lineStyle()</code> method. The method supports
 * three types of joints: miter, round, and bevel, as the following example
 * shows:]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.display.LineScaleMode" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/LineScaleMode.hx">
		<VERTICAL><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line scales
	 * <i>only</i> horizontally. For example, consider the following circles,
	 * drawn with a one-pixel line, and each with the <code>scaleMode</code>
	 * parameter set to <code>LineScaleMode.HORIZONTAL</code>. The circle on the
	 * left is scaled only horizontally, and the circle on the right is scaled
	 * both vertically and horizontally.]]></haxe_doc></VERTICAL>
		<NORMAL><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line always scales
	 * when the object is scaled (the default).]]></haxe_doc></NORMAL>
		<NONE><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line never scales.]]></haxe_doc></NONE>
		<HORIZONTAL><haxe_doc><![CDATA[* With this setting used as the <code>scaleMode</code> parameter of the
	 * <code>lineStyle()</code> method, the thickness of the line scales
	 * <i>only</i> vertically. For example, consider the following circles, drawn
	 * with a one-pixel line, and each with the <code>scaleMode</code> parameter
	 * set to <code>LineScaleMode.VERTICAL</code>. The circle on the left is
	 * scaled only vertically, and the circle on the right is scaled both
	 * vertically and horizontally.]]></haxe_doc></HORIZONTAL>
		<haxe_doc><![CDATA[* The LineScaleMode class provides values for the <code>scaleMode</code>
 * parameter in the <code>Graphics.lineStyle()</code> method.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.display.Loader" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/Loader.hx" extern="1">
		<extends path="nme.display.DisplayObjectContainer"/>
		<unloadAndStop public="1">
			<f a="?gc">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Attempts to unload child SWF file contents and stops the execution of
	 * commands from loaded SWF files. This method attempts to unload SWF files
	 * that were loaded using <code>Loader.load()</code> or
	 * <code>Loader.loadBytes()</code> by removing references to EventDispatcher,
	 * NetConnection, Timer, Sound, or Video objects of the child SWF file. As a
	 * result, the following occurs for the child SWF file and the child SWF
	 * file's display list:
	 * <ul>
	 *   <li>Sounds are stopped.</li>
	 *   <li>Stage event listeners are removed.</li>
	 *   <li>Event listeners for <code>enterFrame</code>,
	 * <code>frameConstructed</code>, <code>exitFrame</code>,
	 * <code>activate</code> and <code>deactivate</code> are removed.</li>
	 *   <li>Timers are stopped.</li>
	 *   <li>Camera and Microphone instances are detached</li>
	 *   <li>Movie clips are stopped.</li>
	 * </ul>
	 * 
	 * @param gc Provides a hint to the garbage collector to run on the child SWF
	 *           objects (<code>true</code>) or not (<code>false</code>). If you
	 *           are unloading many objects asynchronously, setting the
	 *           <code>gc</code> paramter to <code>false</code> might improve
	 *           application performance. However, if the parameter is set to
	 *           <code>false</code>, media and display objects of the child SWF
	 *           file might persist in memory after running the
	 *           <code>unloadAndStop()</code> command.]]></haxe_doc>
		</unloadAndStop>
		<unload public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Removes a child of this Loader object that was loaded by using the
	 * <code>load()</code> method. The <code>property</code> of the associated
	 * LoaderInfo object is reset to <code>null</code>. The child is not
	 * necessarily destroyed because other objects might have references to it;
	 * however, it is no longer a child of the Loader object.
	 *
	 * <p>As a best practice, before you unload a child SWF file, you should
	 * explicitly close any streams in the child SWF file's objects, such as
	 * LocalConnection, NetConnection, NetStream, and Sound objects. Otherwise,
	 * audio in the child SWF file might continue to play, even though the child
	 * SWF file was unloaded. To close streams in the child SWF file, add an
	 * event listener to the child that listens for the <code>unload</code>
	 * event. When the parent calls <code>Loader.unload()</code>, the
	 * <code>unload</code> event is dispatched to the child. The following code
	 * shows how you might do this:</p>
	 * <pre xml:space="preserve"> function closeAllStreams(evt:Event) {
	 * myNetStream.close(); mySound.close(); myNetConnection.close();
	 * myLocalConnection.close(); }
	 * myMovieClip.loaderInfo.addEventListener(Event.UNLOAD,
	 * closeAllStreams);</pre>
	 *]]></haxe_doc>
		</unload>
		<loadBytes public="1" set="method">
			<f a="bytes">
				<c path="nme.utils.ByteArray"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Loads from binary data stored in a ByteArray object.
	 *
	 * <p>The <code>loadBytes()</code> method is asynchronous. You must wait for
	 * the "init" event before accessing the properties of a loaded object.</p>
	 *
	 * <p>When you use this method, consider the Flash Player security model,
	 * which is described in the Loader class description. </p>
	 * 
	 * @param bytes A ByteArray object. The contents of the ByteArray can be any
	 *              of the file formats supported by the Loader class: SWF, GIF,
	 *              JPEG, or PNG.
	 * @throws ArgumentError         If the <code>length</code> property of the
	 *                               ByteArray object is not greater than 0.
	 * @throws IllegalOperationError If the <code>checkPolicyFile</code> or
	 *                               <code>securityDomain</code> property of the
	 *                               <code>context</code> parameter are non-null.
	 * @throws IllegalOperationError If the <code>requestedContentParent</code>
	 *                               property of the <code>context</code>
	 *                               parameter is a <code>Loader</code>.
	 * @throws IllegalOperationError If the <code>LoaderContext.parameters</code>
	 *                               parameter is set to non-null and has some
	 *                               values which are not Strings.
	 * @throws SecurityError         If the provided
	 *                               <code>applicationDomain</code> property of
	 *                               the <code>context</code> property is from a
	 *                               disallowed domain.
	 * @throws SecurityError         You cannot connect to commonly reserved
	 *                               ports. For a complete list of blocked ports,
	 *                               see "Restricting Networking APIs" in the
	 *                               <i>ActionScript 3.0 Developer's Guide</i>.
	 * @event asyncError    Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and it is not possible to
	 *                      add the loaded content as a child to the specified
	 *                      DisplayObjectContainer. This could happen if the
	 *                      loaded content is a
	 *                      <code>nme.display.AVM1Movie</code> or if the
	 *                      <code>addChild()</code> call to the
	 *                      requestedContentParent throws an error.
	 * @event complete      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the operation is complete. The
	 *                      <code>complete</code> event is always dispatched
	 *                      after the <code>init</code> event.
	 * @event init          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the properties and methods of the loaded
	 *                      data are accessible. The <code>init</code> event
	 *                      always precedes the <code>complete</code> event.
	 * @event ioError       Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the runtime cannot parse the data in the
	 *                      byte array.
	 * @event open          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the operation starts.
	 * @event progress      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object as data is transfered in memory.
	 * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and the security sandbox
	 *                      of the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      does not have access to the loaded SWF.
	 * @event unload        Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when a loaded object is removed.]]></haxe_doc>
		</loadBytes>
		<load public="1" set="method">
			<f a="request">
				<c path="nme.net.URLRequest"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Loads a SWF, JPEG, progressive JPEG, unanimated GIF, or PNG file into an
	 * object that is a child of this Loader object. If you load an animated GIF
	 * file, only the first frame is displayed. As the Loader object can contain
	 * only a single child, issuing a subsequent <code>load()</code> request
	 * terminates the previous request, if still pending, and commences a new
	 * load.
	 *
	 * <p><b>Note</b>: In AIR 1.5 and Flash Player 10, the maximum size for a
	 * loaded image is 8,191 pixels in width or height, and the total number of
	 * pixels cannot exceed 16,777,215 pixels. (So, if an loaded image is 8,191
	 * pixels wide, it can only be 2,048 pixels high.) In Flash Player 9 and
	 * earlier and AIR 1.1 and earlier, the limitation is 2,880 pixels in height
	 * and 2,880 pixels in width.</p>
	 *
	 * <p>A SWF file or image loaded into a Loader object inherits the position,
	 * rotation, and scale properties of the parent display objects of the Loader
	 * object. </p>
	 *
	 * <p>Use the <code>unload()</code> method to remove movies or images loaded
	 * with this method, or to cancel a load operation that is in progress.</p>
	 *
	 * <p>You can prevent a SWF file from using this method by setting the
	 * <code>allowNetworking</code> parameter of the the <code>object</code> and
	 * <code>embed</code> tags in the HTML page that contains the SWF
	 * content.</p>
	 *
	 * <p>When you use this method, consider the Flash Player security model,
	 * which is described in the Loader class description. </p>
	 *
	 * <p> In Flash Player 10 and later, if you use a multipart Content-Type (for
	 * example "multipart/form-data") that contains an upload (indicated by a
	 * "filename" parameter in a "content-disposition" header within the POST
	 * body), the POST operation is subject to the security rules applied to
	 * uploads:</p>
	 *
	 * <ul>
	 *   <li>The POST operation must be performed in response to a user-initiated
	 * action, such as a mouse click or key press.</li>
	 *   <li>If the POST operation is cross-domain (the POST target is not on the
	 * same server as the SWF file that is sending the POST request), the target
	 * server must provide a URL policy file that permits cross-domain
	 * access.</li>
	 * </ul>
	 *
	 * <p>Also, for any multipart Content-Type, the syntax must be valid
	 * (according to the RFC2046 standard). If the syntax appears to be invalid,
	 * the POST operation is subject to the security rules applied to
	 * uploads.</p>
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @param request The absolute or relative URL of the SWF, JPEG, GIF, or PNG
	 *                file to be loaded. A relative path must be relative to the
	 *                main SWF file. Absolute URLs must include the protocol
	 *                reference, such as http:// or file:///. Filenames cannot
	 *                include disk drive specifications.
	 * @throws IOError               The <code>digest</code> property of the
	 *                               <code>request</code> object is not
	 *                               <code>null</code>. You should only set the
	 *                               <code>digest</code> property of a URLRequest
	 *                               object when calling the
	 *                               <code>URLLoader.load()</code> method when
	 *                               loading a SWZ file (an Adobe platform
	 *                               component).
	 * @throws IllegalOperationError If the <code>requestedContentParent</code>
	 *                               property of the <code>context</code>
	 *                               parameter is a <code>Loader</code>.
	 * @throws IllegalOperationError If the <code>LoaderContext.parameters</code>
	 *                               parameter is set to non-null and has some
	 *                               values which are not Strings.
	 * @throws SecurityError         The value of
	 *                               <code>LoaderContext.securityDomain</code>
	 *                               must be either <code>null</code> or
	 *                               <code>SecurityDomain.currentDomain</code>.
	 *                               This reflects the fact that you can only
	 *                               place the loaded media in its natural
	 *                               security sandbox or your own (the latter
	 *                               requires a policy file).
	 * @throws SecurityError         Local SWF files may not set
	 *                               LoaderContext.securityDomain to anything
	 *                               other than <code>null</code>. It is not
	 *                               permitted to import non-local media into a
	 *                               local sandbox, or to place other local media
	 *                               in anything other than its natural sandbox.
	 * @throws SecurityError         You cannot connect to commonly reserved
	 *                               ports. For a complete list of blocked ports,
	 *                               see "Restricting Networking APIs" in the
	 *                               <i>ActionScript 3.0 Developer's Guide</i>.
	 * @throws SecurityError         If the <code>applicationDomain</code> or
	 *                               <code>securityDomain</code> properties of
	 *                               the <code>context</code> parameter are from
	 *                               a disallowed domain.
	 * @throws SecurityError         If a local SWF file is attempting to use the
	 *                               <code>securityDomain</code> property of the
	 *                               <code>context</code> parameter.
	 * @event asyncError    Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and it is not possible to
	 *                      add the loaded content as a child to the specified
	 *                      DisplayObjectContainer. This could happen if the
	 *                      loaded content is a
	 *                      <code>nme.display.AVM1Movie</code> or if the
	 *                      <code>addChild()</code> call to the
	 *                      requestedContentParent throws an error.
	 * @event complete      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the file has completed loading. The
	 *                      <code>complete</code> event is always dispatched
	 *                      after the <code>init</code> event.
	 * @event httpStatus    Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when a network request is made over HTTP and
	 *                      Flash Player can detect the HTTP status code.
	 * @event init          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the properties and methods of the loaded
	 *                      SWF file are accessible. The <code>init</code> event
	 *                      always precedes the <code>complete</code> event.
	 * @event ioError       Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when an input or output error occurs that
	 *                      causes a load operation to fail.
	 * @event open          Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when the loading operation starts.
	 * @event progress      Dispatched by the <code>contentLoaderInfo</code>
	 *                      object as data is received while load operation
	 *                      progresses.
	 * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if a SWF file in the local-with-filesystem
	 *                      sandbox attempts to load content in the
	 *                      local-with-networking sandbox, or vice versa.
	 * @event securityError Dispatched by the <code>contentLoaderInfo</code>
	 *                      object if the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      property has been specified and the security sandbox
	 *                      of the
	 *                      <code>LoaderContext.requestedContentParent</code>
	 *                      does not have access to the loaded SWF.
	 * @event unload        Dispatched by the <code>contentLoaderInfo</code>
	 *                      object when a loaded object is removed.]]></haxe_doc>
		</load>
		<close public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Cancels a <code>load()</code> method operation that is currently in
	 * progress for the Loader instance.
	 *]]></haxe_doc>
		</close>
		<contentLoaderInfo public="1" set="null">
			<c path="nme.display.LoaderInfo"/>
			<haxe_doc><![CDATA[* Returns a LoaderInfo object corresponding to the object being loaded.
	 * LoaderInfo objects are shared between the Loader object and the loaded
	 * content object. The LoaderInfo object supplies loading progress
	 * information and statistics about the loaded file.
	 *
	 * <p>Events related to the load are dispatched by the LoaderInfo object
	 * referenced by the <code>contentLoaderInfo</code> property of the Loader
	 * object. The <code>contentLoaderInfo</code> property is set to a valid
	 * LoaderInfo object, even before the content is loaded, so that you can add
	 * event listeners to the object prior to the load.</p>
	 *
	 * <p>To detect uncaught errors that happen in a loaded SWF, use the
	 * <code>Loader.uncaughtErrorEvents</code> property, not the
	 * <code>Loader.contentLoaderInfo.uncaughtErrorEvents</code> property.</p>]]></haxe_doc>
		</contentLoaderInfo>
		<content public="1" set="null">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc><![CDATA[* Contains the root display object of the SWF file or image (JPG, PNG, or
	 * GIF) file that was loaded by using the <code>load()</code> or
	 * <code>loadBytes()</code> methods.
	 * 
	 * @throws SecurityError The loaded SWF file or image file belongs to a
	 *                       security sandbox to which you do not have access.
	 *                       For a loaded SWF file, you can avoid this situation
	 *                       by having the file call the
	 *                       <code>Security.allowDomain()</code> method or by
	 *                       having the loading file specify a
	 *                       <code>loaderContext</code> parameter with its
	 *                       <code>securityDomain</code> property set to
	 *                       <code>SecurityDomain.currentDomain</code> when you
	 *                       call the <code>load()</code> or
	 *                       <code>loadBytes()</code> method.]]></haxe_doc>
		</content>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Creates a Loader object that you can use to load files, such as SWF, JPEG,
	 * GIF, or PNG files. Call the <code>load()</code> method to load the asset
	 * as a child of the Loader instance. You can then add the Loader object to
	 * the display list (for instance, by using the <code>addChild()</code>
	 * method of a DisplayObjectContainer instance). The asset appears on the
	 * Stage as it loads.
	 *
	 * <p>You can also use a Loader instance "offlist," that is without adding it
	 * to a display object container on the display list. In this mode, the
	 * Loader instance might be used to load a SWF file that contains additional
	 * modules of an application. </p>
	 *
	 * <p>To detect when the SWF file is finished loading, you can use the events
	 * of the LoaderInfo object associated with the
	 * <code>contentLoaderInfo</code> property of the Loader object. At that
	 * point, the code in the module SWF file can be executed to initialize and
	 * start the module. In the offlist mode, a Loader instance might also be
	 * used to load a SWF file that contains components or media assets. Again,
	 * you can use the LoaderInfo object event notifications to detect when the
	 * components are finished loading. At that point, the application can start
	 * using the components and media assets in the library of the SWF file by
	 * instantiating the ActionScript 3.0 classes that represent those components
	 * and assets.</p>
	 *
	 * <p>To determine the status of a Loader object, monitor the following
	 * events that the LoaderInfo object associated with the
	 * <code>contentLoaderInfo</code> property of the Loader object:</p>
	 *
	 * <ul>
	 *   <li>The <code>open</code> event is dispatched when loading begins.</li>
	 *   <li>The <code>ioError</code> or <code>securityError</code> event is
	 * dispatched if the file cannot be loaded or if an error occured during the
	 * load process. </li>
	 *   <li>The <code>progress</code> event fires continuously while the file is
	 * being loaded.</li>
	 *   <li>The <code>complete</code> event is dispatched when a file completes
	 * downloading, but before the loaded movie clip's methods and properties are
	 * available. </li>
	 *   <li>The <code>init</code> event is dispatched after the properties and
	 * methods of the loaded SWF file are accessible, so you can begin
	 * manipulating the loaded SWF file. This event is dispatched before the
	 * <code>complete</code> handler. In streaming SWF files, the
	 * <code>init</code> event can occur significantly earlier than the
	 * <code>complete</code> event. For most purposes, use the <code>init</code>
	 * handler.</li>
	 * </ul>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Loader class is used to load SWF files or image (JPG, PNG, or GIF)
 * files. Use the <code>load()</code> method to initiate loading. The loaded
 * display object is added as a child of the Loader object.
 *
 * <p>Use the URLLoader class to load text or binary data.</p>
 *
 * <p>The Loader class overrides the following methods that it inherits,
 * because a Loader object can only have one child display object - the
 * display object that it loads. Calling the following methods throws an
 * exception: <code>addChild()</code>, <code>addChildAt()</code>,
 * <code>removeChild()</code>, <code>removeChildAt()</code>, and
 * <code>setChildIndex()</code>. To remove a loaded display object, you must
 * remove the <i>Loader</i> object from its parent DisplayObjectContainer
 * child array. </p>
 *
 * <p><b>Note:</b> The ActionScript 2.0 MovieClipLoader and LoadVars classes
 * are not used in ActionScript 3.0. The Loader and URLLoader classes replace
 * them.</p>
 *
 * <p>When you use the Loader class, consider the Flash Player and Adobe AIR
 * security model: </p>
 *
 * <ul>
 *   <li>You can load content from any accessible source. </li>
 *   <li>Loading is not allowed if the calling SWF file is in a network
 * sandbox and the file to be loaded is local. </li>
 *   <li>If the loaded content is a SWF file written with ActionScript 3.0, it
 * cannot be cross-scripted by a SWF file in another security sandbox unless
 * that cross-scripting arrangement was approved through a call to the
 * <code>System.allowDomain()</code> or the
 * <code>System.allowInsecureDomain()</code> method in the loaded content
 * file.</li>
 *   <li>If the loaded content is an AVM1 SWF file (written using ActionScript
 * 1.0 or 2.0), it cannot be cross-scripted by an AVM2 SWF file (written using
 * ActionScript 3.0). However, you can communicate between the two SWF files
 * by using the LocalConnection class.</li>
 *   <li>If the loaded content is an image, its data cannot be accessed by a
 * SWF file outside of the security sandbox, unless the domain of that SWF
 * file was included in a URL policy file at the origin domain of the
 * image.</li>
 *   <li>Movie clips in the local-with-file-system sandbox cannot script movie
 * clips in the local-with-networking sandbox, and the reverse is also
 * prevented. </li>
 *   <li>You cannot connect to commonly reserved ports. For a complete list of
 * blocked ports, see "Restricting Networking APIs" in the <i>ActionScript 3.0
 * Developer's Guide</i>. </li>
 * </ul>
 *
 * <p>However, in AIR, content in the <code>application</code> security
 * sandbox (content installed with the AIR application) are not restricted by
 * these security limitations.</p>
 *
 * <p>For more information related to security, see the Flash Player Developer
 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
 * scope="external">Security</a>.</p>
 *
 * <p>When loading a SWF file from an untrusted source (such as a domain other
 * than that of the Loader object's root SWF file), you may want to define a
 * mask for the Loader object, to prevent the loaded content (which is a child
 * of the Loader object) from drawing to portions of the Stage outside of that
 * mask, as shown in the following code:</p>]]></haxe_doc>
	</class>
	<class path="nme.display.LoaderInfo" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/LoaderInfo.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<getLoaderInfoByDefinition public="1" set="method" static="1">
			<f a="object">
				<d/>
				<c path="nme.display.LoaderInfo"/>
			</f>
			<haxe_doc><![CDATA[* Returns the LoaderInfo object associated with a SWF file defined as an
	 * object.
	 * 
	 * @param object The object for which you want to get an associated
	 *               LoaderInfo object.
	 * @return The associated LoaderInfo object. Returns <code>null</code> when
	 *         called in non-debugger builds (or when debugging is not enabled)
	 *         or if the referenced <code>object</code> does not have an
	 *         associated LoaderInfo object (such as some objects used by the AIR
	 *         runtime).
	 * @throws SecurityError The caller is not running in the local trusted
	 *                       sandbox.]]></haxe_doc>
		</getLoaderInfoByDefinition>
		<width public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* The nominal width of the loaded content. This value might differ from the
	 * actual width at which the content is displayed, since the loaded content
	 * or its parent display objects might be scaled.
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.</haxe_doc>
		</width>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The URL of the media being loaded.
	 *
	 * <p>Before the first <code>progress</code> event is dispatched by this
	 * LoaderInfo object's corresponding Loader object, the value of the
	 * <code>url</code> property might reflect only the initial URL specified in
	 * the call to the <code>load()</code> method of the Loader object. After the
	 * first <code>progress</code> event, the <code>url</code> property reflects
	 * the media's final URL, after any redirects and relative URLs are
	 * resolved.</p>
	 *
	 * <p>In some cases, the value of the <code>url</code> property is truncated;
	 * see the <code>isURLInaccessible</code> property for details.</p>]]></haxe_doc>
		</url>
		<swfVersion public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The file format version of the loaded SWF file. The file format is
	 * specified using the enumerations in the SWFVersion class, such as
	 * <code>SWFVersion.FLASH7</code> and <code>SWFVersion.FLASH9</code>.
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.
	 * @throws Error If the file is not a SWF file.]]></haxe_doc>
		</swfVersion>
		<sharedEvents public="1" set="null">
			<c path="nme.events.EventDispatcher"/>
			<haxe_doc><![CDATA[* An EventDispatcher instance that can be used to exchange events across
	 * security boundaries. Even when the Loader object and the loaded content
	 * originate from security domains that do not trust one another, both can
	 * access <code>sharedEvents</code> and send and receive events via this
	 * object.]]></haxe_doc>
		</sharedEvents>
		<sameDomain public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Expresses the domain relationship between the loader and the content:
	 * <code>true</code> if they have the same origin domain; <code>false</code>
	 * otherwise.
	 * 
	 * @throws Error Thrown if the file is not downloaded sufficiently to
	 *               retrieve the requested information.]]></haxe_doc>
		</sameDomain>
		<parentAllowsChild public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Expresses the trust relationship from Loader (parent) to the content
	 * (child). If the parent has allowed the child access, <code>true</code>;
	 * otherwise, <code>false</code>. This property is set to <code>true</code>
	 * if the parent object called the <code>allowDomain()</code> method to grant
	 * permission to the child domain or if a URL policy file is loaded at the
	 * parent domain granting permission to the child domain. If child and parent
	 * are in the same domain, this property is set to <code>true</code>.
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @throws Error Thrown if the file is not downloaded sufficiently to
	 *               retrieve the requested information.]]></haxe_doc>
		</parentAllowsChild>
		<parameters public="1" set="null">
			<d><c path="String"/></d>
			<haxe_doc><![CDATA[* An object that contains name-value pairs that represent the parameters
	 * provided to the loaded SWF file.
	 *
	 * <p>You can use a <code>for-in</code> loop to extract all the names and
	 * values from the <code>parameters</code> object.</p>
	 *
	 * <p>The two sources of parameters are: the query string in the URL of the
	 * main SWF file, and the value of the <code>FlashVars</code> HTML parameter
	 * (this affects only the main SWF file).</p>
	 *
	 * <p>The <code>parameters</code> property replaces the ActionScript 1.0 and
	 * 2.0 technique of providing SWF file parameters as properties of the main
	 * timeline.</p>
	 *
	 * <p>The value of the <code>parameters</code> property is null for Loader
	 * objects that contain SWF files that use ActionScript 1.0 or 2.0. It is
	 * only non-null for Loader objects that contain SWF files that use
	 * ActionScript 3.0.</p>]]></haxe_doc>
		</parameters>
		<loaderURL public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The URL of the SWF file that initiated the loading of the media described
	 * by this LoaderInfo object. For the instance of the main class of the SWF
	 * file, this URL is the same as the SWF file's own URL.</haxe_doc>
		</loaderURL>
		<loader public="1" set="null">
			<c path="nme.display.Loader"/>
			<haxe_doc><![CDATA[* The Loader object associated with this LoaderInfo object. If this
	 * LoaderInfo object is the <code>loaderInfo</code> property of the instance
	 * of the main class of the SWF file, no Loader object is associated.
	 * 
	 * @throws SecurityError If the object accessing this API is prevented from
	 *                       accessing the Loader object because of security
	 *                       restrictions. This can occur, for instance, when a
	 *                       loaded SWF file attempts to access its
	 *                       <code>loaderInfo.loader</code> property and it is
	 *                       not granted security permission to access the
	 *                       loading SWF file.
	 *
	 *                       <p>For more information related to security, see the
	 *                       Flash Player Developer Center Topic: <a
	 *                       href="http://www.adobe.com/go/devnet_security_en"
	 *                       scope="external">Security</a>.</p>]]></haxe_doc>
		</loader>
		<isURLInaccessible public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Indicates if the <code>LoaderInfo.url</code> property has been truncated.
	 * When the <code>isURLInaccessible</code> value is <code>true</code> the
	 * <code>LoaderInfo.url</code> value is only the domain of the final URL from
	 * which the content loaded. For example, the property is truncated if the
	 * content is loaded from <code>http://www.adobe.com/assets/hello.swf</code>,
	 * and the <code>LoaderInfo.url</code> property has the value
	 * <code>http://www.adobe.com</code>. The <code>isURLInaccessible</code>
	 * value is <code>true</code> only when all of the following are also true:
	 * <ul>
	 *   <li>An HTTP redirect occurred while loading the content.</li>
	 *   <li>The SWF file calling <code>Loader.load()</code> is from a different
	 * domain than the content's final URL.</li>
	 *   <li>The SWF file calling <code>Loader.load()</code> does not have
	 * permission to access the content. Permission is granted to access the
	 * content the same way permission is granted for
	 * <code>BitmapData.draw()</code>: call <code>Security.allowDomain()</code>
	 * to access a SWF file (or for non-SWF file content, establish a policy file
	 * and use the <code>LoaderContext.checkPolicyFile</code> property).</li>
	 * </ul>
	 *
	 * <p><b>Note:</b> The <code>isURLInaccessible</code> property was added for
	 * Flash Player 10.1 and AIR 2.0. However, this property is made available to
	 * SWF files of all versions when the Flash runtime supports it. So, using
	 * some authoring tools in "strict mode" causes a compilation error. To work
	 * around the error use the indirect syntax
	 * <code>myLoaderInfo["isURLInaccessible"]</code>, or disable strict mode. If
	 * you are using Flash Professional CS5 or Flex SDK 4.1, you can use and
	 * compile this API for runtimes released before Flash Player 10.1 and AIR
	 * 2.</p>
	 *
	 * <p>For application content in AIR, the value of this property is always
	 * <code>false</code>.</p>]]></haxe_doc>
		</isURLInaccessible>
		<height public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* The nominal height of the loaded file. This value might differ from the
	 * actual height at which the content is displayed, since the loaded content
	 * or its parent display objects might be scaled.
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.</haxe_doc>
		</height>
		<frameRate public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The nominal frame rate, in frames per second, of the loaded SWF file. This
	 * number is often an integer, but need not be.
	 *
	 * <p>This value may differ from the actual frame rate in use. Flash Player
	 * or Adobe AIR only uses a single frame rate for all loaded SWF files at any
	 * one time, and this frame rate is determined by the nominal frame rate of
	 * the main SWF file. Also, the main frame rate may not be able to be
	 * achieved, depending on hardware, sound synchronization, and other
	 * factors.</p>
	 * 
	 * @throws Error If the file is not downloaded sufficiently to retrieve the
	 *               requested information.
	 * @throws Error If the file is not a SWF file.]]></haxe_doc>
		</frameRate>
		<contentType public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The MIME type of the loaded file. The value is <code>null</code> if not
	 * enough of the file has loaded in order to determine the type. The
	 * following list gives the possible values:
	 * <ul>
	 *   <li><code>"application/x-shockwave-flash"</code></li>
	 *   <li><code>"image/jpeg"</code></li>
	 *   <li><code>"image/gif"</code></li>
	 *   <li><code>"image/png"</code></li>
	 * </ul>]]></haxe_doc>
		</contentType>
		<content public="1" set="null">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc><![CDATA[* The loaded object associated with this LoaderInfo object.
	 * 
	 * @throws SecurityError If the object accessing this API is prevented from
	 *                       accessing the loaded object due to security
	 *                       restrictions. This situation can occur, for
	 *                       instance, when a Loader object attempts to access
	 *                       the <code>contentLoaderInfo.content</code> property
	 *                       and it is not granted security permission to access
	 *                       the loaded content.
	 *
	 *                       <p>For more information related to security, see the
	 *                       Flash Player Developer Center Topic: <a
	 *                       href="http://www.adobe.com/go/devnet_security_en"
	 *                       scope="external">Security</a>.</p>]]></haxe_doc>
		</content>
		<childAllowsParent public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Expresses the trust relationship from content (child) to the Loader
	 * (parent). If the child has allowed the parent access, <code>true</code>;
	 * otherwise, <code>false</code>. This property is set to <code>true</code>
	 * if the child object has called the <code>allowDomain()</code> method to
	 * grant permission to the parent domain or if a URL policy is loaded at the
	 * child domain that grants permission to the parent domain. If child and
	 * parent are in the same domain, this property is set to <code>true</code>.
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @throws Error Thrown if the file is not downloaded sufficiently to
	 *               retrieve the requested information.]]></haxe_doc>
		</childAllowsParent>
		<bytesTotal public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of compressed bytes in the entire media file.
	 *
	 * <p>Before the first <code>progress</code> event is dispatched by this
	 * LoaderInfo object's corresponding Loader object, <code>bytesTotal</code>
	 * is 0. After the first <code>progress</code> event from the Loader object,
	 * <code>bytesTotal</code> reflects the actual number of bytes to be
	 * downloaded.</p>]]></haxe_doc>
		</bytesTotal>
		<bytesLoaded public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of bytes that are loaded for the media. When this number equals
	 * the value of <code>bytesTotal</code>, all of the bytes are loaded.]]></haxe_doc>
		</bytesLoaded>
		<bytes public="1" set="null">
			<c path="nme.utils.ByteArray"/>
			<haxe_doc><![CDATA[* The bytes associated with a LoaderInfo object.
	 * 
	 * @throws SecurityError If the object accessing this API is prevented from
	 *                       accessing the loaded object due to security
	 *                       restrictions. This situation can occur, for
	 *                       instance, when a Loader object attempts to access
	 *                       the <code>contentLoaderInfo.content</code> property
	 *                       and it is not granted security permission to access
	 *                       the loaded content.
	 *
	 *                       <p>For more information related to security, see the
	 *                       Flash Player Developer Center Topic: <a
	 *                       href="http://www.adobe.com/go/devnet_security_en"
	 *                       scope="external">Security</a>.</p>]]></haxe_doc>
		</bytes>
		<haxe_doc><![CDATA[* The LoaderInfo class provides information about a loaded SWF file or a
 * loaded image file (JPEG, GIF, or PNG). LoaderInfo objects are available for
 * any display object. The information provided includes load progress, the
 * URLs of the loader and loaded content, the number of bytes total for the
 * media, and the nominal height and width of the media.
 *
 * <p>You can access LoaderInfo objects in two ways: </p>
 *
 * <ul>
 *   <li>The <code>contentLoaderInfo</code> property of a nme.display.Loader
 * object -  The <code>contentLoaderInfo</code> property is always available
 * for any Loader object. For a Loader object that has not called the
 * <code>load()</code> or <code>loadBytes()</code> method, or that has not
 * sufficiently loaded, attempting to access many of the properties of the
 * <code>contentLoaderInfo</code> property throws an error.</li>
 *   <li>The <code>loaderInfo</code> property of a display object. </li>
 * </ul>
 *
 * <p>The <code>contentLoaderInfo</code> property of a Loader object provides
 * information about the content that the Loader object is loading, whereas
 * the <code>loaderInfo</code> property of a DisplayObject provides
 * information about the root SWF file for that display object. </p>
 *
 * <p>When you use a Loader object to load a display object (such as a SWF
 * file or a bitmap), the <code>loaderInfo</code> property of the display
 * object is the same as the <code>contentLoaderInfo</code> property of the
 * Loader object (<code>DisplayObject.loaderInfo =
 * Loader.contentLoaderInfo</code>). Because the instance of the main class of
 * the SWF file has no Loader object, the <code>loaderInfo</code> property is
 * the only way to access the LoaderInfo for the instance of the main class of
 * the SWF file.</p>
 *
 * <p>The following diagram shows the different uses of the LoaderInfo
 * object - for the instance of the main class of the SWF file, for the
 * <code>contentLoaderInfo</code> property of a Loader object, and for the
 * <code>loaderInfo</code> property of a loaded object:</p>
 *
 * <p>When a loading operation is not complete, some properties of the
 * <code>contentLoaderInfo</code> property of a Loader object are not
 * available. You can obtain some properties, such as
 * <code>bytesLoaded</code>, <code>bytesTotal</code>, <code>url</code>,
 * <code>loaderURL</code>, and <code>applicationDomain</code>. When the
 * <code>loaderInfo</code> object dispatches the <code>init</code> event, you
 * can access all properties of the <code>loaderInfo</code> object and the
 * loaded image or SWF file.</p>
 *
 * <p><b>Note:</b> All properties of LoaderInfo objects are read-only.</p>
 *
 * <p>The <code>EventDispatcher.dispatchEvent()</code> method is not
 * applicable to LoaderInfo objects. If you call <code>dispatchEvent()</code>
 * on a LoaderInfo object, an IllegalOperationError exception is thrown.</p>
 * 
 * @event complete   Dispatched when data has loaded successfully. In other
 *                   words, it is dispatched when all the content has been
 *                   downloaded and the loading has finished. The
 *                   <code>complete</code> event is always dispatched after
 *                   the <code>init</code> event. The <code>init</code> event
 *                   is dispatched when the object is ready to access, though
 *                   the content may still be downloading.
 * @event httpStatus Dispatched when a network request is made over HTTP and
 *                   an HTTP status code can be detected.
 * @event init       Dispatched when the properties and methods of a loaded
 *                   SWF file are accessible and ready for use. The content,
 *                   however, can still be downloading. A LoaderInfo object
 *                   dispatches the <code>init</code> event when the following
 *                   conditions exist:
 *                   <ul>
 *                     <li>All properties and methods associated with the
 *                   loaded object and those associated with the LoaderInfo
 *                   object are accessible.</li>
 *                     <li>The constructors for all child objects have
 *                   completed.</li>
 *                     <li>All ActionScript code in the first frame of the
 *                   loaded SWF's main timeline has been executed.</li>
 *                   </ul>
 *
 *                   <p>For example, an <code>Event.INIT</code> is dispatched
 *                   when the first frame of a movie or animation is loaded.
 *                   The movie is then accessible and can be added to the
 *                   display list. The complete movie, however, can take
 *                   longer to download. The <code>Event.COMPLETE</code> is
 *                   only dispatched once the full movie is loaded.</p>
 *
 *                   <p>The <code>init</code> event always precedes the
 *                   <code>complete</code> event.</p>
 * @event ioError    Dispatched when an input or output error occurs that
 *                   causes a load operation to fail.
 * @event open       Dispatched when a load operation starts.
 * @event progress   Dispatched when data is received as the download
 *                   operation progresses.
 * @event unload     Dispatched by a LoaderInfo object whenever a loaded
 *                   object is removed by using the <code>unload()</code>
 *                   method of the Loader object, or when a second load is
 *                   performed by the same Loader object and the original
 *                   content is removed prior to the load beginning.]]></haxe_doc>
	</class>
	<class path="nme.display.Stage" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/Stage.hx" extern="1">
		<extends path="nme.display.DisplayObjectContainer"/>
		<isFocusInaccessible public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc><![CDATA[* Determines whether the <code>Stage.focus</code> property returns
	 * <code>null</code> for security reasons. In other words,
	 * <code>isFocusInaccessible</code> returns <code>true</code> if the object
	 * that has focus belongs to a security sandbox to which the SWF file does
	 * not have access.
	 * 
	 * @return <code>true</code> if the object that has focus belongs to a
	 *         security sandbox to which the SWF file does not have access.]]></haxe_doc>
		</isFocusInaccessible>
		<invalidate public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Calling the <code>invalidate()</code> method signals Flash runtimes to
	 * alert display objects on the next opportunity it has to render the display
	 * list (for example, when the playhead advances to a new frame). After you
	 * call the <code>invalidate()</code> method, when the display list is next
	 * rendered, the Flash runtime sends a <code>render</code> event to each
	 * display object that has registered to listen for the <code>render</code>
	 * event. You must call the <code>invalidate()</code> method each time you
	 * want the Flash runtime to send <code>render</code> events.
	 *
	 * <p>The <code>render</code> event gives you an opportunity to make changes
	 * to the display list immediately before it is actually rendered. This lets
	 * you defer updates to the display list until the latest opportunity. This
	 * can increase performance by eliminating unnecessary screen updates.</p>
	 *
	 * <p>The <code>render</code> event is dispatched only to display objects
	 * that are in the same security domain as the code that calls the
	 * <code>stage.invalidate()</code> method, or to display objects from a
	 * security domain that has been granted permission via the
	 * <code>Security.allowDomain()</code> method.</p>
	 *]]></haxe_doc>
		</invalidate>
		<wmodeGPU public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Indicates whether GPU compositing is available and in use. The
	 * <code>wmodeGPU</code> value is <code>true</code> <i>only</i> when all
	 * three of the following conditions exist:
	 *
	 * <p>
	 * <ul>
	 *   <li>GPU compositing has been requested.</li>
	 *   <li>GPU compositing is available.</li>
	 *   <li>GPU compositing is in use.</li>
	 * </ul>
	 * </p>
	 *
	 * <p>Specifically, the <code>wmodeGPU</code> property indicates one of the
	 * following:</p>
	 *
	 * <p>
	 * <ol>
	 *   <li>GPU compositing has not been requested or is unavailable. In this
	 * case, the <code>wmodeGPU</code> property value is <code>false</code>.</li>
	 *   <li>GPU compositing has been requested (if applicable and available),
	 * but the environment is operating in "fallback mode" (not optimal
	 * rendering) due to limitations of the content. In this case, the
	 * <code>wmodeGPU</code> property value is <code>true</code>.</li>
	 *   <li>GPU compositing has been requested (if applicable and available),
	 * and the environment is operating in the best mode. In this case, the
	 * <code>wmodeGPU</code> property value is also <code>true</code>.</li>
	 * </ol>
	 * </p>
	 *
	 * <p>In other words, the <code>wmodeGPU</code> property identifies the
	 * capability and state of the rendering environment. For runtimes that do
	 * not support GPU compositing, such as AIR 1.5.2, the value is always
	 * <code>false</code>, because (as stated above) the value is
	 * <code>true</code> only when GPU compositing has been requested, is
	 * available, and is in use.</p>
	 *
	 * <p>The <code>wmodeGPU</code> property is useful to determine, at runtime,
	 * whether or not GPU compositing is in use. The value of
	 * <code>wmodeGPU</code> indicates if your content is going to be scaled by
	 * hardware, or not, so you can present graphics at the correct size. You can
	 * also determine if you're rendering in a fast path or not, so that you can
	 * adjust your content complexity accordingly.</p>
	 *
	 * <p>For Flash Player in a browser, GPU compositing can be requested by the
	 * value of <code>gpu</code> for the <code>wmode</code> HTML parameter in the
	 * page hosting the SWF file. For other configurations, GPU compositing can
	 * be requested in the header of a SWF file (set using SWF authoring
	 * tools).</p>
	 *
	 * <p>However, the <code>wmodeGPU</code> property does not identify the
	 * current rendering performance. Even if GPU compositing is "in use" the
	 * rendering process might not be operating in the best mode. To adjust your
	 * content for optimal rendering, use a Flash runtime debugger version, and
	 * set the <code>DisplayGPUBlendsetting</code> in your mm.cfg file.</p>
	 *
	 * <p><b>Note:</b> This property is always <code>false</code> when referenced
	 * from ActionScript that runs before the runtime performs its first
	 * rendering pass. For example, if you examine <code>wmodeGPU</code> from a
	 * script in Frame 1 of Adobe Flash Professional, and your SWF file is the
	 * first SWF file loaded in a new instance of the runtime, then the
	 * <code>wmodeGPU</code> value is <code>false</code>. To get an accurate
	 * value, wait until at least one rendering pass has occurred. If you write
	 * an event listener for the <code>exitFrame</code> event of any
	 * <code>DisplayObject</code>, the <code>wmodeGPU</code> value at is the
	 * correct value.</p>]]></haxe_doc>
		</wmodeGPU>
		<stageWidth public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Specifies the current width, in pixels, of the Stage.
	 *
	 * <p>If the value of the <code>Stage.scaleMode</code> property is set to
	 * <code>StageScaleMode.NO_SCALE</code> when the user resizes the window, the
	 * Stage content maintains its defined size while the <code>stageWidth</code>
	 * property changes to reflect the new width size of the screen area occupied
	 * by the SWF file. (In the other scale modes, the <code>stageWidth</code>
	 * property always reflects the original width of the SWF file.) You can add
	 * an event listener for the <code>resize</code> event and then use the
	 * <code>stageWidth</code> property of the Stage class to determine the
	 * actual pixel dimension of the resized Flash runtime window. The event
	 * listener allows you to control how the screen content adjusts when the
	 * user resizes the window.</p>
	 *
	 * <p>Air for TV devices have slightly different behavior than desktop
	 * devices when you set the <code>stageWidth</code> property. If the
	 * <code>Stage.scaleMode</code> property is set to
	 * <code>StageScaleMode.NO_SCALE</code> and you set the
	 * <code>stageWidth</code> property, the stage width does not change until
	 * the next frame of the SWF.</p>
	 *
	 * <p><b>Note:</b> In an HTML page hosting the SWF file, both the
	 * <code>object</code> and <code>embed</code> tags' <code>width</code>
	 * attributes must be set to a percentage (such as <code>100%</code>), not
	 * pixels. If the settings are generated by JavaScript code, the
	 * <code>width</code> parameter of the <code>AC_FL_RunContent() </code>
	 * method must be set to a percentage, too. This percentage is applied to the
	 * <code>stageWidth</code> value.</p>
	 * 
	 * @throws SecurityError Calling the <code>stageWidth</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner (the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</stageWidth>
		<stageHeight public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The current height, in pixels, of the Stage.
	 *
	 * <p>If the value of the <code>Stage.scaleMode</code> property is set to
	 * <code>StageScaleMode.NO_SCALE</code> when the user resizes the window, the
	 * Stage content maintains its size while the <code>stageHeight</code>
	 * property changes to reflect the new height size of the screen area
	 * occupied by the SWF file. (In the other scale modes, the
	 * <code>stageHeight</code> property always reflects the original height of
	 * the SWF file.) You can add an event listener for the <code>resize</code>
	 * event and then use the <code>stageHeight</code> property of the Stage
	 * class to determine the actual pixel dimension of the resized Flash runtime
	 * window. The event listener allows you to control how the screen content
	 * adjusts when the user resizes the window.</p>
	 *
	 * <p>Air for TV devices have slightly different behavior than desktop
	 * devices when you set the <code>stageHeight</code> property. If the
	 * <code>Stage.scaleMode</code> property is set to
	 * <code>StageScaleMode.NO_SCALE</code> and you set the
	 * <code>stageHeight</code> property, the stage height does not change until
	 * the next frame of the SWF.</p>
	 *
	 * <p><b>Note:</b> In an HTML page hosting the SWF file, both the
	 * <code>object</code> and <code>embed</code> tags' <code>height</code>
	 * attributes must be set to a percentage (such as <code>100%</code>), not
	 * pixels. If the settings are generated by JavaScript code, the
	 * <code>height</code> parameter of the <code>AC_FL_RunContent() </code>
	 * method must be set to a percentage, too. This percentage is applied to the
	 * <code>stageHeight</code> value.</p>
	 * 
	 * @throws SecurityError Calling the <code>stageHeight</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner (the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</stageHeight>
		<stageFocusRect public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether or not objects display a glowing border when they have
	 * focus.
	 * 
	 * @throws SecurityError Calling the <code>stageFocusRect</code> property of
	 *                       a Stage object throws an exception for any caller
	 *                       that is not in the same security sandbox as the
	 *                       Stage owner (the main SWF file). To avoid this, the
	 *                       Stage owner can grant permission to the domain of
	 *                       the caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</stageFocusRect>
		<softKeyboardRect public="1">
			<c path="nme.geom.Rectangle"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
			<haxe_doc><![CDATA[* The area of the stage that is currently covered by the software keyboard.
	 *
	 * <p>The area has a size of zero (0,0,0,0) when the soft keyboard is not
	 * visible.</p>
	 *
	 * <p>When the keyboard opens, the <code>softKeyboardRect</code> is set at
	 * the time the softKeyboardActivate event is dispatched. If the keyboard
	 * changes size while open, the runtime updates the
	 * <code>softKeyboardRect</code> property and dispatches an additional
	 * softKeyboardActivate event.</p>
	 *
	 * <p><b>Note:</b> On Android, the area covered by the keyboard is estimated
	 * when the operating system does not provide the information necessary to
	 * determine the exact area. This problem occurs in fullscreen mode and also
	 * when the keyboard opens in response to an InteractiveObject receiving
	 * focus or invoking the <code>requestSoftKeyboard()</code> method.</p>]]></haxe_doc>
		</softKeyboardRect>
		<showDefaultContextMenu public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether to show or hide the default items in the Flash runtime
	 * context menu.
	 *
	 * <p>If the <code>showDefaultContextMenu</code> property is set to
	 * <code>true</code> (the default), all context menu items appear. If the
	 * <code>showDefaultContextMenu</code> property is set to <code>false</code>,
	 * only the Settings and About... menu items appear.</p>
	 * 
	 * @throws SecurityError Calling the <code>showDefaultContextMenu</code>
	 *                       property of a Stage object throws an exception for
	 *                       any caller that is not in the same security sandbox
	 *                       as the Stage owner (the main SWF file). To avoid
	 *                       this, the Stage owner can grant permission to the
	 *                       domain of the caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</showDefaultContextMenu>
		<scaleMode public="1">
			<e path="nme.display.StageScaleMode"/>
			<haxe_doc><![CDATA[* A value from the StageScaleMode class that specifies which scale mode to
	 * use. The following are valid values:
	 * <ul>
	 *   <li><code>StageScaleMode.EXACT_FIT</code> - The entire application is
	 * visible in the specified area without trying to preserve the original
	 * aspect ratio. Distortion can occur, and the application may appear
	 * stretched or compressed. </li>
	 *   <li><code>StageScaleMode.SHOW_ALL</code> - The entire application is
	 * visible in the specified area without distortion while maintaining the
	 * original aspect ratio of the application. Borders can appear on two sides
	 * of the application. </li>
	 *   <li><code>StageScaleMode.NO_BORDER</code> - The entire application fills
	 * the specified area, without distortion but possibly with some cropping,
	 * while maintaining the original aspect ratio of the application. </li>
	 *   <li><code>StageScaleMode.NO_SCALE</code> - The entire application is
	 * fixed, so that it remains unchanged even as the size of the player window
	 * changes. Cropping might occur if the player window is smaller than the
	 * content. </li>
	 * </ul>
	 * 
	 * @throws SecurityError Calling the <code>scaleMode</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner (the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</scaleMode>
		<quality public="1">
			<e path="nme.display.StageQuality"/>
			<haxe_doc><![CDATA[* A value from the StageQuality class that specifies which rendering quality
	 * is used. The following are valid values:
	 * <ul>
	 *   <li><code>StageQuality.LOW</code> - Low rendering quality. Graphics are
	 * not anti-aliased, and bitmaps are not smoothed, but runtimes still use
	 * mip-mapping.</li>
	 *   <li><code>StageQuality.MEDIUM</code> - Medium rendering quality.
	 * Graphics are anti-aliased using a 2 x 2 pixel grid, bitmap smoothing is
	 * dependent on the <code>Bitmap.smoothing</code> setting. Runtimes use
	 * mip-mapping. This setting is suitable for movies that do not contain
	 * text.</li>
	 *   <li><code>StageQuality.HIGH</code> - High rendering quality. Graphics
	 * are anti-aliased using a 4 x 4 pixel grid, and bitmap smoothing is
	 * dependent on the <code>Bitmap.smoothing</code> setting. Runtimes use
	 * mip-mapping. This is the default rendering quality setting that Flash
	 * Player uses.</li>
	 *   <li><code>StageQuality.BEST</code> - Very high rendering quality.
	 * Graphics are anti-aliased using a 4 x 4 pixel grid. If
	 * <code>Bitmap.smoothing</code> is <code>true</code> the runtime uses a high
	 * quality downscale algorithm that produces fewer artifacts (however, using
	 * <code>StageQuality.BEST</code> with <code>Bitmap.smoothing</code> set to
	 * <code>true</code> slows performance significantly and is not a recommended
	 * setting).</li>
	 * </ul>
	 *
	 * <p>Higher quality settings produce better rendering of scaled bitmaps.
	 * However, higher quality settings are computationally more expensive. In
	 * particular, when rendering scaled video, using higher quality settings can
	 * reduce the frame rate. </p>
	 *
	 * <p>In the desktop profile of Adobe AIR, <code>quality</code> can be set to
	 * <code>StageQuality.BEST</code> or <code>StageQuality.HIGH</code> (and the
	 * default value is <code>StageQuality.HIGH</code>). Attempting to set it to
	 * another value has no effect (and the property remains unchanged). In the
	 * moble profile of AIR, all four quality settings are available. The default
	 * value on mobile devices is <code>StageQuality.MEDIUM</code>.</p>
	 *
	 * <p>For content running in Adobe AIR, setting the <code>quality</code>
	 * property of one Stage object changes the rendering quality for all Stage
	 * objects (used by different NativeWindow objects). </p>
	 * <b><i>Note:</i></b> The operating system draws the device fonts, which are
	 * therefore unaffected by the <code>quality</code> property.
	 * 
	 * @throws SecurityError Calling the <code>quality</code> property of a Stage
	 *                       object throws an exception for any caller that is
	 *                       not in the same security sandbox as the Stage owner
	 *                       (the main SWF file). To avoid this, the Stage owner
	 *                       can grant permission to the domain of the caller by
	 *                       calling the <code>Security.allowDomain()</code>
	 *                       method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</quality>
		<fullScreenWidth public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Returns the width of the monitor that will be used when going to full
	 * screen size, if that state is entered immediately. If the user has
	 * multiple monitors, the monitor that's used is the monitor that most of the
	 * stage is on at the time.
	 *
	 * <p><b>Note</b>: If the user has the opportunity to move the browser from
	 * one monitor to another between retrieving the value and going to full
	 * screen size, the value could be incorrect. If you retrieve the value in an
	 * event handler that sets <code>Stage.displayState</code> to
	 * <code>StageDisplayState.FULL_SCREEN</code>, the value will be correct.</p>
	 *
	 * <p>This is the pixel width of the monitor and is the same as the stage
	 * width would be if <code>Stage.align</code> is set to
	 * <code>StageAlign.TOP_LEFT</code> and <code>Stage.scaleMode</code> is set
	 * to <code>StageScaleMode.NO_SCALE</code>.</p>]]></haxe_doc>
		</fullScreenWidth>
		<fullScreenSourceRect public="1">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc><![CDATA[* Sets the Flash runtime to scale a specific region of the stage to
	 * full-screen mode. If available, the Flash runtime scales in hardware,
	 * which uses the graphics and video card on a user's computer, and generally
	 * displays content more quickly than software scaling.
	 *
	 * <p>When this property is set to a valid rectangle and the
	 * <code>displayState</code> property is set to full-screen mode, the Flash
	 * runtime scales the specified area. The actual Stage size in pixels within
	 * ActionScript does not change. The Flash runtime enforces a minimum limit
	 * for the size of the rectangle to accommodate the standard "Press Esc to
	 * exit full-screen mode" message. This limit is usually around 260 by 30
	 * pixels but can vary on platform and Flash runtime version.</p>
	 *
	 * <p>This property can only be set when the Flash runtime is not in
	 * full-screen mode. To use this property correctly, set this property first,
	 * then set the <code>displayState</code> property to full-screen mode, as
	 * shown in the code examples.</p>
	 *
	 * <p>To enable scaling, set the <code>fullScreenSourceRect</code> property
	 * to a rectangle object:</p>
	 *
	 * <p>The end user also can select within Flash Player Display Settings to
	 * turn off hardware scaling, which is enabled by default. For more
	 * information, see <a href="http://www.adobe.com/go/display_settings"
	 * scope="external">www.adobe.com/go/display_settings</a>.</p>]]></haxe_doc>
		</fullScreenSourceRect>
		<fullScreenHeight public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Returns the height of the monitor that will be used when going to full
	 * screen size, if that state is entered immediately. If the user has
	 * multiple monitors, the monitor that's used is the monitor that most of the
	 * stage is on at the time.
	 *
	 * <p><b>Note</b>: If the user has the opportunity to move the browser from
	 * one monitor to another between retrieving the value and going to full
	 * screen size, the value could be incorrect. If you retrieve the value in an
	 * event handler that sets <code>Stage.displayState</code> to
	 * <code>StageDisplayState.FULL_SCREEN</code>, the value will be correct.</p>
	 *
	 * <p>This is the pixel height of the monitor and is the same as the stage
	 * height would be if <code>Stage.align</code> is set to
	 * <code>StageAlign.TOP_LEFT</code> and <code>Stage.scaleMode</code> is set
	 * to <code>StageScaleMode.NO_SCALE</code>.</p>]]></haxe_doc>
		</fullScreenHeight>
		<frameRate public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Gets and sets the frame rate of the stage. The frame rate is defined as
	 * frames per second. By default the rate is set to the frame rate of the
	 * first SWF file loaded. Valid range for the frame rate is from 0.01 to 1000
	 * frames per second.
	 *
	 * <p><b>Note:</b> An application might not be able to follow high frame rate
	 * settings, either because the target platform is not fast enough or the
	 * player is synchronized to the vertical blank timing of the display device
	 * (usually 60 Hz on LCD devices). In some cases, a target platform might
	 * also choose to lower the maximum frame rate if it anticipates high CPU
	 * usage.</p>
	 *
	 * <p>For content running in Adobe AIR, setting the <code>frameRate</code>
	 * property of one Stage object changes the frame rate for all Stage objects
	 * (used by different NativeWindow objects). </p>
	 * 
	 * @throws SecurityError Calling the <code>frameRate</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner (the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.]]></haxe_doc>
		</frameRate>
		<focus public="1">
			<c path="nme.display.InteractiveObject"/>
			<haxe_doc><![CDATA[* The interactive object with keyboard focus; or <code>null</code> if focus
	 * is not set or if the focused object belongs to a security sandbox to which
	 * the calling object does not have access.
	 * 
	 * @throws Error Throws an error if focus cannot be set to the target.]]></haxe_doc>
		</focus>
		<displayState public="1">
			<e path="nme.display.StageDisplayState"/>
			<haxe_doc><![CDATA[* A value from the StageDisplayState class that specifies which display
	 * state to use. The following are valid values:
	 * <ul>
	 *   <li><code>StageDisplayState.FULL_SCREEN</code> Sets AIR application or
	 * Flash runtime to expand the stage over the user's entire screen, with
	 * keyboard input disabled.</li>
	 *   <li><code>StageDisplayState.FULL_SCREEN_INTERACTIVE</code> Sets the AIR
	 * application to expand the stage over the user's entire screen, with
	 * keyboard input allowed. (Not available for content running in Flash
	 * Player.)</li>
	 *   <li><code>StageDisplayState.NORMAL</code> Sets the Flash runtime back to
	 * the standard stage display mode.</li>
	 * </ul>
	 *
	 * <p>The scaling behavior of the movie in full-screen mode is determined by
	 * the <code>scaleMode</code> setting (set using the
	 * <code>Stage.scaleMode</code> property or the SWF file's <code>embed</code>
	 * tag settings in the HTML file). If the <code>scaleMode</code> property is
	 * set to <code>noScale</code> while the application transitions to
	 * full-screen mode, the Stage <code>width</code> and <code>height</code>
	 * properties are updated, and the Stage dispatches a <code>resize</code>
	 * event. If any other scale mode is set, the stage and its contents are
	 * scaled to fill the new screen dimensions. The Stage object retains its
	 * original <code>width</code> and <code>height</code> values and does not
	 * dispatch a <code>resize</code> event.</p>
	 *
	 * <p>The following restrictions apply to SWF files that play within an HTML
	 * page (not those using the stand-alone Flash Player or not running in the
	 * AIR runtime):</p>
	 *
	 * <ul>
	 *   <li>To enable full-screen mode, add the <code>allowFullScreen</code>
	 * parameter to the <code>object</code> and <code>embed</code> tags in the
	 * HTML page that includes the SWF file, with <code>allowFullScreen</code>
	 * set to <code>"true"</code>, as shown in the following example: </li>
	 *   <li>Full-screen mode is initiated in response to a mouse click or key
	 * press by the user; the movie cannot change <code>Stage.displayState</code>
	 * without user input. Flash runtimes restrict keyboard input in full-screen
	 * mode. Acceptable keys include keyboard shortcuts that terminate
	 * full-screen mode and non-printing keys such as arrows, space, Shift, and
	 * Tab keys. Keyboard shortcuts that terminate full-screen mode are: Escape
	 * (Windows, Linux, and Mac), Control+W (Windows), Command+W (Mac), and
	 * Alt+F4.
	 *
	 * <p>A Flash runtime dialog box appears over the movie when users enter
	 * full-screen mode to inform the users they are in full-screen mode and that
	 * they can press the Escape key to end full-screen mode.</p>
	 * </li>
	 *   <li>Starting with Flash Player 9.0.115.0, full-screen works the same in
	 * windowless mode as it does in window mode. If you set the Window Mode
	 * (<code>wmode</code> in the HTML) to Opaque Windowless
	 * (<code>opaque</code>) or Transparent Windowless
	 * (<code>transparent</code>), full-screen can be initiated, but the
	 * full-screen window will always be opaque.</li>
	 * </ul>
	 *
	 * <p>These restrictions are <i>not</i> present for SWF content running in
	 * the stand-alone Flash Player or in AIR. AIR supports an interactive
	 * full-screen mode which allows keyboard input.</p>
	 *
	 * <p>For AIR content running in full-screen mode, the system screen saver
	 * and power saving options are disabled while video content is playing and
	 * until either the video stops or full-screen mode is exited.</p>
	 *
	 * <p>On Linux, setting <code>displayState</code> to
	 * <code>StageDisplayState.FULL_SCREEN</code> or
	 * <code>StageDisplayState.FULL_SCREEN_INTERACTIVE</code> is an asynchronous
	 * operation.</p>
	 * 
	 * @throws SecurityError Calling the <code>displayState</code> property of a
	 *                       Stage object throws an exception for any caller that
	 *                       is not in the same security sandbox as the Stage
	 *                       owner (the main SWF file). To avoid this, the Stage
	 *                       owner can grant permission to the domain of the
	 *                       caller by calling the
	 *                       <code>Security.allowDomain()</code> method or the
	 *                       <code>Security.allowInsecureDomain()</code> method.
	 *                       For more information, see the "Security" chapter in
	 *                       the <i>ActionScript 3.0 Developer's Guide</i>.
	 *                       Trying to set the <code>displayState</code> property
	 *                       while the settings dialog is displayed, without a
	 *                       user response, or if the <code>param</code> or
	 *                       <code>embed</code> HTML tag's
	 *                       <code>allowFullScreen</code> attribute is not set to
	 *                       <code>true</code> throws a security error.]]></haxe_doc>
		</displayState>
		<displayContextInfo public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
			<haxe_doc><![CDATA[* Specifies whether the Flash runtime is running on an operating system that
	 * supports color correction and whether the color profile of the main
	 * (primary) monitor can be read and understood by the Flash runtime. This
	 * property also returns the default state of color correction on the host
	 * system (usually the browser). Currently the return values can be:
	 *
	 * <p>The three possible values are strings with corresponding constants in
	 * the nme.display.ColorCorrectionSupport class:</p>
	 *
	 * <ul>
	 *   <li><code>"unsupported"</code>: Color correction is not available.</li>
	 *   <li><code>"defaultOn"</code>: Always performs color correction.</li>
	 *   <li><code>"defaultOff"</code>: Never performs color correction.</li>
	 * </ul>]]></haxe_doc>
		</displayContextInfo>
		<color public="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
			<haxe_doc></haxe_doc>
		</color>
		<allowsFullScreen public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
			<haxe_doc>* Specifies whether this stage allows the use of the full screen mode</haxe_doc>
		</allowsFullScreen>
		<align public="1">
			<e path="nme.display.StageAlign"/>
			<haxe_doc><![CDATA[* A value from the StageAlign class that specifies the alignment of the
	 * stage in Flash Player or the browser. The following are valid values:
	 *
	 * <p>The <code>align</code> property is only available to an object that is
	 * in the same security sandbox as the Stage owner (the main SWF file). To
	 * avoid this, the Stage owner can grant permission to the domain of the
	 * calling object by calling the <code>Security.allowDomain()</code> method
	 * or the <code>Security.alowInsecureDomain()</code> method. For more
	 * information, see the "Security" chapter in the <i>ActionScript 3.0
	 * Developer's Guide</i>.</p>]]></haxe_doc>
		</align>
		<haxe_doc><![CDATA[* The Stage class represents the main drawing area.
 *
 * <p>For SWF content running in the browser (in Flash<sup>®</sup> Player),
 * the Stage represents the entire area where Flash content is shown. For
 * content running in AIR on desktop operating systems, each NativeWindow
 * object has a corresponding Stage object.</p>
 *
 * <p>The Stage object is not globally accessible. You need to access it
 * through the <code>stage</code> property of a DisplayObject instance.</p>
 *
 * <p>The Stage class has several ancestor classes  -  DisplayObjectContainer,
 * InteractiveObject, DisplayObject, and EventDispatcher  -  from which it
 * inherits properties and methods. Many of these properties and methods are
 * either inapplicable to Stage objects, or require security checks when
 * called on a Stage object. The properties and methods that require security
 * checks are documented as part of the Stage class.</p>
 *
 * <p>In addition, the following inherited properties are inapplicable to
 * Stage objects. If you try to set them, an IllegalOperationError is thrown.
 * These properties may always be read, but since they cannot be set, they
 * will always contain default values.</p>
 *
 * <ul>
 *   <li><code>accessibilityProperties</code></li>
 *   <li><code>alpha</code></li>
 *   <li><code>blendMode</code></li>
 *   <li><code>cacheAsBitmap</code></li>
 *   <li><code>contextMenu</code></li>
 *   <li><code>filters</code></li>
 *   <li><code>focusRect</code></li>
 *   <li><code>loaderInfo</code></li>
 *   <li><code>mask</code></li>
 *   <li><code>mouseEnabled</code></li>
 *   <li><code>name</code></li>
 *   <li><code>opaqueBackground</code></li>
 *   <li><code>rotation</code></li>
 *   <li><code>scale9Grid</code></li>
 *   <li><code>scaleX</code></li>
 *   <li><code>scaleY</code></li>
 *   <li><code>scrollRect</code></li>
 *   <li><code>tabEnabled</code></li>
 *   <li><code>tabIndex</code></li>
 *   <li><code>transform</code></li>
 *   <li><code>visible</code></li>
 *   <li><code>x</code></li>
 *   <li><code>y</code></li>
 * </ul>
 *
 * <p>Some events that you might expect to be a part of the Stage class, such
 * as <code>enterFrame</code>, <code>exitFrame</code>,
 * <code>frameConstructed</code>, and <code>render</code>, cannot be Stage
 * events because a reference to the Stage object cannot be guaranteed to
 * exist in every situation where these events are used. Because these events
 * cannot be dispatched by the Stage object, they are instead dispatched by
 * every DisplayObject instance, which means that you can add an event
 * listener to any DisplayObject instance to listen for these events. These
 * events, which are part of the DisplayObject class, are called broadcast
 * events to differentiate them from events that target a specific
 * DisplayObject instance. Two other broadcast events, <code>activate</code>
 * and <code>deactivate</code>, belong to DisplayObject's superclass,
 * EventDispatcher. The <code>activate</code> and <code>deactivate</code>
 * events behave similarly to the DisplayObject broadcast events, except that
 * these two events are dispatched not only by all DisplayObject instances,
 * but also by all EventDispatcher instances and instances of other
 * EventDispatcher subclasses. For more information on broadcast events, see
 * the DisplayObject class.</p>
 * 
 * @event fullScreen             Dispatched when the Stage object enters, or
 *                               leaves, full-screen mode. A change in
 *                               full-screen mode can be initiated through
 *                               ActionScript, or the user invoking a keyboard
 *                               shortcut, or if the current focus leaves the
 *                               full-screen window.
 * @event mouseLeave             Dispatched by the Stage object when the
 *                               pointer moves out of the stage area. If the
 *                               mouse button is pressed, the event is not
 *                               dispatched.
 * @event orientationChange      Dispatched by the Stage object when the stage
 *                               orientation changes.
 *
 *                               <p>Orientation changes can occur when the
 *                               user rotates the device, opens a slide-out
 *                               keyboard, or when the
 *                               <code>setAspectRatio()</code> is called.</p>
 *
 *                               <p><b>Note:</b> If the
 *                               <code>autoOrients</code> property is
 *                               <code>false</code>, then the stage
 *                               orientation does not change when a device is
 *                               rotated. Thus, StageOrientationEvents are
 *                               only dispatched for device rotation when
 *                               <code>autoOrients</code> is
 *                               <code>true</code>.</p>
 * @event orientationChanging    Dispatched by the Stage object when the stage
 *                               orientation begins changing.
 *
 *                               <p><b>Important:</b> orientationChanging
 *                               events are not dispatched on Android
 *                               devices.</p>
 *
 *                               <p><b>Note:</b> If the
 *                               <code>autoOrients</code> property is
 *                               <code>false</code>, then the stage
 *                               orientation does not change when a device is
 *                               rotated. Thus, StageOrientationEvents are
 *                               only dispatched for device rotation when
 *                               <code>autoOrients</code> is
 *                               <code>true</code>.</p>
 * @event resize                 Dispatched when the <code>scaleMode</code>
 *                               property of the Stage object is set to
 *                               <code>StageScaleMode.NO_SCALE</code> and the
 *                               SWF file is resized.
 * @event stageVideoAvailability Dispatched by the Stage object when the state
 *                               of the stageVideos property changes.]]></haxe_doc>
	</class>
	<class path="nme.display.ManagedStage" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/ManagedStage.hx" extern="1">
		<extends path="nme.display.Stage"/>
		<etUnknown public="1" static="1"><c path="Int"/></etUnknown>
		<etKeyDown public="1" static="1"><c path="Int"/></etKeyDown>
		<etChar public="1" static="1"><c path="Int"/></etChar>
		<etKeyUp public="1" static="1"><c path="Int"/></etKeyUp>
		<etMouseMove public="1" static="1"><c path="Int"/></etMouseMove>
		<etMouseDown public="1" static="1"><c path="Int"/></etMouseDown>
		<etMouseClick public="1" static="1"><c path="Int"/></etMouseClick>
		<etMouseUp public="1" static="1"><c path="Int"/></etMouseUp>
		<etResize public="1" static="1"><c path="Int"/></etResize>
		<etPoll public="1" static="1"><c path="Int"/></etPoll>
		<etQuit public="1" static="1"><c path="Int"/></etQuit>
		<etFocus public="1" static="1"><c path="Int"/></etFocus>
		<etShouldRotate public="1" static="1"><c path="Int"/></etShouldRotate>
		<etDestroyHandler public="1" static="1"><c path="Int"/></etDestroyHandler>
		<etRedraw public="1" static="1"><c path="Int"/></etRedraw>
		<etTouchBegin public="1" static="1"><c path="Int"/></etTouchBegin>
		<etTouchMove public="1" static="1"><c path="Int"/></etTouchMove>
		<etTouchEnd public="1" static="1"><c path="Int"/></etTouchEnd>
		<etTouchTap public="1" static="1"><c path="Int"/></etTouchTap>
		<etChange public="1" static="1"><c path="Int"/></etChange>
		<efLeftDown public="1" static="1"><c path="Int"/></efLeftDown>
		<efShiftDown public="1" static="1"><c path="Int"/></efShiftDown>
		<efCtrlDown public="1" static="1"><c path="Int"/></efCtrlDown>
		<efAltDown public="1" static="1"><c path="Int"/></efAltDown>
		<efCommandDown public="1" static="1"><c path="Int"/></efCommandDown>
		<efMiddleDown public="1" static="1"><c path="Int"/></efMiddleDown>
		<efRightDown public="1" static="1"><c path="Int"/></efRightDown>
		<efLocationRight public="1" static="1"><c path="Int"/></efLocationRight>
		<efPrimaryTouch public="1" static="1"><c path="Int"/></efPrimaryTouch>
		<setNextWake public="1" set="dynamic"><f a="inDelay">
	<c path="Float"/>
	<e path="Void"/>
</f></setNextWake>
		<sendQuit public="1" set="method"><f a=""><e path="Void"/></f></sendQuit>
		<resize public="1" set="method"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></resize>
		<pumpEvent public="1" set="method"><f a="inEvent">
	<d/>
	<e path="Void"/>
</f></pumpEvent>
		<endRender public="1" set="dynamic"><f a=""><e path="Void"/></f></endRender>
		<beginRender public="1" set="dynamic"><f a=""><e path="Void"/></f></beginRender>
		<new public="1" set="method"><f a="inWidth:inHeight">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.display.Sprite" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/Sprite.hx" extern="1">
		<extends path="nme.display.DisplayObjectContainer"/>
		<stopTouchDrag public="1">
			<f a="touchPointID">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Ends the <code>startTouchDrag()</code> method, for use with touch-enabled
	 * devices. A sprite that was made draggable with the
	 * <code>startTouchDrag()</code> method remains draggable until a
	 * <code>stopTouchDrag()</code> method is added, or until another sprite
	 * becomes draggable. Only one sprite is draggable at a time.
	 * 
	 * @param touchPointID The integer assigned to the touch point in the
	 *                     <code>startTouchDrag</code> method.]]></haxe_doc>
		</stopTouchDrag>
		<stopDrag public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Ends the <code>startDrag()</code> method. A sprite that was made draggable
	 * with the <code>startDrag()</code> method remains draggable until a
	 * <code>stopDrag()</code> method is added, or until another sprite becomes
	 * draggable. Only one sprite is draggable at a time.
	 *]]></haxe_doc>
		</stopDrag>
		<startTouchDrag public="1">
			<f a="touchPointID:?lockCenter:?bounds">
				<c path="Int"/>
				<e path="Bool"/>
				<c path="nme.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Lets the user drag the specified sprite on a touch-enabled device. The
	 * sprite remains draggable until explicitly stopped through a call to the
	 * <code>Sprite.stopTouchDrag()</code> method, or until another sprite is
	 * made draggable. Only one sprite is draggable at a time.
	 *
	 * <p>Three-dimensional display objects follow the pointer and
	 * <code>Sprite.startTouchDrag()</code> moves the object within the
	 * three-dimensional plane defined by the display object. Or, if the display
	 * object is a two-dimensional object and the child of a three-dimensional
	 * object, the two-dimensional object moves within the three dimensional
	 * plane defined by the three-dimensional parent object.</p>
	 * 
	 * @param touchPointID An integer to assign to the touch point.
	 * @param lockCenter   Specifies whether the draggable sprite is locked to
	 *                     the center of the pointer position
	 *                     (<code>true</code>), or locked to the point where the
	 *                     user first clicked the sprite (<code>false</code>).
	 * @param bounds       Value relative to the coordinates of the Sprite's
	 *                     parent that specify a constraint rectangle for the
	 *                     Sprite.]]></haxe_doc>
		</startTouchDrag>
		<startDrag public="1" set="method">
			<f a="?lockCenter:?bounds">
				<e path="Bool"/>
				<c path="nme.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Lets the user drag the specified sprite. The sprite remains draggable
	 * until explicitly stopped through a call to the
	 * <code>Sprite.stopDrag()</code> method, or until another sprite is made
	 * draggable. Only one sprite is draggable at a time.
	 *
	 * <p>Three-dimensional display objects follow the pointer and
	 * <code>Sprite.startDrag()</code> moves the object within the
	 * three-dimensional plane defined by the display object. Or, if the display
	 * object is a two-dimensional object and the child of a three-dimensional
	 * object, the two-dimensional object moves within the three dimensional
	 * plane defined by the three-dimensional parent object.</p>
	 * 
	 * @param lockCenter Specifies whether the draggable sprite is locked to the
	 *                   center of the pointer position (<code>true</code>), or
	 *                   locked to the point where the user first clicked the
	 *                   sprite (<code>false</code>).
	 * @param bounds     Value relative to the coordinates of the Sprite's parent
	 *                   that specify a constraint rectangle for the Sprite.]]></haxe_doc>
		</startDrag>
		<useHandCursor public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether the pointing hand (hand cursor)
	 * appears when the pointer rolls over a sprite in which the
	 * <code>buttonMode</code> property is set to <code>true</code>. The default
	 * value of the <code>useHandCursor</code> property is <code>true</code>. If
	 * <code>useHandCursor</code> is set to <code>true</code>, the pointing hand
	 * used for buttons appears when the pointer rolls over a button sprite. If
	 * <code>useHandCursor</code> is <code>false</code>, the arrow pointer is
	 * used instead.
	 *
	 * <p>You can change the <code>useHandCursor</code> property at any time; the
	 * modified sprite immediately takes on the new cursor appearance. </p>
	 *
	 * <p><b>Note:</b> In Flex or Flash Builder, if your sprite has child
	 * sprites, you might want to set the <code>mouseChildren</code> property to
	 * <code>false</code>. For example, if you want a hand cursor to appear over
	 * a Flex <mx:Label> control, set the <code>useHandCursor</code> and
	 * <code>buttonMode</code> properties to <code>true</code>, and the
	 * <code>mouseChildren</code> property to <code>false</code>.</p>]]></haxe_doc>
		</useHandCursor>
		<soundTransform public="1">
			<c path="nme.media.SoundTransform"/>
			<haxe_doc><![CDATA[* Controls sound within this sprite.
	 *
	 * <p><b>Note:</b> This property does not affect HTML content in an
	 * HTMLControl object (in Adobe AIR).</p>]]></haxe_doc>
		</soundTransform>
		<hitArea public="1">
			<c path="nme.display.Sprite"/>
			<haxe_doc><![CDATA[* Designates another sprite to serve as the hit area for a sprite. If the
	 * <code>hitArea</code> property does not exist or the value is
	 * <code>null</code> or <code>undefined</code>, the sprite itself is used as
	 * the hit area. The value of the <code>hitArea</code> property can be a
	 * reference to a Sprite object.
	 *
	 * <p>You can change the <code>hitArea</code> property at any time; the
	 * modified sprite immediately uses the new hit area behavior. The sprite
	 * designated as the hit area does not need to be visible; its graphical
	 * shape, although not visible, is still detected as the hit area.</p>
	 *
	 * <p><b>Note:</b> You must set to <code>false</code> the
	 * <code>mouseEnabled</code> property of the sprite designated as the hit
	 * area. Otherwise, your sprite button might not work because the sprite
	 * designated as the hit area receives the user input events instead of your
	 * sprite button.</p>]]></haxe_doc>
		</hitArea>
		<graphics public="1" set="null">
			<c path="nme.display.Graphics"/>
			<haxe_doc>* Specifies the Graphics object that belongs to this sprite where vector
	 * drawing commands can occur.</haxe_doc>
		</graphics>
		<dropTarget public="1" set="null">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc>* Specifies the display object over which the sprite is being dragged, or on
	 * which the sprite was dropped.</haxe_doc>
		</dropTarget>
		<buttonMode public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies the button mode of this sprite. If <code>true</code>, this
	 * sprite behaves as a button, which means that it triggers the display of
	 * the hand cursor when the pointer passes over the sprite and can receive a
	 * <code>click</code> event if the enter or space keys are pressed when the
	 * sprite has focus. You can suppress the display of the hand cursor by
	 * setting the <code>useHandCursor</code> property to <code>false</code>, in
	 * which case the pointer is displayed.
	 *
	 * <p>Although it is better to use the SimpleButton class to create buttons,
	 * you can use the <code>buttonMode</code> property to give a sprite some
	 * button-like functionality. To include a sprite in the tab order, set the
	 * <code>tabEnabled</code> property (inherited from the InteractiveObject
	 * class and <code>false</code> by default) to <code>true</code>.
	 * Additionally, consider whether you want the children of your sprite to be
	 * user input enabled. Most buttons do not enable user input interactivity
	 * for their child objects because it confuses the event flow. To disable
	 * user input interactivity for all child objects, you must set the
	 * <code>mouseChildren</code> property (inherited from the
	 * DisplayObjectContainer class) to <code>false</code>.</p>
	 *
	 * <p>If you use the <code>buttonMode</code> property with the MovieClip
	 * class (which is a subclass of the Sprite class), your button might have
	 * some added functionality. If you include frames labeled _up, _over, and
	 * _down, Flash Player provides automatic state changes (functionality
	 * similar to that provided in previous versions of ActionScript for movie
	 * clips used as buttons). These automatic state changes are not available
	 * for sprites, which have no timeline, and thus no frames to label. </p>]]></haxe_doc>
		</buttonMode>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Creates a new Sprite instance. After you create the Sprite instance, call
	 * the <code>DisplayObjectContainer.addChild()</code> or
	 * <code>DisplayObjectContainer.addChildAt()</code> method to add the Sprite
	 * to a parent DisplayObjectContainer.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Sprite class is a basic display list building block: a display list
 * node that can display graphics and can also contain children.
 *
 * <p>A Sprite object is similar to a movie clip, but does not have a
 * timeline. Sprite is an appropriate base class for objects that do not
 * require timelines. For example, Sprite would be a logical base class for
 * user interface (UI) components that typically do not use the timeline.</p>
 *
 * <p>The Sprite class is new in ActionScript 3.0. It provides an alternative
 * to the functionality of the MovieClip class, which retains all the
 * functionality of previous ActionScript releases to provide backward
 * compatibility.</p>]]></haxe_doc>
	</class>
	<class path="nme.display.MovieClip" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/MovieClip.hx" extern="1">
		<extends path="nme.display.Sprite"/>
		<stop public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Stops the playhead in the movie clip.
	 *</haxe_doc>
		</stop>
		<prevScene public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Moves the playhead to the previous scene of the MovieClip instance. This
	 * happens after all remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</prevScene>
		<prevFrame public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Sends the playhead to the previous frame and stops it. This happens after
	 * all remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</prevFrame>
		<play public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Moves the playhead in the timeline of the movie clip.
	 *</haxe_doc>
		</play>
		<nextScene public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Moves the playhead to the next scene of the MovieClip instance. This
	 * happens after all remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</nextScene>
		<nextFrame public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Sends the playhead to the next frame and stops it. This happens after all
	 * remaining actions in the frame have finished executing.
	 *</haxe_doc>
		</nextFrame>
		<gotoAndStop public="1" set="method">
			<f a="frame:?scene">
				<d/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Brings the playhead to the specified frame of the movie clip and stops it
	 * there. This happens after all remaining actions in the frame have finished
	 * executing. If you want to specify a scene in addition to a frame, specify
	 * a <code>scene</code> parameter.
	 * 
	 * @param frame A number representing the frame number, or a string
	 *              representing the label of the frame, to which the playhead is
	 *              sent. If you specify a number, it is relative to the scene
	 *              you specify. If you do not specify a scene, the current scene
	 *              determines the global frame number at which to go to and
	 *              stop. If you do specify a scene, the playhead goes to the
	 *              frame number in the specified scene and stops.
	 * @param scene The name of the scene. This parameter is optional.
	 * @throws ArgumentError If the <code>scene</code> or <code>frame</code>
	 *                       specified are not found in this movie clip.]]></haxe_doc>
		</gotoAndStop>
		<gotoAndPlay public="1" set="method">
			<f a="frame:?scene">
				<d/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Starts playing the SWF file at the specified frame. This happens after all
	 * remaining actions in the frame have finished executing. To specify a scene
	 * as well as a frame, specify a value for the <code>scene</code> parameter.
	 * 
	 * @param frame A number representing the frame number, or a string
	 *              representing the label of the frame, to which the playhead is
	 *              sent. If you specify a number, it is relative to the scene
	 *              you specify. If you do not specify a scene, the current scene
	 *              determines the global frame number to play. If you do specify
	 *              a scene, the playhead jumps to the frame number in the
	 *              specified scene.
	 * @param scene The name of the scene to play. This parameter is optional.]]></haxe_doc>
		</gotoAndPlay>
		<addFrameScript public="1" set="method"><f a="?p1:?p2:?p3:?p4:?p5">
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<e path="Void"/>
</f></addFrameScript>
		<trackAsMenu public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether other display objects that are SimpleButton or MovieClip
	 * objects can receive mouse release events or other user input release
	 * events. The <code>trackAsMenu</code> property lets you create menus. You
	 * can set the <code>trackAsMenu</code> property on any SimpleButton or
	 * MovieClip object. The default value of the <code>trackAsMenu</code>
	 * property is <code>false</code>.
	 *
	 * <p>You can change the <code>trackAsMenu</code> property at any time; the
	 * modified movie clip immediately uses the new behavior.</p>]]></haxe_doc>
		</trackAsMenu>
		<totalFrames public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The total number of frames in the MovieClip instance.
	 *
	 * <p>If the movie clip contains multiple frames, the
	 * <code>totalFrames</code> property returns the total number of frames in
	 * <i>all</i> scenes in the movie clip.</p>]]></haxe_doc>
		</totalFrames>
		<isPlaying public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</isPlaying>
		<framesLoaded public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of frames that are loaded from a streaming SWF file. You can
	 * use the <code>framesLoaded</code> property to determine whether the
	 * contents of a specific frame and all the frames before it loaded and are
	 * available locally in the browser. You can also use it to monitor the
	 * downloading of large SWF files. For example, you might want to display a
	 * message to users indicating that the SWF file is loading until a specified
	 * frame in the SWF file finishes loading.
	 *
	 * <p>If the movie clip contains multiple scenes, the
	 * <code>framesLoaded</code> property returns the number of frames loaded for
	 * <i>all</i> scenes in the movie clip.</p>]]></haxe_doc>
		</framesLoaded>
		<enabled public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether a movie clip is enabled. The
	 * default value of <code>enabled</code> is <code>true</code>. If
	 * <code>enabled</code> is set to <code>false</code>, the movie clip's Over,
	 * Down, and Up frames are disabled. The movie clip continues to receive
	 * events (for example, <code>mouseDown</code>, <code>mouseUp</code>,
	 * <code>keyDown</code>, and <code>keyUp</code>).
	 *
	 * <p>The <code>enabled</code> property governs only the button-like
	 * properties of a movie clip. You can change the <code>enabled</code>
	 * property at any time; the modified movie clip is immediately enabled or
	 * disabled. If <code>enabled</code> is set to <code>false</code>, the object
	 * is not included in automatic tab ordering.</p>]]></haxe_doc>
		</enabled>
		<currentLabel public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The current label in which the playhead is located in the timeline of the
	 * MovieClip instance. If the current frame has no label,
	 * <code>currentLabel</code> is set to the name of the previous frame that
	 * includes a label. If the current frame and previous frames do not include
	 * a label, <code>currentLabel</code> returns <code>null</code>.]]></haxe_doc>
		</currentLabel>
		<currentFrameLabel public="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* The label at the current frame in the timeline of the MovieClip instance.
	 * If the current frame has no label, <code>currentLabel</code> is
	 * <code>null</code>.]]></haxe_doc>
		</currentFrameLabel>
		<currentFrame public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* Specifies the number of the frame in which the playhead is located in the
	 * timeline of the MovieClip instance. If the movie clip has multiple scenes,
	 * this value is the frame number in the current scene.</haxe_doc>
		</currentFrame>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Creates a new MovieClip instance. After creating the MovieClip, call the
	 * <code>addChild()</code> or <code>addChildAt()</code> method of a display
	 * object container that is onstage.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The MovieClip class inherits from the following classes: Sprite,
 * DisplayObjectContainer, InteractiveObject, DisplayObject, and
 * EventDispatcher.
 *
 * <p>Unlike the Sprite object, a MovieClip object has a timeline.</p>
 *
 * <p>>In Flash Professional, the methods for the MovieClip class provide the
 * same functionality as actions that target movie clips. Some additional
 * methods do not have equivalent actions in the Actions toolbox in the
 * Actions panel in the Flash authoring tool. </p>
 *
 * <p>Children instances placed on the Stage in Flash Professional cannot be
 * accessed by code from within the constructor of a parent instance since
 * they have not been created at that point in code execution. Before
 * accessing the child, the parent must instead either create the child
 * instance by code or delay access to a callback function that listens for
 * the child to dispatch its <code>Event.ADDED_TO_STAGE</code> event.</p>
 *
 * <p>If you modify any of the following properties of a MovieClip object that
 * contains a motion tween, the playhead is stopped in that MovieClip object:
 * <code>alpha</code>, <code>blendMode</code>, <code>filters</code>,
 * <code>height</code>, <code>opaqueBackground</code>, <code>rotation</code>,
 * <code>scaleX</code>, <code>scaleY</code>, <code>scale9Grid</code>,
 * <code>scrollRect</code>, <code>transform</code>, <code>visible</code>,
 * <code>width</code>, <code>x</code>, or <code>y</code>. However, it does not
 * stop the playhead in any child MovieClip objects of that MovieClip
 * object.</p>
 *
 * <p><b>Note:</b>Flash Lite 4 supports the MovieClip.opaqueBackground
 * property only if FEATURE_BITMAPCACHE is defined. The default configuration
 * of Flash Lite 4 does not define FEATURE_BITMAPCACHE. To enable the
 * MovieClip.opaqueBackground property for a suitable device, define
 * FEATURE_BITMAPCACHE in your project.</p>]]></haxe_doc>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<enum path="nme.display.PixelSnapping" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/PixelSnapping.hx">
		<NEVER><haxe_doc><![CDATA[* A constant value used in the <code>pixelSnapping</code> property of a
	 * Bitmap object to specify that no pixel snapping occurs.]]></haxe_doc></NEVER>
		<AUTO><haxe_doc><![CDATA[* A constant value used in the <code>pixelSnapping</code> property of a
	 * Bitmap object to specify that the bitmap image is snapped to the nearest
	 * pixel if it is drawn with no rotation or skew and it is drawn at a scale
	 * factor of 99.9% to 100.1%. If these conditions are satisfied, the image is
	 * drawn at 100% scale, snapped to the nearest pixel. Internally, this
	 * setting allows the image to be drawn as fast as possible by using the
	 * vector renderer.]]></haxe_doc></AUTO>
		<ALWAYS><haxe_doc><![CDATA[* A constant value used in the <code>pixelSnapping</code> property of a
	 * Bitmap object to specify that the bitmap image is always snapped to the
	 * nearest pixel, independent of any transformation.]]></haxe_doc></ALWAYS>
		<haxe_doc><![CDATA[* The PixelSnapping class is an enumeration of constant values for setting
 * the pixel snapping options by using the <code>pixelSnapping</code> property
 * of a Bitmap object.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.display.Shape" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/Shape.hx" extern="1">
		<extends path="nme.display.DisplayObject"/>
		<graphics public="1" set="null">
			<c path="nme.display.Graphics"/>
			<haxe_doc>* Specifies the Graphics object belonging to this Shape object, where vector
	 * drawing commands can occur.</haxe_doc>
		</graphics>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Creates a new Shape object.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* This class is used to create lightweight shapes using the ActionScript
 * drawing application program interface (API). The Shape class includes a
 * <code>graphics</code> property, which lets you access methods from the
 * Graphics class.
 *
 * <p>The Sprite class also includes a <code>graphics</code>property, and it
 * includes other features not available to the Shape class. For example, a
 * Sprite object is a display object container, whereas a Shape object is not
 * (and cannot contain child display objects). For this reason, Shape objects
 * consume less memory than Sprite objects that contain the same graphics.
 * However, a Sprite object supports user input events, while a Shape object
 * does not.</p>]]></haxe_doc>
	</class>
	<class path="nme.display.SimpleButton" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/SimpleButton.hx" extern="1">
		<extends path="nme.display.InteractiveObject"/>
		<useHandCursor public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that, when set to <code>true</code>, indicates whether the
	 * hand cursor is shown when the pointer rolls over a button. If this
	 * property is set to <code>false</code>, the arrow pointer cursor is
	 * displayed instead. The default is <code>true</code>.
	 *
	 * <p>You can change the <code>useHandCursor</code> property at any time; the
	 * modified button immediately uses the new cursor behavior. </p>]]></haxe_doc>
		</useHandCursor>
		<upState public="1">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc>* Specifies a display object that is used as the visual object for the
	 * button up state  -  the state that the button is in when the pointer is
	 * not positioned over the button.</haxe_doc>
		</upState>
		<trackAsMenu public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether other display objects that are SimpleButton or MovieClip
	 * objects can receive user input release events. The
	 * <code>trackAsMenu</code> property lets you create menus. You can set the
	 * <code>trackAsMenu</code> property on any SimpleButton or MovieClip object.
	 * If the <code>trackAsMenu</code> property does not exist, the default
	 * behavior is <code>false</code>.
	 *
	 * <p>You can change the <code>trackAsMenu</code> property at any time; the
	 * modified button immediately takes on the new behavior. </p>]]></haxe_doc>
		</trackAsMenu>
		<soundTransform public="1">
			<c path="nme.media.SoundTransform"/>
			<haxe_doc>* The SoundTransform object assigned to this button. A SoundTransform object
	 * includes properties for setting volume, panning, left speaker assignment,
	 * and right speaker assignment. This SoundTransform object applies to all
	 * states of the button. This SoundTransform object affects only embedded
	 * sounds.</haxe_doc>
		</soundTransform>
		<overState public="1">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc>* Specifies a display object that is used as the visual object for the
	 * button over state  -  the state that the button is in when the pointer is
	 * positioned over the button.</haxe_doc>
		</overState>
		<hitTestState public="1">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc><![CDATA[* Specifies a display object that is used as the hit testing object for the
	 * button. For a basic button, set the <code>hitTestState</code> property to
	 * the same display object as the <code>overState</code> property. If you do
	 * not set the <code>hitTestState</code> property, the SimpleButton is
	 * inactive  -  it does not respond to user input events.]]></haxe_doc>
		</hitTestState>
		<enabled public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* A Boolean value that specifies whether a button is enabled. When a button
	 * is disabled (the enabled property is set to <code>false</code>), the
	 * button is visible but cannot be clicked. The default value is
	 * <code>true</code>. This property is useful if you want to disable part of
	 * your navigation; for example, you might want to disable a button in the
	 * currently displayed page so that it can't be clicked and the page cannot
	 * be reloaded.
	 *
	 * <p><b>Note:</b> To prevent mouseClicks on a button, set both the
	 * <code>enabled</code> and <code>mouseEnabled</code> properties to
	 * <code>false</code>.</p>]]></haxe_doc>
		</enabled>
		<downState public="1">
			<c path="nme.display.DisplayObject"/>
			<haxe_doc><![CDATA[* Specifies a display object that is used as the visual object for the
	 * button "Down" state  - the state that the button is in when the user
	 * selects the <code>hitTestState</code> object.]]></haxe_doc>
		</downState>
		<new public="1" set="method">
			<f a="?upState:?overState:?downState:?hitTestState">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
				<c path="nme.display.DisplayObject"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a new SimpleButton instance. Any or all of the display objects
	 * that represent the various button states can be set as parameters in the
	 * constructor.
	 * 
	 * @param upState      The initial value for the SimpleButton up state.
	 * @param overState    The initial value for the SimpleButton over state.
	 * @param downState    The initial value for the SimpleButton down state.
	 * @param hitTestState The initial value for the SimpleButton hitTest state.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The SimpleButton class lets you control all instances of button symbols in
 * a SWF file.
 *
 * <p>In Flash Professional, you can give a button an instance name in the
 * Property inspector. SimpleButton instance names are displayed in the Movie
 * Explorer and in the Insert Target Path dialog box in the Actions panel.
 * After you create an instance of a button in Flash Professional, you can use
 * the methods and properties of the SimpleButton class to manipulate buttons
 * with ActionScript.</p>
 *
 * <p>In ActionScript 3.0, you use the <code>new SimpleButton()</code>
 * constructor to create a SimpleButton instance.</p>
 *
 * <p>The SimpleButton class inherits from the InteractiveObject class.</p>]]></haxe_doc>
	</class>
	<enum path="nme.display.SpreadMethod" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/SpreadMethod.hx">
		<REPEAT><haxe_doc><![CDATA[* Specifies that the gradient use the <i>repeat</i> spread method.]]></haxe_doc></REPEAT>
		<REFLECT><haxe_doc><![CDATA[* Specifies that the gradient use the <i>reflect</i> spread method.]]></haxe_doc></REFLECT>
		<PAD><haxe_doc><![CDATA[* Specifies that the gradient use the <i>pad</i> spread method.]]></haxe_doc></PAD>
		<haxe_doc><![CDATA[* The SpreadMethod class provides values for the <code>spreadMethod</code>
 * parameter in the <code>beginGradientFill()</code> and
 * <code>lineGradientStyle()</code> methods of the Graphics class.
 *
 * <p>The following example shows the same gradient fill using various spread
 * methods:</p>]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.display.StageAlign" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/StageAlign.hx">
		<TOP_RIGHT><haxe_doc>* Specifies that the Stage is aligned to the right.</haxe_doc></TOP_RIGHT>
		<TOP_LEFT><haxe_doc>* Specifies that the Stage is aligned on the left.</haxe_doc></TOP_LEFT>
		<TOP><haxe_doc>* Specifies that the Stage is aligned at the top.</haxe_doc></TOP>
		<RIGHT><haxe_doc>* Specifies that the Stage is aligned to the right.</haxe_doc></RIGHT>
		<LEFT><haxe_doc>* Specifies that the Stage is aligned on the left.</haxe_doc></LEFT>
		<BOTTOM_RIGHT><haxe_doc>* Specifies that the Stage is aligned to the right.</haxe_doc></BOTTOM_RIGHT>
		<BOTTOM_LEFT><haxe_doc>* Specifies that the Stage is aligned on the left.</haxe_doc></BOTTOM_LEFT>
		<BOTTOM><haxe_doc>* Specifies that the Stage is aligned at the bottom.</haxe_doc></BOTTOM>
		<haxe_doc><![CDATA[* The StageAlign class provides constant values to use for the
 * <code>Stage.align</code> property.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.display.StageDisplayState" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/StageDisplayState.hx">
		<NORMAL><haxe_doc>* Specifies that the Stage is in normal mode.</haxe_doc></NORMAL>
		<FULL_SCREEN_INTERACTIVE/>
		<FULL_SCREEN/>
		<haxe_doc><![CDATA[* The StageDisplayState class provides values for the
 * <code>Stage.displayState</code> property.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.display.StageQuality" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/StageQuality.hx">
		<MEDIUM><haxe_doc>* Specifies medium rendering quality: graphics are anti-aliased using a 2 x
	 * 2 pixel grid, but bitmaps are not smoothed. This setting is suitable for
	 * movies that do not contain text.</haxe_doc></MEDIUM>
		<LOW><haxe_doc>* Specifies low rendering quality: graphics are not anti-aliased, and
	 * bitmaps are not smoothed.</haxe_doc></LOW>
		<HIGH><haxe_doc>* Specifies high rendering quality: graphics are anti-aliased using a 4 x 4
	 * pixel grid, and bitmaps are smoothed if the movie is static.</haxe_doc></HIGH>
		<BEST><haxe_doc>* Specifies very high rendering quality: graphics are anti-aliased using a 4
	 * x 4 pixel grid and bitmaps are always smoothed.</haxe_doc></BEST>
		<haxe_doc><![CDATA[* The StageQuality class provides values for the <code>Stage.quality</code>
 * property.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.display.StageScaleMode" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/StageScaleMode.hx">
		<SHOW_ALL/>
		<NO_SCALE/>
		<NO_BORDER/>
		<EXACT_FIT/>
		<haxe_doc><![CDATA[* The StageScaleMode class provides values for the
 * <code>Stage.scaleMode</code> property.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.display.Tilesheet" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/Tilesheet.hx" extern="1">
		<TILE_SCALE public="1" static="1"><c path="Int"/></TILE_SCALE>
		<TILE_ROTATION public="1" static="1"><c path="Int"/></TILE_ROTATION>
		<TILE_RGB public="1" static="1"><c path="Int"/></TILE_RGB>
		<TILE_ALPHA public="1" static="1"><c path="Int"/></TILE_ALPHA>
		<TILE_TRANS_2x2 public="1" static="1"><c path="Int"/></TILE_TRANS_2x2>
		<TILE_BLEND_NORMAL public="1" static="1"><c path="Int"/></TILE_BLEND_NORMAL>
		<TILE_BLEND_ADD public="1" static="1"><c path="Int"/></TILE_BLEND_ADD>
		<drawTiles public="1" set="method">
			<f a="graphics:tileData:?smooth:?flags">
				<c path="nme.display.Graphics"/>
				<c path="Array"><c path="Float"/></c>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Fast method to draw a batch of tiles using a Tilesheet
	 * 
	 * The input array accepts the x, y and tile ID for each tile you wish to draw.
	 * For example, an array of [ 0, 0, 0, 10, 10, 1 ] would draw tile 0 to (0, 0) and
	 * tile 1 to (10, 10)
	 * 
	 * You can also set flags for TILE_SCALE, TILE_ROTATION, TILE_RGB and
	 * TILE_ALPHA.
	 * 
	 * Depending on which flags are active, this is the full order of the array:
	 * 
	 * [ x, y, tile ID, scale, rotation, red, green, blue, alpha, x, y ... ]
	 * 
	 * @param	graphics		The nme.display.Graphics object to use for drawing
	 * @param	tileData		An array of all position, ID and optional values for use in drawing
	 * @param	smooth		(Optional) Whether drawn tiles should be smoothed (Default: false)
	 * @param	flags		(Optional) Flags to enable scale, rotation, RGB and/or alpha when drawing (Default: 0)</haxe_doc>
		</drawTiles>
		<addTileRect public="1" set="method"><f a="rectangle:?centerPoint">
	<c path="nme.geom.Rectangle"/>
	<c path="nme.geom.Point"/>
	<e path="Void"/>
</f></addTileRect>
		<new public="1" set="method"><f a="inImage">
	<c path="nme.display.BitmapData"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.display.TriangleCulling" params="" file="/Users/joshua/Development/Haxe/nme/nme/display/TriangleCulling.hx">
		<POSITIVE><haxe_doc>* Specifies culling of all triangles facing away from the current view
	 * point. This is also known as backface culling.</haxe_doc></POSITIVE>
		<NONE><haxe_doc>* Specifies no culling. All triangles in the path are rendered.</haxe_doc></NONE>
		<NEGATIVE><haxe_doc>* Specifies culling of all triangles facing toward the current view point.</haxe_doc></NEGATIVE>
		<haxe_doc><![CDATA[* Defines codes for culling algorithms that determine which triangles not to
 * render when drawing triangle paths.
 *
 * <p> The terms <code>POSITIVE</code> and <code>NEGATIVE</code> refer to the
 * sign of a triangle's normal along the z-axis. The normal is a 3D vector
 * that is perpendicular to the surface of the triangle. </p>
 *
 * <p> A triangle whose vertices 0, 1, and 2 are arranged in a clockwise order
 * has a positive normal value. That is, its normal points in a positive
 * z-axis direction, away from the current view point. When the
 * <code>TriangleCulling.POSITIVE</code> algorithm is used, triangles with
 * positive normals are not rendered. Another term for this is backface
 * culling. </p>
 *
 * <p> A triangle whose vertices are arranged in a counter-clockwise order has
 * a negative normal value. That is, its normal points in a negative z-axis
 * direction, toward the current view point. When the
 * <code>TriangleCulling.NEGATIVE</code> algorithm is used, triangles with
 * negative normals will not be rendered. </p>]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.errors.Error" params="" file="/Users/joshua/Development/Haxe/nme/nme/errors/Error.hx" extern="1">
		<length public="1" static="1"><c path="Int"/></length>
		<getErrorMessage public="1" set="method" static="1"><f a="index">
	<c path="Int"/>
	<c path="String"/>
</f></getErrorMessage>
		<throwError public="1" set="method" static="1"><f a="type:index:?p1:?p2:?p3:?p4:?p5">
	<c path="Class"><d/></c>
	<c path="Int"/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
	<d/>
</f></throwError>
		<getStackTrace public="1" set="method"><f a=""><c path="String"/></f></getStackTrace>
		<name public="1"><d/></name>
		<message public="1"><d/></message>
		<errorID public="1" set="null"><c path="Int"/></errorID>
		<new public="1" set="method"><f a="?message:?id">
	<d/>
	<d/>
	<e path="Void"/>
</f></new>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="nme.errors.ArgumentError" params="" file="/Users/joshua/Development/Haxe/nme/nme/errors/ArgumentError.hx" extern="1">
		<extends path="nme.errors.Error"/>
		<meta><m n=":native"><e>ArgumentError</e></m></meta>
	</class>
	<class path="nme.errors.EOFError" params="" file="/Users/joshua/Development/Haxe/nme/nme/errors/EOFError.hx" extern="1">
		<new public="1" set="method">
			<f a="?message:?id">
				<c path="String"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a new EOFError object.
	 * 
	 * @param message A string associated with the error object.</haxe_doc>
		</new>
		<haxe_doc>* An EOFError exception is thrown when you attempt to read past the end of
 * the available data. For example, an EOFError is thrown when one of the read
 * methods in the IDataInput interface is called and there is insufficient
 * data to satisfy the read request.</haxe_doc>
	</class>
	<class path="nme.errors.IllegalOperationError" params="" file="/Users/joshua/Development/Haxe/nme/nme/errors/IllegalOperationError.hx" extern="1">
		<extends path="nme.errors.Error"/>
		<new public="1" set="method">
			<f a="?message:?id">
				<c path="String"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a new IllegalOperationError object.
	 * 
	 * @param message A string associated with the error object.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The IllegalOperationError exception is thrown when a method is not
 * implemented or the implementation doesn't cover the current usage.
 *
 * <p>Examples of illegal operation error exceptions include:</p>
 *
 * <ul>
 *   <li>A base class, such as DisplayObjectContainer, provides more
 * functionality than a Stage can support (such as masks)</li>
 *   <li>Certain accessibility methods are called when the player is compiled
 * without accessibility support</li>
 *   <li>The mms.cfg setting prohibits a FileReference action</li>
 *   <li>ActionScript tries to run a <code>FileReference.browse()</code> call
 * when a browse dialog box is already open</li>
 *   <li>ActionScript tries to use an unsupported protocol for a FileReference
 * object (such as FTP)</li>
 * <li product="flash">Authoring-only features are invoked from a run-time
 * player</li>
 * <li product="flash">An attempt is made to set the name of a Timeline-placed
 * object</li>
 * </ul>]]></haxe_doc>
	</class>
	<class path="nme.errors.RangeError" params="" file="/Users/joshua/Development/Haxe/nme/nme/errors/RangeError.hx" extern="1">
		<extends path="nme.errors.Error"/>
		<meta><m n=":native"><e>RangeError</e></m></meta>
	</class>
	<class path="nme.errors.SecurityError" params="" file="/Users/joshua/Development/Haxe/nme/nme/errors/SecurityError.hx" extern="1">
		<extends path="nme.errors.Error"/>
		<meta><m n=":native"><e>SecurityError</e></m></meta>
	</class>
	<class path="nme.errors.TypeError" params="" file="/Users/joshua/Development/Haxe/nme/nme/errors/TypeError.hx" extern="1">
		<extends path="nme.errors.Error"/>
		<meta><m n=":native"><e>TypeError</e></m></meta>
	</class>
	<class path="nme.events.Event" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/Event.hx" extern="1">
		<ACTIVATE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>ACTIVATE</code> constant defines the value of the
	 * <code>type</code> property of an <code>activate</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>AIR for TV devices never automatically dispatch this event. You can,
	 * however, dispatch it manually.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ACTIVATE>
		<ADDED public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ADDED</code> constant defines the value of the
	 * <code>type</code> property of an <code>added</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ADDED>
		<ADDED_TO_STAGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ADDED_TO_STAGE</code> constant defines the value of the
	 * <code>type</code> property of an <code>addedToStage</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ADDED_TO_STAGE>
		<CANCEL public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CANCEL</code> constant defines the value of the
	 * <code>type</code> property of a <code>cancel</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CANCEL>
		<CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CHANGE</code> constant defines the value of the
	 * <code>type</code> property of a <code>change</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CHANGE>
		<CLEAR public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* The <code>Event.CLEAR</code> constant defines the value of the
	 * <code>type</code> property of a <code>clear</code> event object.
	 *
	 * <p>This event has the following properties:</p>
	 *
	 * <p><b>Note:</b> TextField objects do <i>not</i> dispatch
	 * <code>clear</code>, <code>copy</code>, <code>cut</code>,
	 * <code>paste</code>, or <code>selectAll</code> events. TextField objects
	 * always include Cut, Copy, Paste, Clear, and Select All commands in the
	 * context menu. You cannot remove these commands from the context menu for
	 * TextField objects. For TextField objects, selecting these commands (or
	 * their keyboard equivalents) does not generate <code>clear</code>,
	 * <code>copy</code>, <code>cut</code>, <code>paste</code>, or
	 * <code>selectAll</code> events. However, other classes that extend the
	 * InteractiveObject class, including components built using the Flash Text
	 * Engine (FTE), will dispatch these events in response to user actions such
	 * as keyboard shortcuts and context menus.</p>]]></haxe_doc>
		</CLEAR>
		<CLOSE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CLOSE</code> constant defines the value of the
	 * <code>type</code> property of a <code>close</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CLOSE>
		<COMPLETE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.COMPLETE</code> constant defines the value of the
	 * <code>type</code> property of a <code>complete</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</COMPLETE>
		<CONNECT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.CONNECT</code> constant defines the value of the
	 * <code>type</code> property of a <code>connect</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CONNECT>
		<CONTEXT3D_CREATE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</CONTEXT3D_CREATE>
		<COPY public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a <code>copy</code>
	 * event object.
	 *
	 * <p>This event has the following properties:</p>
	 *
	 * <p><b>Note:</b> TextField objects do <i>not</i> dispatch
	 * <code>clear</code>, <code>copy</code>, <code>cut</code>,
	 * <code>paste</code>, or <code>selectAll</code> events. TextField objects
	 * always include Cut, Copy, Paste, Clear, and Select All commands in the
	 * context menu. You cannot remove these commands from the context menu for
	 * TextField objects. For TextField objects, selecting these commands (or
	 * their keyboard equivalents) does not generate <code>clear</code>,
	 * <code>copy</code>, <code>cut</code>, <code>paste</code>, or
	 * <code>selectAll</code> events. However, other classes that extend the
	 * InteractiveObject class, including components built using the Flash Text
	 * Engine (FTE), will dispatch these events in response to user actions such
	 * as keyboard shortcuts and context menus.</p>]]></haxe_doc>
		</COPY>
		<CUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a <code>cut</code>
	 * event object.
	 *
	 * <p>This event has the following properties:</p>
	 *
	 * <p><b>Note:</b> TextField objects do <i>not</i> dispatch
	 * <code>clear</code>, <code>copy</code>, <code>cut</code>,
	 * <code>paste</code>, or <code>selectAll</code> events. TextField objects
	 * always include Cut, Copy, Paste, Clear, and Select All commands in the
	 * context menu. You cannot remove these commands from the context menu for
	 * TextField objects. For TextField objects, selecting these commands (or
	 * their keyboard equivalents) does not generate <code>clear</code>,
	 * <code>copy</code>, <code>cut</code>, <code>paste</code>, or
	 * <code>selectAll</code> events. However, other classes that extend the
	 * InteractiveObject class, including components built using the Flash Text
	 * Engine (FTE), will dispatch these events in response to user actions such
	 * as keyboard shortcuts and context menus.</p>]]></haxe_doc>
		</CUT>
		<DEACTIVATE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.DEACTIVATE</code> constant defines the value of the
	 * <code>type</code> property of a <code>deactivate</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>AIR for TV devices never automatically dispatch this event. You can,
	 * however, dispatch it manually.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</DEACTIVATE>
		<ENTER_FRAME public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ENTER_FRAME</code> constant defines the value of the
	 * <code>type</code> property of an <code>enterFrame</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ENTER_FRAME>
		<EXIT_FRAME public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* The <code>Event.EXIT_FRAME</code> constant defines the value of the
	 * <code>type</code> property of an <code>exitFrame</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</EXIT_FRAME>
		<FRAME_CONSTRUCTED public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* The <code>Event.FRAME_CONSTRUCTED</code> constant defines the value of the
	 * <code>type</code> property of an <code>frameConstructed</code> event
	 * object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</FRAME_CONSTRUCTED>
		<FULLSCREEN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.FULL_SCREEN</code> constant defines the value of the
	 * <code>type</code> property of a <code>fullScreen</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</FULLSCREEN>
		<ID3 public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.ID3</code> constant defines the value of the
	 * <code>type</code> property of an <code>id3</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ID3>
		<INIT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.INIT</code> constant defines the value of the
	 * <code>type</code> property of an <code>init</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</INIT>
		<MOUSE_LEAVE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.MOUSE_LEAVE</code> constant defines the value of the
	 * <code>type</code> property of a <code>mouseLeave</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_LEAVE>
		<OPEN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.OPEN</code> constant defines the value of the
	 * <code>type</code> property of an <code>open</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</OPEN>
		<PASTE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* The <code>Event.PASTE</code> constant defines the value of the
	 * <code>type</code> property of a <code>paste</code> event object.
	 *
	 * <p>This event has the following properties:</p>
	 *
	 * <p><b>Note:</b> TextField objects do <i>not</i> dispatch
	 * <code>clear</code>, <code>copy</code>, <code>cut</code>,
	 * <code>paste</code>, or <code>selectAll</code> events. TextField objects
	 * always include Cut, Copy, Paste, Clear, and Select All commands in the
	 * context menu. You cannot remove these commands from the context menu for
	 * TextField objects. For TextField objects, selecting these commands (or
	 * their keyboard equivalents) does not generate <code>clear</code>,
	 * <code>copy</code>, <code>cut</code>, <code>paste</code>, or
	 * <code>selectAll</code> events. However, other classes that extend the
	 * InteractiveObject class, including components built using the Flash Text
	 * Engine (FTE), will dispatch these events in response to user actions such
	 * as keyboard shortcuts and context menus.</p>]]></haxe_doc>
		</PASTE>
		<REMOVED public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.REMOVED</code> constant defines the value of the
	 * <code>type</code> property of a <code>removed</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</REMOVED>
		<REMOVED_FROM_STAGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.REMOVED_FROM_STAGE</code> constant defines the value of
	 * the <code>type</code> property of a <code>removedFromStage</code> event
	 * object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</REMOVED_FROM_STAGE>
		<RENDER public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.RENDER</code> constant defines the value of the
	 * <code>type</code> property of a <code>render</code> event object.
	 *
	 * <p><b>Note:</b> This event has neither a "capture phase" nor a "bubble
	 * phase", which means that event listeners must be added directly to any
	 * potential targets, whether the target is on the display list or not.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</RENDER>
		<RESIZE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.RESIZE</code> constant defines the value of the
	 * <code>type</code> property of a <code>resize</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</RESIZE>
		<SCROLL public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.SCROLL</code> constant defines the value of the
	 * <code>type</code> property of a <code>scroll</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SCROLL>
		<SELECT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.SELECT</code> constant defines the value of the
	 * <code>type</code> property of a <code>select</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SELECT>
		<SELECT_ALL public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* The <code>Event.SELECT_ALL</code> constant defines the value of the
	 * <code>type</code> property of a <code>selectAll</code> event object.
	 *
	 * <p>This event has the following properties:</p>
	 *
	 * <p><b>Note:</b> TextField objects do <i>not</i> dispatch
	 * <code>clear</code>, <code>copy</code>, <code>cut</code>,
	 * <code>paste</code>, or <code>selectAll</code> events. TextField objects
	 * always include Cut, Copy, Paste, Clear, and Select All commands in the
	 * context menu. You cannot remove these commands from the context menu for
	 * TextField objects. For TextField objects, selecting these commands (or
	 * their keyboard equivalents) does not generate <code>clear</code>,
	 * <code>copy</code>, <code>cut</code>, <code>paste</code>, or
	 * <code>selectAll</code> events. However, other classes that extend the
	 * InteractiveObject class, including components built using the Flash Text
	 * Engine (FTE), will dispatch these events in response to user actions such
	 * as keyboard shortcuts and context menus.</p>]]></haxe_doc>
		</SELECT_ALL>
		<SOUND_COMPLETE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.SOUND_COMPLETE</code> constant defines the value of the
	 * <code>type</code> property of a <code>soundComplete</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SOUND_COMPLETE>
		<TAB_CHILDREN_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.TAB_CHILDREN_CHANGE</code> constant defines the value of
	 * the <code>type</code> property of a <code>tabChildrenChange</code> event
	 * object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TAB_CHILDREN_CHANGE>
		<TAB_ENABLED_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.TAB_ENABLED_CHANGE</code> constant defines the value of
	 * the <code>type</code> property of a <code>tabEnabledChange</code> event
	 * object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TAB_ENABLED_CHANGE>
		<TAB_INDEX_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.TAB_INDEX_CHANGE</code> constant defines the value of the
	 * <code>type</code> property of a <code>tabIndexChange</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TAB_INDEX_CHANGE>
		<TEXT_INTERACTION_MODE_CHANGE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash11</e></m></meta>
			<haxe_doc><![CDATA[* The <code>Event.TEXT_INTERACTION_MODE_CHANGE</code> constant defines the
	 * value of the <code>type</code> property of a <code>interaction mode</code>
	 * event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TEXT_INTERACTION_MODE_CHANGE>
		<UNLOAD public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>Event.UNLOAD</code> constant defines the value of the
	 * <code>type</code> property of an <code>unload</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</UNLOAD>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Returns a string containing all the properties of the Event object. The
	 * string is in the following format:
	 *
	 * <p><code>[Event type=<i>value</i> bubbles=<i>value</i>
	 * cancelable=<i>value</i>]</code></p>
	 * 
	 * @return A string containing all the properties of the Event object.]]></haxe_doc>
		</toString>
		<stopPropagation public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Prevents processing of any event listeners in nodes subsequent to the
	 * current node in the event flow. This method does not affect any event
	 * listeners in the current node (<code>currentTarget</code>). In contrast,
	 * the <code>stopImmediatePropagation()</code> method prevents processing of
	 * event listeners in both the current node and subsequent nodes. Additional
	 * calls to this method have no effect. This method can be called in any
	 * phase of the event flow.
	 *
	 * <p><b>Note: </b> This method does not cancel the behavior associated with
	 * this event; see <code>preventDefault()</code> for that functionality.</p>
	 *]]></haxe_doc>
		</stopPropagation>
		<stopImmediatePropagation public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Prevents processing of any event listeners in the current node and any
	 * subsequent nodes in the event flow. This method takes effect immediately,
	 * and it affects event listeners in the current node. In contrast, the
	 * <code>stopPropagation()</code> method doesn't take effect until all the
	 * event listeners in the current node finish processing.
	 *
	 * <p><b>Note: </b> This method does not cancel the behavior associated with
	 * this event; see <code>preventDefault()</code> for that functionality.</p>
	 *]]></haxe_doc>
		</stopImmediatePropagation>
		<preventDefault public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Cancels an event's default behavior if that behavior can be canceled.
	 *
	 * <p>Many events have associated behaviors that are carried out by default.
	 * For example, if a user types a character into a text field, the default
	 * behavior is that the character is displayed in the text field. Because the
	 * <code>TextEvent.TEXT_INPUT</code> event's default behavior can be
	 * canceled, you can use the <code>preventDefault()</code> method to prevent
	 * the character from appearing. </p>
	 *
	 * <p>An example of a behavior that is not cancelable is the default behavior
	 * associated with the <code>Event.REMOVED</code> event, which is generated
	 * whenever Flash Player is about to remove a display object from the display
	 * list. The default behavior (removing the element) cannot be canceled, so
	 * the <code>preventDefault()</code> method has no effect on this default
	 * behavior. </p>
	 *
	 * <p>You can use the <code>Event.cancelable</code> property to check whether
	 * you can prevent the default behavior associated with a particular event.
	 * If the value of <code>Event.cancelable</code> is <code>true</code>, then
	 * <code>preventDefault()</code> can be used to cancel the event; otherwise,
	 * <code>preventDefault()</code> has no effect.</p>
	 *]]></haxe_doc>
		</preventDefault>
		<isDefaultPrevented public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc><![CDATA[* Checks whether the <code>preventDefault()</code> method has been called on
	 * the event. If the <code>preventDefault()</code> method has been called,
	 * returns <code>true</code>; otherwise, returns <code>false</code>.
	 * 
	 * @return If <code>preventDefault()</code> has been called, returns
	 *         <code>true</code>; otherwise, returns <code>false</code>.]]></haxe_doc>
		</isDefaultPrevented>
		<formatToString public="1" set="method">
			<f a="className:?p1:?p2:?p3:?p4:?p5">
				<c path="String"/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* A utility function for implementing the <code>toString()</code> method in
	 * custom ActionScript 3.0 Event classes. Overriding the
	 * <code>toString()</code> method is recommended, but not required. <pre
	 * xml:space="preserve"> class PingEvent extends Event { var URL:String;
	 * public override function toString():String { return
	 * formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase",
	 * "URL"); } } </pre>
	 * 
	 * @param className The name of your custom Event class. In the previous
	 *                  example, the <code>className</code> parameter is
	 *                  <code>PingEvent</code>.
	 * @return The name of your custom Event class and the String value of your
	 *         <code>...arguments</code> parameter.]]></haxe_doc>
		</formatToString>
		<clone public="1" set="method">
			<f a=""><c path="nme.events.Event"/></f>
			<haxe_doc><![CDATA[* Duplicates an instance of an Event subclass.
	 *
	 * <p>Returns a new Event object that is a copy of the original instance of
	 * the Event object. You do not normally call <code>clone()</code>; the
	 * EventDispatcher class calls it automatically when you redispatch an
	 * event - that is, when you call <code>dispatchEvent(event)</code> from a
	 * handler that is handling <code>event</code>.</p>
	 *
	 * <p>The new Event object includes all the properties of the original.</p>
	 *
	 * <p>When creating your own custom Event class, you must override the
	 * inherited <code>Event.clone()</code> method in order for it to duplicate
	 * the properties of your custom class. If you do not set all the properties
	 * that you add in your event subclass, those properties will not have the
	 * correct values when listeners handle the redispatched event.</p>
	 *
	 * <p>In this example, <code>PingEvent</code> is a subclass of
	 * <code>Event</code> and therefore implements its own version of
	 * <code>clone()</code>.</p>
	 * 
	 * @return A new Event object that is identical to the original.]]></haxe_doc>
		</clone>
		<type public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The type of event. The type is case-sensitive.</haxe_doc>
		</type>
		<target public="1" set="null">
			<d/>
			<haxe_doc>* The event target. This property contains the target node. For example, if
	 * a user clicks an OK button, the target node is the display list node
	 * containing that button.</haxe_doc>
		</target>
		<eventPhase public="1" set="null">
			<e path="nme.events.EventPhase"/>
			<haxe_doc><![CDATA[* The current phase in the event flow. This property can contain the
	 * following numeric values:
	 * <ul>
	 *   <li> The capture phase (<code>EventPhase.CAPTURING_PHASE</code>).</li>
	 *   <li> The target phase (<code>EventPhase.AT_TARGET</code>).</li>
	 *   <li> The bubbling phase (<code>EventPhase.BUBBLING_PHASE</code>).</li>
	 * </ul>]]></haxe_doc>
		</eventPhase>
		<currentTarget public="1" set="null">
			<d/>
			<haxe_doc>* The object that is actively processing the Event object with an event
	 * listener. For example, if a user clicks an OK button, the current target
	 * could be the node containing that button or one of its ancestors that has
	 * registered an event listener for that event.</haxe_doc>
		</currentTarget>
		<cancelable public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the behavior associated with the event can be prevented.
	 * If the behavior can be canceled, this value is <code>true</code>;
	 * otherwise it is <code>false</code>.]]></haxe_doc>
		</cancelable>
		<bubbles public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether an event is a bubbling event. If the event can bubble,
	 * this value is <code>true</code>; otherwise it is <code>false</code>.
	 *
	 * <p>When an event occurs, it moves through the three phases of the event
	 * flow: the capture phase, which flows from the top of the display list
	 * hierarchy to the node just before the target node; the target phase, which
	 * comprises the target node; and the bubbling phase, which flows from the
	 * node subsequent to the target node back up the display list hierarchy.</p>
	 *
	 * <p>Some events, such as the <code>activate</code> and <code>unload</code>
	 * events, do not have a bubbling phase. The <code>bubbles</code> property
	 * has a value of <code>false</code> for events that do not have a bubbling
	 * phase.</p>]]></haxe_doc>
		</bubbles>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object to pass as a parameter to event listeners.
	 * 
	 * @param type       The type of the event, accessible as
	 *                   <code>Event.type</code>.
	 * @param bubbles    Determines whether the Event object participates in the
	 *                   bubbling stage of the event flow. The default value is
	 *                   <code>false</code>.
	 * @param cancelable Determines whether the Event object can be canceled. The
	 *                   default values is <code>false</code>.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Event class is used as the base class for the creation of Event
 * objects, which are passed as parameters to event listeners when an event
 * occurs.
 *
 * <p>The properties of the Event class carry basic information about an
 * event, such as the event's type or whether the event's default behavior can
 * be canceled. For many events, such as the events represented by the Event
 * class constants, this basic information is sufficient. Other events,
 * however, may require more detailed information. Events associated with a
 * mouse click, for example, need to include additional information about the
 * location of the click event and whether any keys were pressed during the
 * click event. You can pass such additional information to event listeners by
 * extending the Event class, which is what the MouseEvent class does.
 * ActionScript 3.0 API defines several Event subclasses for common events
 * that require additional information. Events associated with each of the
 * Event subclasses are described in the documentation for each class.</p>
 *
 * <p>The methods of the Event class can be used in event listener functions
 * to affect the behavior of the event object. Some events have an associated
 * default behavior. For example, the <code>doubleClick</code> event has an
 * associated default behavior that highlights the word under the mouse
 * pointer at the time of the event. Your event listener can cancel this
 * behavior by calling the <code>preventDefault()</code> method. You can also
 * make the current event listener the last one to process an event by calling
 * the <code>stopPropagation()</code> or
 * <code>stopImmediatePropagation()</code> method.</p>
 *
 * <p>Other sources of information include:</p>
 *
 * <ul>
 *   <li>A useful description about the timing of events, code execution, and
 * rendering at runtime in Ted Patrick's blog entry: <a
 * href="http://www.onflex.org/ted/2005/07/flash-player-mental-model-elastic.php"
 * scope="external">Flash Player Mental Model - The Elastic
 * Racetrack</a>.</li>
 *   <li>A blog entry by Johannes Tacskovics about the timing of frame events,
 * such as ENTER_FRAME, EXIT_FRAME: <a
 * href="http://blog.johannest.com/2009/06/15/the-movieclip-life-cycle-revisited-from-event-added-to-event-removed_from_stage/"
 * scope="external">The MovieClip Lifecycle</a>.</li>
 *   <li>An article by Trevor McCauley about the order of ActionScript
 * operations: <a
 * href="http://www.senocular.com/flash/tutorials/orderofoperations/"
 * scope="external">Order of Operations in ActionScript</a>.</li>
 *   <li>A blog entry by Matt Przybylski on creating custom events: <a
 * href="http://evolve.reintroducing.com/2007/10/23/as3/as3-custom-events/"
 * scope="external">AS3: Custom Events</a>.</li>
 * </ul>
 *]]></haxe_doc>
	</class>
	<class path="nme.events.AccelerometerEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/AccelerometerEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<UPDATE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>AccelerometerEvent</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</UPDATE>
		<timestamp public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The number of milliseconds at the time of the event since the runtime was
	 * initialized. For example, if the device captures accelerometer data 4
	 * seconds after the application initializes, then the <code>timestamp</code>
	 * property of the event is set to 4000.]]></haxe_doc>
		</timestamp>
		<accelerationZ public="1">
			<c path="Float"/>
			<haxe_doc>* Acceleration along the z-axis, measured in Gs. (1 G is roughly 9.8
	 * m/sec/sec.). The z-axis runs perpendicular to the face of the device. The
	 * acceleration is positive if you move the device so that the face moves
	 * higher.</haxe_doc>
		</accelerationZ>
		<accelerationY public="1">
			<c path="Float"/>
			<haxe_doc>* Acceleration along the y-axis, measured in Gs. (1 G is roughly 9.8
	 * m/sec/sec.). The y-axis runs from the bottom to the top of the device when
	 * it is in the upright position. The acceleration is positive if the device
	 * moves up relative to this axis.</haxe_doc>
		</accelerationY>
		<accelerationX public="1">
			<c path="Float"/>
			<haxe_doc>* Acceleration along the x-axis, measured in Gs. (1 G is roughly 9.8
	 * m/sec/sec.) The x-axis runs from the left to the right of the device when
	 * it is in the upright position. The acceleration is positive if the device
	 * moves towards the right.</haxe_doc>
		</accelerationX>
		<new public="1">
			<f a="type:?bubbles:?cancelable:?timestamp:?accelerationX:?accelerationY:?accelerationZ">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an AccelerometerEvent object that contains information about
	 * acceleration along three dimensional axis. Event objects are passed as
	 * parameters to event listeners.
	 * 
	 * @param type          The type of the event. Event listeners can access
	 *                      this information through the inherited
	 *                      <code>type</code> property. There is only one type of
	 *                      update event: <code>AccelerometerEvent.UPDATE</code>.
	 * @param bubbles       Determines whether the Event object bubbles. Event
	 *                      listeners can access this information through the
	 *                      inherited <code>bubbles</code> property.
	 * @param cancelable    Determines whether the Event object can be canceled.
	 *                      Event listeners can access this information through
	 *                      the inherited <code>cancelable</code> property.
	 * @param timestamp     The timestamp of the Accelerometer update.
	 * @param accelerationX The acceleration value in Gs (9.8m/sec/sec) along the
	 *                      x-axis.
	 * @param accelerationY The acceleration value in Gs (9.8m/sec/sec) along the
	 *                      y-axis.
	 * @param accelerationZ The acceleration value in Gs (9.8m/sec/sec) along the
	 *                      z-axis.]]></haxe_doc>
		</new>
		<haxe_doc>* The Accelerometer class dispatches AccelerometerEvent objects when
 * acceleration updates are obtained from the Accelerometer sensor installed
 * on the device.
 *</haxe_doc>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="nme.events.TextEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/TextEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<LINK public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a <code>link</code>
	 * event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</LINK>
		<TEXT_INPUT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>textInput</code> event object.
	 *
	 * <p><b>Note:</b> This event is not dispatched for the Delete or Backspace
	 * keys.</p>
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TEXT_INPUT>
		<text public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* For a <code>textInput</code> event, the character or sequence of
	 * characters entered by the user. For a <code>link</code> event, the text of
	 * the <code>event</code> attribute of the <code>href</code> attribute of the
	 * <code><a></code> tag.]]></haxe_doc>
		</text>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains information about text events. Event
	 * objects are passed as parameters to event listeners.
	 * 
	 * @param type       The type of the event. Event listeners can access this
	 *                   information through the inherited <code>type</code>
	 *                   property. Possible values are:
	 *                   <code>TextEvent.LINK</code> and
	 *                   <code>TextEvent.TEXT_INPUT</code>.
	 * @param bubbles    Determines whether the Event object participates in the
	 *                   bubbling phase of the event flow. Event listeners can
	 *                   access this information through the inherited
	 *                   <code>bubbles</code> property.
	 * @param cancelable Determines whether the Event object can be canceled.
	 *                   Event listeners can access this information through the
	 *                   inherited <code>cancelable</code> property.
	 * @param text       One or more characters of text entered by the user.
	 *                   Event listeners can access this information through the
	 *                   <code>text</code> property.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* An object dispatches a TextEvent object when a user enters text in a text
 * field or clicks a hyperlink in an HTML-enabled text field. There are two
 * types of text events: <code>TextEvent.LINK</code> and
 * <code>TextEvent.TEXT_INPUT</code>.
 *]]></haxe_doc>
	</class>
	<class path="nme.events.ErrorEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/ErrorEvent.hx" extern="1">
		<extends path="nme.events.TextEvent"/>
		<ERROR public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of an
	 * <code>error</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ERROR>
		<errorID public="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Contains the reference number associated with the specific error. For a
	 * custom ErrorEvent object, this number is the value from the
	 * <code>id</code> parameter supplied in the constructor.]]></haxe_doc>
		</errorID>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="String"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains information about error events.
	 * Event objects are passed as parameters to event listeners.
	 * 
	 * @param type       The type of the event. Event listeners can access this
	 *                   information through the inherited <code>type</code>
	 *                   property. There is only one type of error event:
	 *                   <code>ErrorEvent.ERROR</code>.
	 * @param bubbles    Determines whether the Event object bubbles. Event
	 *                   listeners can access this information through the
	 *                   inherited <code>bubbles</code> property.
	 * @param cancelable Determines whether the Event object can be canceled.
	 *                   Event listeners can access this information through the
	 *                   inherited <code>cancelable</code> property.
	 * @param text       Text to be displayed as an error message. Event
	 *                   listeners can access this information through the
	 *                   <code>text</code> property.
	 * @param id         A reference number to associate with the specific error
	 *                   (supported in Adobe AIR only).]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* An object dispatches an ErrorEvent object when an error causes an
 * asynchronous operation to fail.
 *
 * <p>The ErrorEvent class defines only one type of <code>error</code> event:
 * <code>ErrorEvent.ERROR</code>. The ErrorEvent class also serves as the base
 * class for several other error event classes, including the AsyncErrorEvent,
 * IOErrorEvent, SecurityErrorEvent, SQLErrorEvent, and UncaughtErrorEvent
 * classes.</p>
 *
 * <p>You can check for <code>error</code> events that do not have any
 * listeners by registering a listener for the <code>uncaughtError</code>
 * (UncaughtErrorEvent.UNCAUGHT_ERROR) event.</p>
 *
 * <p>An uncaught error also causes an error dialog box displaying the error
 * event to appear when content is running in the debugger version of Flash
 * Player or the AIR Debug Launcher (ADL) application.</p>
 *]]></haxe_doc>
	</class>
	<enum path="nme.events.EventPhase" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/EventPhase.hx">
		<CAPTURING_PHASE/>
		<BUBBLING_PHASE/>
		<AT_TARGET/>
		<haxe_doc><![CDATA[* The EventPhase class provides values for the <code>eventPhase</code>
 * property of the Event class.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>Int</e></m></meta>
	</enum>
	<class path="nme.events.FocusEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/FocusEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<FOCUS_IN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>focusIn</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</FOCUS_IN>
		<FOCUS_OUT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>focusOut</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</FOCUS_OUT>
		<KEY_FOCUS_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>keyFocusChange</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</KEY_FOCUS_CHANGE>
		<MOUSE_FOCUS_CHANGE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>mouseFocusChange</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_FOCUS_CHANGE>
		<shiftKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the Shift key modifier is activated, in which case the
	 * value is <code>true</code>. Otherwise, the value is <code>false</code>.
	 * This property is used only if the FocusEvent is of type
	 * <code>keyFocusChange</code>.]]></haxe_doc>
		</shiftKey>
		<relatedObject public="1">
			<c path="nme.display.InteractiveObject"/>
			<haxe_doc><![CDATA[* A reference to the complementary InteractiveObject instance that is
	 * affected by the change in focus. For example, when a <code>focusOut</code>
	 * event occurs, the <code>relatedObject</code> represents the
	 * InteractiveObject instance that has gained focus.
	 *
	 * <p>The value of this property can be <code>null</code> in two
	 * circumstances: if there no related object, or there is a related object,
	 * but it is in a security sandbox to which you don't have access. Use the
	 * <code>isRelatedObjectInaccessible()</code> property to determine which of
	 * these reasons applies.</p>]]></haxe_doc>
		</relatedObject>
		<keyCode public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The key code value of the key pressed to trigger a
	 * <code>keyFocusChange</code> event.]]></haxe_doc>
		</keyCode>
		<isRelatedObjectInaccessible public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* If <code>true</code>, the <code>relatedObject</code> property is set to
	 * <code>null</code> for reasons related to security sandboxes. If the
	 * nominal value of <code>relatedObject</code> is a reference to a
	 * DisplayObject in another sandbox, <code>relatedObject</code> is set to
	 * <code>null</code> unless there is permission in both directions across
	 * this sandbox boundary. Permission is established by calling
	 * <code>Security.allowDomain()</code> from a SWF file, or by providing a
	 * policy file from the server of an image file, and setting the
	 * <code>LoaderContext.checkPolicyFile</code> property when loading the
	 * image.]]></haxe_doc>
		</isRelatedObjectInaccessible>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?relatedObject:?shiftKey:?keyCode">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="nme.display.InteractiveObject"/>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object with specific information relevant to focus
	 * events. Event objects are passed as parameters to event listeners.
	 * 
	 * @param type          The type of the event. Possible values are:
	 *                      <code>FocusEvent.FOCUS_IN</code>,
	 *                      <code>FocusEvent.FOCUS_OUT</code>,
	 *                      <code>FocusEvent.KEY_FOCUS_CHANGE</code>, and
	 *                      <code>FocusEvent.MOUSE_FOCUS_CHANGE</code>.
	 * @param bubbles       Determines whether the Event object participates in
	 *                      the bubbling stage of the event flow.
	 * @param cancelable    Determines whether the Event object can be canceled.
	 * @param relatedObject Indicates the complementary InteractiveObject
	 *                      instance that is affected by the change in focus. For
	 *                      example, when a <code>focusIn</code> event occurs,
	 *                      <code>relatedObject</code> represents the
	 *                      InteractiveObject that has lost focus.
	 * @param shiftKey      Indicates whether the Shift key modifier is
	 *                      activated.
	 * @param keyCode       Indicates the code of the key pressed to trigger a
	 *                      <code>keyFocusChange</code> event.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* An object dispatches a FocusEvent object when the user changes the focus
 * from one object in the display list to another. There are four types of
 * focus events:
 * <ul>
 *   <li><code>FocusEvent.FOCUS_IN</code></li>
 *   <li><code>FocusEvent.FOCUS_OUT</code></li>
 *   <li><code>FocusEvent.KEY_FOCUS_CHANGE</code></li>
 *   <li><code>FocusEvent.MOUSE_FOCUS_CHANGE</code></li>
 * </ul>
 *]]></haxe_doc>
	</class>
	<class path="nme.events.IOErrorEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/IOErrorEvent.hx" extern="1">
		<extends path="nme.events.ErrorEvent"/>
		<DISK_ERROR public="1" static="1"><c path="String"/></DISK_ERROR>
		<IO_ERROR public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of an
	 * <code>ioError</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</IO_ERROR>
		<NETWORK_ERROR public="1" static="1"><c path="String"/></NETWORK_ERROR>
		<VERIFY_ERROR public="1" static="1"><c path="String"/></VERIFY_ERROR>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="String"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains specific information about
	 * <code>ioError</code> events. Event objects are passed as parameters to
	 * Event listeners.
	 * 
	 * @param type       The type of the event. Event listeners can access this
	 *                   information through the inherited <code>type</code>
	 *                   property. There is only one type of input/output error
	 *                   event: <code>IOErrorEvent.IO_ERROR</code>.
	 * @param bubbles    Determines whether the Event object participates in the
	 *                   bubbling stage of the event flow. Event listeners can
	 *                   access this information through the inherited
	 *                   <code>bubbles</code> property.
	 * @param cancelable Determines whether the Event object can be canceled.
	 *                   Event listeners can access this information through the
	 *                   inherited <code>cancelable</code> property.
	 * @param text       Text to be displayed as an error message. Event
	 *                   listeners can access this information through the
	 *                   <code>text</code> property.
	 * @param id         A reference number to associate with the specific error
	 *                   (supported in Adobe AIR only).]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* An IOErrorEvent object is dispatched when an error causes input or output
 * operations to fail.
 *
 * <p>You can check for error events that do not have any listeners by using
 * the debugger version of Flash Player or the AIR Debug Launcher (ADL). The
 * string defined by the <code>text</code> parameter of the IOErrorEvent
 * constructor is displayed.</p>
 *]]></haxe_doc>
	</class>
	<class path="nme.events.JoystickEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/JoystickEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<AXIS_MOVE public="1" static="1"><c path="String"/></AXIS_MOVE>
		<BALL_MOVE public="1" static="1"><c path="String"/></BALL_MOVE>
		<BUTTON_DOWN public="1" static="1"><c path="String"/></BUTTON_DOWN>
		<BUTTON_UP public="1" static="1"><c path="String"/></BUTTON_UP>
		<HAT_MOVE public="1" static="1"><c path="String"/></HAT_MOVE>
		<z public="1"><c path="Float"/></z>
		<y public="1"><c path="Float"/></y>
		<x public="1"><c path="Float"/></x>
		<id public="1"><c path="Int"/></id>
		<device public="1"><c path="Int"/></device>
		<axis public="1"><c path="Array"><c path="Float"/></c></axis>
		<new public="1" set="method"><f a="type:?bubbles:?cancelable:?device:?id:?x:?y:?z">
	<c path="String"/>
	<e path="Bool"/>
	<e path="Bool"/>
	<c path="Int"/>
	<c path="Int"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
	</class>
	<class path="nme.events.KeyboardEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/KeyboardEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<KEY_DOWN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>KeyboardEvent.KEY_DOWN</code> constant defines the value of the
	 * <code>type</code> property of a <code>keyDown</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</KEY_DOWN>
		<KEY_UP public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>KeyboardEvent.KEY_UP</code> constant defines the value of the
	 * <code>type</code> property of a <code>keyUp</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</KEY_UP>
		<updateAfterEvent public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Indicates that the display should be rendered after processing of this
	 * event completes, if the display list has been modified
	 *</haxe_doc>
		</updateAfterEvent>
		<shiftKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the Shift key modifier is active (<code>true</code>) or
	 * inactive (<code>false</code>).]]></haxe_doc>
		</shiftKey>
		<keyCode public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The key code value of the key pressed or released.
	 *
	 * <p><b>Note: </b>When an input method editor (IME) is running,
	 * <code>keyCode</code> does not report accurate key codes.</p>]]></haxe_doc>
		</keyCode>
		<ctrlKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* On Windows and Linux, indicates whether the Ctrl key is active
	 * (<code>true</code>) or inactive (<code>false</code>); On Mac OS, indicates
	 * whether either the Ctrl key or the Command key is active.]]></haxe_doc>
		</ctrlKey>
		<charCode public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Contains the character code value of the key pressed or released. The
	 * character code values are English keyboard values. For example, if you
	 * press Shift+3, <code>charCode</code> is # on a Japanese keyboard, just as
	 * it is on an English keyboard.
	 *
	 * <p><b>Note: </b>When an input method editor (IME) is running,
	 * <code>charCode</code> does not report accurate character codes.</p>]]></haxe_doc>
		</charCode>
		<altKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the Alt key is active (<code>true</code>) or inactive
	 * (<code>false</code>) on Windows; indicates whether the Option key is
	 * active on Mac OS.]]></haxe_doc>
		</altKey>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?charCodeValue:?keyCodeValue">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains specific information about keyboard
	 * events. Event objects are passed as parameters to event listeners.
	 * 
	 * @param type          The type of the event. Possible values are:
	 *                      <code>KeyboardEvent.KEY_DOWN</code> and
	 *                      <code>KeyboardEvent.KEY_UP</code>
	 * @param bubbles       Determines whether the Event object participates in
	 *                      the bubbling stage of the event flow.
	 * @param cancelable    Determines whether the Event object can be canceled.
	 * @param charCodeValue The character code value of the key pressed or
	 *                      released. The character code values returned are
	 *                      English keyboard values. For example, if you press
	 *                      Shift+3, the <code>Keyboard.charCode()</code>
	 *                      property returns # on a Japanese keyboard, just as it
	 *                      does on an English keyboard.
	 * @param keyCodeValue  The key code value of the key pressed or released.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A KeyboardEvent object id dispatched in response to user input through a
 * keyboard. There are two types of keyboard events:
 * <code>KeyboardEvent.KEY_DOWN</code> and <code>KeyboardEvent.KEY_UP</code>
 *
 * <p>Because mappings between keys and specific characters vary by device and
 * operating system, use the TextEvent event type for processing character
 * input.</p>
 *
 * <p>To listen globally for key events, listen on the Stage for the capture
 * and target or bubble phase.</p>
 *]]></haxe_doc>
	</class>
	<class path="nme.events.MouseEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/MouseEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<CLICK public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>click</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</CLICK>
		<DOUBLE_CLICK public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>doubleClick</code> event object. The <code>doubleClickEnabled</code>
	 * property must be <code>true</code> for an object to generate the
	 * <code>doubleClick</code> event.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</DOUBLE_CLICK>
		<MOUSE_DOWN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>mouseDown</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_DOWN>
		<MOUSE_MOVE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>mouseMove</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_MOVE>
		<MOUSE_OUT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>mouseOut</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_OUT>
		<MOUSE_OVER public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>mouseOver</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_OVER>
		<MOUSE_UP public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>mouseUp</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_UP>
		<MOUSE_WHEEL public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>mouseWheel</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</MOUSE_WHEEL>
		<ROLL_OUT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>rollOut</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ROLL_OUT>
		<ROLL_OVER public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>rollOver</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</ROLL_OVER>
		<updateAfterEvent public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Instructs Flash Player or Adobe AIR to render after processing of this
	 * event completes, if the display list has been modified.
	 *</haxe_doc>
		</updateAfterEvent>
		<stageY public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The vertical coordinate at which the event occurred in global Stage
	 * coordinates. This property is calculated when the <code>localY</code>
	 * property is set.]]></haxe_doc>
		</stageY>
		<stageX public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The horizontal coordinate at which the event occurred in global Stage
	 * coordinates. This property is calculated when the <code>localX</code>
	 * property is set.]]></haxe_doc>
		</stageX>
		<shiftKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the Shift key is active (<code>true</code>) or inactive
	 * (<code>false</code>).]]></haxe_doc>
		</shiftKey>
		<relatedObject public="1">
			<c path="nme.display.InteractiveObject"/>
			<haxe_doc><![CDATA[* A reference to a display list object that is related to the event. For
	 * example, when a <code>mouseOut</code> event occurs,
	 * <code>relatedObject</code> represents the display list object to which the
	 * pointing device now points. This property applies to the
	 * <code>mouseOut</code>, <code>mouseOver</code>, <code>rollOut</code>, and
	 * <code>rollOver</code> events.
	 *
	 * <p>The value of this property can be <code>null</code> in two
	 * circumstances: if there no related object, or there is a related object,
	 * but it is in a security sandbox to which you don't have access. Use the
	 * <code>isRelatedObjectInaccessible()</code> property to determine which of
	 * these reasons applies.</p>]]></haxe_doc>
		</relatedObject>
		<localY public="1">
			<c path="Float"/>
			<haxe_doc>* The vertical coordinate at which the event occurred relative to the
	 * containing sprite.</haxe_doc>
		</localY>
		<localX public="1">
			<c path="Float"/>
			<haxe_doc>* The horizontal coordinate at which the event occurred relative to the
	 * containing sprite.</haxe_doc>
		</localX>
		<isRelatedObjectInaccessible public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* If <code>true</code>, the <code>relatedObject</code> property is set to
	 * <code>null</code> for reasons related to security sandboxes. If the
	 * nominal value of <code>relatedObject</code> is a reference to a
	 * DisplayObject in another sandbox, <code>relatedObject</code> is set to
	 * <code>null</code> unless there is permission in both directions across
	 * this sandbox boundary. Permission is established by calling
	 * <code>Security.allowDomain()</code> from a SWF file, or by providing a
	 * policy file from the server of an image file, and setting the
	 * <code>LoaderContext.checkPolicyFile</code> property when loading the
	 * image.]]></haxe_doc>
		</isRelatedObjectInaccessible>
		<delta public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Indicates how many lines should be scrolled for each unit the user rotates
	 * the mouse wheel. A positive delta value indicates an upward scroll; a
	 * negative value indicates a downward scroll. Typical values are 1 to 3, but
	 * faster rotation may produce larger values. This setting depends on the
	 * device and operating system and is usually configurable by the user. This
	 * property applies only to the <code>MouseEvent.mouseWheel</code> event.]]></haxe_doc>
		</delta>
		<ctrlKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* On Windows or Linux, indicates whether the Ctrl key is active
	 * (<code>true</code>) or inactive (<code>false</code>). On Macintosh,
	 * indicates whether either the Control key or the Command key is activated.]]></haxe_doc>
		</ctrlKey>
		<buttonDown public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the primary mouse button is pressed (<code>true</code>)
	 * or not (<code>false</code>).]]></haxe_doc>
		</buttonDown>
		<altKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the Alt key is active (<code>true</code>) or inactive
	 * (<code>false</code>). Supported for Windows only. On other operating
	 * systems, this property is always set to <code>false</code>.]]></haxe_doc>
		</altKey>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?localX:?localY:?relatedObject:?ctrlKey:?altKey:?shiftKey:?buttonDown:?delta">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="nme.display.InteractiveObject"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains information about mouse events.
	 * Event objects are passed as parameters to event listeners.
	 * 
	 * @param type          The type of the event. Possible values are:
	 *                      <code>MouseEvent.CLICK</code>,
	 *                      <code>MouseEvent.DOUBLE_CLICK</code>,
	 *                      <code>MouseEvent.MOUSE_DOWN</code>,
	 *                      <code>MouseEvent.MOUSE_MOVE</code>,
	 *                      <code>MouseEvent.MOUSE_OUT</code>,
	 *                      <code>MouseEvent.MOUSE_OVER</code>,
	 *                      <code>MouseEvent.MOUSE_UP</code>,
	 *                      <code>MouseEvent.MIDDLE_CLICK</code>,
	 *                      <code>MouseEvent.MIDDLE_MOUSE_DOWN</code>,
	 *                      <code>MouseEvent.MIDDLE_MOUSE_UP</code>,
	 *                      <code>MouseEvent.RIGHT_CLICK</code>,
	 *                      <code>MouseEvent.RIGHT_MOUSE_DOWN</code>,
	 *                      <code>MouseEvent.RIGHT_MOUSE_UP</code>,
	 *                      <code>MouseEvent.MOUSE_WHEEL</code>,
	 *                      <code>MouseEvent.ROLL_OUT</code>, and
	 *                      <code>MouseEvent.ROLL_OVER</code>.
	 * @param bubbles       Determines whether the Event object participates in
	 *                      the bubbling phase of the event flow.
	 * @param cancelable    Determines whether the Event object can be canceled.
	 * @param localX        The horizontal coordinate at which the event occurred
	 *                      relative to the containing sprite.
	 * @param localY        The vertical coordinate at which the event occurred
	 *                      relative to the containing sprite.
	 * @param relatedObject The complementary InteractiveObject instance that is
	 *                      affected by the event. For example, when a
	 *                      <code>mouseOut</code> event occurs,
	 *                      <code>relatedObject</code> represents the display
	 *                      list object to which the pointing device now points.
	 * @param ctrlKey       On Windows or Linux, indicates whether the Ctrl key
	 *                      is activated. On Mac, indicates whether either the
	 *                      Ctrl key or the Command key is activated.
	 * @param altKey        Indicates whether the Alt key is activated (Windows
	 *                      or Linux only).
	 * @param shiftKey      Indicates whether the Shift key is activated.
	 * @param buttonDown    Indicates whether the primary mouse button is
	 *                      pressed.
	 * @param delta         Indicates how many lines should be scrolled for each
	 *                      unit the user rotates the mouse wheel. A positive
	 *                      delta value indicates an upward scroll; a negative
	 *                      value indicates a downward scroll. Typical values are
	 *                      1 to 3, but faster rotation may produce larger
	 *                      values. This parameter is used only for the
	 *                      <code>MouseEvent.mouseWheel</code> event.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A MouseEvent object is dispatched into the event flow whenever mouse events
 * occur. A mouse event is usually generated by a user input device, such as a
 * mouse or a trackball, that uses a pointer.
 *
 * <p>When nested nodes are involved, mouse events target the deepest possible
 * nested node that is visible in the display list. This node is called the
 * <i>target node</i>. To have a target node's ancestor receive notification
 * of a mouse event, use <code>EventDispatcher.addEventListener()</code> on
 * the ancestor node with the <code>type</code> parameter set to the specific
 * mouse event you want to detect.</p>
 *]]></haxe_doc>
	</class>
	<class path="nme.events.ProgressEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/ProgressEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<PROGRESS public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>progress</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</PROGRESS>
		<SOCKET_DATA public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>socketData</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SOCKET_DATA>
		<bytesTotal public="1">
			<c path="Float"/>
			<haxe_doc>* The total number of items or bytes that will be loaded if the loading
	 * process succeeds. If the progress event is dispatched/attached to a Socket
	 * object, the bytesTotal will always be 0 unless a value is specified in the
	 * bytesTotal parameter of the constructor. The actual number of bytes sent
	 * back or forth is not set and is up to the application developer.</haxe_doc>
		</bytesTotal>
		<bytesLoaded public="1">
			<c path="Float"/>
			<haxe_doc>* The number of items or bytes loaded when the listener processes the event.</haxe_doc>
		</bytesLoaded>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?bytesLoaded:?bytesTotal">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains information about progress events.
	 * Event objects are passed as parameters to event listeners.
	 * 
	 * @param type        The type of the event. Possible values
	 *                    are:<code>ProgressEvent.PROGRESS</code>,
	 *                    <code>ProgressEvent.SOCKET_DATA</code>,
	 *                    <code>ProgressEvent.STANDARD_ERROR_DATA</code>,
	 *                    <code>ProgressEvent.STANDARD_INPUT_PROGRESS</code>, and
	 *                    <code>ProgressEvent.STANDARD_OUTPUT_DATA</code>.
	 * @param bubbles     Determines whether the Event object participates in the
	 *                    bubbling stage of the event flow.
	 * @param cancelable  Determines whether the Event object can be canceled.
	 * @param bytesLoaded The number of items or bytes loaded at the time the
	 *                    listener processes the event.
	 * @param bytesTotal  The total number of items or bytes that will be loaded
	 *                    if the loading process succeeds.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A ProgressEvent object is dispatched when a load operation has begun or a
 * socket has received data. These events are usually generated when SWF
 * files, images or data are loaded into an application. There are two types
 * of progress events: <code>ProgressEvent.PROGRESS</code> and
 * <code>ProgressEvent.SOCKET_DATA</code>. Additionally, in AIR ProgressEvent
 * objects are dispatched when a data is sent to or from a child process using
 * the NativeProcess class.
 *]]></haxe_doc>
	</class>
	<class path="nme.events.SecurityErrorEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/SecurityErrorEvent.hx" extern="1">
		<extends path="nme.events.ErrorEvent"/>
		<SECURITY_ERROR public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The <code>SecurityErrorEvent.SECURITY_ERROR</code> constant defines the
	 * value of the <code>type</code> property of a <code>securityError</code>
	 * event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</SECURITY_ERROR>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable:?text:?id">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="String"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains information about security error
	 * events. Event objects are passed as parameters to event listeners.
	 * 
	 * @param type       The type of the event. Event listeners can access this
	 *                   information through the inherited <code>type</code>
	 *                   property. There is only one type of error event:
	 *                   <code>SecurityErrorEvent.SECURITY_ERROR</code>.
	 * @param bubbles    Determines whether the Event object participates in the
	 *                   bubbling stage of the event flow. Event listeners can
	 *                   access this information through the inherited
	 *                   <code>bubbles</code> property.
	 * @param cancelable Determines whether the Event object can be canceled.
	 *                   Event listeners can access this information through the
	 *                   inherited <code>cancelable</code> property.
	 * @param text       Text to be displayed as an error message. Event
	 *                   listeners can access this information through the
	 *                   <code>text</code> property.
	 * @param id         A reference number to associate with the specific error.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* An object dispatches a SecurityErrorEvent object to report the occurrence
 * of a security error. Security errors reported through this class are
 * generally from asynchronous operations, such as loading data, in which
 * security violations may not manifest immediately. Your event listener can
 * access the object's <code>text</code> property to determine what operation
 * was attempted and any URLs that were involved. If there are no event
 * listeners, the debugger version of Flash Player or the AIR Debug Launcher
 * (ADL) application automatically displays an error message that contains the
 * contents of the <code>text</code> property. There is one type of security
 * error event: <code>SecurityErrorEvent.SECURITY_ERROR</code>.
 *
 * <p>Security error events are the final events dispatched for any target
 * object. This means that any other events, including generic error events,
 * are not dispatched for a target object that experiences a security
 * error.</p>
 *]]></haxe_doc>
	</class>
	<class path="nme.events.TimerEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/TimerEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<TIMER public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>timer</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TIMER>
		<TIMER_COMPLETE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>timerComplete</code> event object.
	 *
	 * <p>This event has the following properties:</p>]]></haxe_doc>
		</TIMER_COMPLETE>
		<updateAfterEvent public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Instructs Flash Player or the AIR runtime to render after processing of
	 * this event completes, if the display list has been modified.
	 *</haxe_doc>
		</updateAfterEvent>
		<new public="1" set="method">
			<f a="type:?bubbles:?cancelable">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object with specific information relevant to
	 * <code>timer</code> events. Event objects are passed as parameters to event
	 * listeners.
	 * 
	 * @param type       The type of the event. Event listeners can access this
	 *                   information through the inherited <code>type</code>
	 *                   property.
	 * @param bubbles    Determines whether the Event object bubbles. Event
	 *                   listeners can access this information through the
	 *                   inherited <code>bubbles</code> property.
	 * @param cancelable Determines whether the Event object can be canceled.
	 *                   Event listeners can access this information through the
	 *                   inherited <code>cancelable</code> property.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A Timer object dispatches a TimerEvent objects whenever the Timer object
 * reaches the interval specified by the <code>Timer.delay</code> property.
 *]]></haxe_doc>
	</class>
	<class path="nme.events.TouchEvent" params="" file="/Users/joshua/Development/Haxe/nme/nme/events/TouchEvent.hx" extern="1">
		<extends path="nme.events.Event"/>
		<TOUCH_BEGIN public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_BEGIN</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_BEGIN>
		<TOUCH_END public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_END</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_END>
		<TOUCH_MOVE public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_MOVE</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_MOVE>
		<TOUCH_OUT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_OUT</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_OUT>
		<TOUCH_OVER public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_OVER</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_OVER>
		<TOUCH_ROLL_OUT public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_ROLL_OUT</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_ROLL_OUT>
		<TOUCH_ROLL_OVER public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_ROLL_OVER</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_ROLL_OVER>
		<TOUCH_TAP public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Defines the value of the <code>type</code> property of a
	 * <code>TOUCH_TAP</code> touch event object.
	 *
	 * <p>The dispatched TouchEvent object has the following properties:</p>]]></haxe_doc>
		</TOUCH_TAP>
		<updateAfterEvent public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Instructs Flash Player or Adobe AIR to render after processing of this
	 * event completes, if the display list has been modified.
	 *</haxe_doc>
		</updateAfterEvent>
		<touchPointID public="1">
			<c path="Int"/>
			<haxe_doc>* A unique identification number (as an int) assigned to the touch point.</haxe_doc>
		</touchPointID>
		<stageY public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The vertical coordinate at which the event occurred in global Stage
	 * coordinates. This property is calculated when the <code>localY</code>
	 * property is set.]]></haxe_doc>
		</stageY>
		<stageX public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The horizontal coordinate at which the event occurred in global Stage
	 * coordinates. This property is calculated when the <code>localX</code>
	 * property is set.]]></haxe_doc>
		</stageX>
		<sizeY public="1">
			<c path="Float"/>
			<haxe_doc>* Height of the contact area.
	 * Only supported on Android (C++ target), in the range of 0-1.</haxe_doc>
		</sizeY>
		<sizeX public="1">
			<c path="Float"/>
			<haxe_doc>* Width of the contact area.
	 * Only supported on Android (C++ target), in the range of 0-1.</haxe_doc>
		</sizeX>
		<shiftKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the Shift key is active (<code>true</code>) or inactive
	 * (<code>false</code>).]]></haxe_doc>
		</shiftKey>
		<relatedObject public="1">
			<c path="nme.display.InteractiveObject"/>
			<haxe_doc><![CDATA[* A reference to a display list object that is related to the event. For
	 * example, when a <code>touchOut</code> event occurs,
	 * <code>relatedObject</code> represents the display list object to which the
	 * pointing device now points. This property applies to the
	 * <code>touchOut</code>, <code>touchOver</code>, <code>touchRollOut</code>,
	 * and <code>touchRollOver</code> events.
	 *
	 * <p>The value of this property can be <code>null</code> in two
	 * circumstances: if there is no related object, or there is a related
	 * object, but it is in a security sandbox to which you don't have access.
	 * Use the <code>isRelatedObjectInaccessible()</code> property to determine
	 * which of these reasons applies.</p>]]></haxe_doc>
		</relatedObject>
		<pressure public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* A value between <code>0.0</code> and <code>1.0</code> indicating force of
	 * the contact with the device. If the device does not support detecting the
	 * pressure, the value is <code>1.0</code>.]]></haxe_doc>
		</pressure>
		<localY public="1">
			<c path="Float"/>
			<haxe_doc>* The vertical coordinate at which the event occurred relative to the
	 * containing sprite.</haxe_doc>
		</localY>
		<localX public="1">
			<c path="Float"/>
			<haxe_doc>* The horizontal coordinate at which the event occurred relative to the
	 * containing sprite.</haxe_doc>
		</localX>
		<isRelatedObjectInaccessible public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* If <code>true</code>, the <code>relatedObject</code> property is set to
	 * <code>null</code> for reasons related to security sandboxes. If the
	 * nominal value of <code>relatedObject</code> is a reference to a
	 * DisplayObject in another sandbox, <code>relatedObject</code> is set to
	 * <code>null</code> unless there is permission in both directions across
	 * this sandbox boundary. Permission is established by calling
	 * <code>Security.allowDomain()</code> from a SWF file, or by providing a
	 * policy file from the server of an image file, and setting the
	 * <code>LoaderContext.checkPolicyFile</code> property when loading the
	 * image.]]></haxe_doc>
		</isRelatedObjectInaccessible>
		<isPrimaryTouchPoint public="1">
			<e path="Bool"/>
			<haxe_doc>* Indicates whether the first point of contact is mapped to mouse events.</haxe_doc>
		</isPrimaryTouchPoint>
		<ctrlKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* On Windows or Linux, indicates whether the Ctrl key is active
	 * (<code>true</code>) or inactive (<code>false</code>). On Macintosh,
	 * indicates whether either the Control key or the Command key is activated.]]></haxe_doc>
		</ctrlKey>
		<altKey public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the Alt key is active (<code>true</code>) or inactive
	 * (<code>false</code>). Supported for Windows and Linux operating systems
	 * only.]]></haxe_doc>
		</altKey>
		<new public="1">
			<f a="type:?bubbles:?cancelable:?touchPointID:?isPrimaryTouchPoint:?localX:?localY:?sizeX:?sizeY:?pressure:?relatedObject:?ctrlKey:?altKey:?shiftKey">
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="Int"/>
				<e path="Bool"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="nme.display.InteractiveObject"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates an Event object that contains information about touch events.
	 * Event objects are passed as parameters to event listeners.
	 * 
	 * @param type                The type of the event. Possible values are:
	 *                            <code>TouchEvent.TOUCH_BEGIN</code>,
	 *                            <code>TouchEvent.TOUCH_END</code>,
	 *                            <code>TouchEvent.TOUCH_MOVE</code>,
	 *                            <code>TouchEvent.TOUCH_OUT</code>,
	 *                            <code>TouchEvent.TOUCH_OVER</code>,
	 *                            <code>TouchEvent.TOUCH_ROLL_OUT</code>,
	 *                            <code>TouchEvent.TOUCH_ROLL_OVER</code>, and
	 *                            <code>TouchEvent.TOUCH_TAP</code>.
	 * @param bubbles             Determines whether the Event object
	 *                            participates in the bubbling phase of the event
	 *                            flow.
	 * @param cancelable          Determines whether the Event object can be
	 *                            canceled.
	 * @param touchPointID        A unique identification number (as an int)
	 *                            assigned to the touch point.
	 * @param isPrimaryTouchPoint Indicates whether the first point of contact is
	 *                            mapped to mouse events.
	 * @param relatedObject       The complementary InteractiveObject instance
	 *                            that is affected by the event. For example,
	 *                            when a <code>touchOut</code> event occurs,
	 *                            <code>relatedObject</code> represents the
	 *                            display list object to which the pointing
	 *                            device now points.
	 * @param ctrlKey             On Windows or Linux, indicates whether the Ctrl
	 *                            key is activated. On Mac, indicates whether
	 *                            either the Ctrl key or the Command key is
	 *                            activated.
	 * @param altKey              Indicates whether the Alt key is activated
	 *                            (Windows or Linux only).
	 * @param shiftKey            Indicates whether the Shift key is activated.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The TouchEvent class lets you handle events on devices that detect user
 * contact with the device (such as a finger on a touch screen). When a user
 * interacts with a device such as a mobile phone or tablet with a touch
 * screen, the user typically touches the screen with his or her fingers or a
 * pointing device. You can develop applications that respond to basic touch
 * events (such as a single finger tap) with the TouchEvent class. Create
 * event listeners using the event types defined in this class. For user
 * interaction with multiple points of contact (such as several fingers moving
 * across a touch screen at the same time) use the related GestureEvent,
 * PressAndTapGestureEvent, and TransformGestureEvent classes. And, use the
 * properties and methods of these classes to construct event handlers that
 * respond to the user touching the device.
 *
 * <p>Use the Multitouch class to determine the current environment's support
 * for touch interaction, and to manage the support of touch interaction if
 * the current environment supports it.</p>
 *
 * <p><b>Note:</b> When objects are nested on the display list, touch events
 * target the deepest possible nested object that is visible in the display
 * list. This object is called the target node. To have a target node's
 * ancestor (an object containing the target node in the display list) receive
 * notification of a touch event, use
 * <code>EventDispatcher.addEventListener()</code> on the ancestor node with
 * the type parameter set to the specific touch event you want to detect.</p>
 *]]></haxe_doc>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="nme.external.ExternalInterface" params="" file="/Users/joshua/Development/Haxe/nme/nme/external/ExternalInterface.hx" extern="1">
		<available public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether this player is in a container that offers an external
	 * interface. If the external interface is available, this property is
	 * <code>true</code>; otherwise, it is <code>false</code>.
	 *
	 * <p><b>Note:</b> When using the External API with HTML, always check that
	 * the HTML has finished loading before you attempt to call any JavaScript
	 * methods.</p>]]></haxe_doc>
		</available>
		<marshallExceptions public="1" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the external interface should attempt to pass
	 * ActionScript exceptions to the current browser and JavaScript exceptions
	 * to the player. You must explicitly set this property to <code>true</code>
	 * to catch JavaScript exceptions in ActionScript and to catch ActionScript
	 * exceptions in JavaScript.]]></haxe_doc>
		</marshallExceptions>
		<objectID public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Returns the <code>id</code> attribute of the <code>object</code> tag in
	 * Internet Explorer, or the <code>name</code> attribute of the
	 * <code>embed</code> tag in Netscape.]]></haxe_doc>
		</objectID>
		<addCallback public="1" set="method" static="1">
			<f a="functionName:closure">
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Registers an ActionScript method as callable from the container. After a
	 * successful invocation of <code>addCallBack()</code>, the registered
	 * function in the player can be called by JavaScript or ActiveX code in the
	 * container.
	 *
	 * <p><b>Note:</b> For <i>local</i> content running in a browser, calls to
	 * the <code>ExternalInterface.addCallback()</code> method work only if the
	 * SWF file and the containing web page are in the local-trusted security
	 * sandbox. For more information, see the Flash Player Developer Center
	 * Topic: <a href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @param functionName The name by which the container can invoke the
	 *                     function.
	 * @param closure      The function closure to invoke. This could be a
	 *                     free-standing function, or it could be a method
	 *                     closure referencing a method of an object instance. By
	 *                     passing a method closure, you can direct the callback
	 *                     at a method of a particular object instance.
	 *
	 *                     <p><b>Note:</b> Repeating <code>addCallback()</code>
	 *                     on an existing callback function with a
	 *                     <code>null</code> closure value removes the
	 *                     callback.</p>
	 * @throws Error         The container does not support incoming calls.
	 *                       Incoming calls are supported only in Internet
	 *                       Explorer for Windows and browsers that use the
	 *                       NPRuntime API such as Mozilla 1.7.5 and later or
	 *                       Firefox 1.0 and later.
	 * @throws SecurityError A callback with the specified name has already been
	 *                       added by ActionScript in a sandbox to which you do
	 *                       not have access; you cannot overwrite that callback.
	 *                       To work around this problem, rewrite the
	 *                       ActionScript that originally called the
	 *                       <code>addCallback()</code> method so that it also
	 *                       calls the <code>Security.allowDomain()</code>
	 *                       method.
	 * @throws SecurityError The containing environment belongs to a security
	 *                       sandbox to which the calling code does not have
	 *                       access. To fix this problem, follow these steps:
	 *                       <ol>
	 *                         <li>In the <code>object</code> tag for the SWF
	 *                       file in the containing HTML page, set the following
	 *                       parameter:
	 *
	 *                       <p><code><param name="allowScriptAccess"
	 *                       value="always" /></code></p>
	 *                       </li>
	 *                         <li>In the SWF file, add the following
	 *                       ActionScript:
	 *
	 *
	 *                       <p><code>nme.system.Security.allowDomain(<i>sourceDomain</i>)</code></p>
	 *                       </li>
	 *                       </ol>]]></haxe_doc>
		</addCallback>
		<call public="1" set="method" static="1">
			<f a="functionName:?p1:?p2:?p3:?p4:?p5">
				<c path="String"/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
				<d/>
			</f>
			<haxe_doc><![CDATA[* Calls a function exposed by the SWF container, passing zero or more
	 * arguments. If the function is not available, the call returns
	 * <code>null</code>; otherwise it returns the value provided by the
	 * function. Recursion is <i>not</i> permitted on Opera or Netscape browsers;
	 * on these browsers a recursive call produces a <code>null</code> response.
	 * (Recursion is supported on Internet Explorer and Firefox browsers.)
	 *
	 * <p>If the container is an HTML page, this method invokes a JavaScript
	 * function in a <code>script</code> element.</p>
	 *
	 * <p>If the container is another ActiveX container, this method dispatches
	 * the FlashCall ActiveX event with the specified name, and the container
	 * processes the event.</p>
	 *
	 * <p>If the container is hosting the Netscape plug-in, you can either write
	 * custom support for the new NPRuntime interface or embed an HTML control
	 * and embed the player within the HTML control. If you embed an HTML
	 * control, you can communicate with the player through a JavaScript
	 * interface to the native container application.</p>
	 *
	 * <p><b>Note:</b> For <i>local</i> content running in a browser, calls to
	 * the <code>ExternalInterface.call()</code> method are permitted only if the
	 * SWF file and the containing web page (if there is one) are in the
	 * local-trusted security sandbox. Also, you can prevent a SWF file from
	 * using this method by setting the <code>allowNetworking</code> parameter of
	 * the <code>object</code> and <code>embed</code> tags in the HTML page that
	 * contains the SWF content. For more information, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 *
	 * <p><b>Note for Flash Player applications:</b> In Flash Player 10 and Flash
	 * Player 9 Update 5, some web browsers restrict this method if a pop-up
	 * blocker is enabled. In this scenario, you can only call this method
	 * successfully in response to a user event (for example, in an event handler
	 * for a mouse click or keypress event).</p>
	 * 
	 * @param functionName The alphanumeric name of the function to call in the
	 *                     container. Using a non-alphanumeric function name
	 *                     causes a runtime error (error 2155). You can use a
	 *                     <code>try..catch</code> block to handle the error.
	 * @return The response received from the container. If the call failed–
	 *         for example, if there is no such function in the container, the
	 *         interface is not available, a recursion occurred (with a Netscape
	 *         or Opera browser), or there is a security issue–
	 *         <code>null</code> is returned and an error is thrown.
	 * @throws Error         The container does not support outgoing calls.
	 *                       Outgoing calls are supported only in Internet
	 *                       Explorer for Windows and browsers that use the
	 *                       NPRuntime API such as Mozilla 1.7.5 and later or
	 *                       Firefox 1.0 and later.
	 * @throws SecurityError The containing environment belongs to a security
	 *                       sandbox to which the calling code does not have
	 *                       access. To fix this problem, follow these steps:
	 *                       <ol>
	 *                         <li>In the <code>object</code> tag for the SWF
	 *                       file in the containing HTML page, set the following
	 *                       parameter:
	 *
	 *                       <p><code><param name="allowScriptAccess"
	 *                       value="always" /></code></p>
	 *                       </li>
	 *                         <li>In the SWF file, add the following
	 *                       ActionScript:
	 *
	 *
	 *                       <p><code>nme.system.Security.allowDomain(<i>sourceDomain</i>)</code></p>
	 *                       </li>
	 *                       </ol>]]></haxe_doc>
		</call>
		<haxe_doc><![CDATA[* The ExternalInterface class is an application programming interface that
 * enables straightforward communication between ActionScript and the SWF
 * container– for example, an HTML page with JavaScript or a desktop
 * application that uses Flash Player to display a SWF file.
 *
 * <p>Using the ExternalInterface class, you can call an ActionScript function
 * in the Flash runtime, using JavaScript in the HTML page. The ActionScript
 * function can return a value, and JavaScript receives it immediately as the
 * return value of the call.</p>
 *
 * <p>This functionality replaces the <code>fscommand()</code> method.</p>
 *
 * <p>Use the ExternalInterface class in the following combinations of browser
 * and operating system:</p>
 *
 * <p>The ExternalInterface class requires the user's web browser to support
 * either ActiveX<sup>®</sup> or the NPRuntime API that is exposed by some
 * browsers for plug-in scripting. Even if a browser and operating system
 * combination are not listed above, they should support the ExternalInterface
 * class if they support the NPRuntime API. See <a
 * href="http://www.mozilla.org/projects/plugins/npruntime.html"
 * scope="external">http://www.mozilla.org/projects/plugins/npruntime.html</a>.</p>
 *
 * <p><b>Note:</b> When embedding SWF files within an HTML page, make sure
 * that the <code>id</code> attribute is set and the <code>id</code> and
 * <code>name</code> attributes of the <code>object</code> and
 * <code>embed</code> tags do not include the following characters:</p>
 * <pre xml:space="preserve"> . - + ~~ / \ </pre>
 *
 * <p><b>Note for Flash Player applications:</b> Flash Player version
 * 9.0.115.0 and later allows the <code>.</code> (period) character within the
 * <code>id</code> and <code>name</code> attributes.</p>
 *
 * <p><b>Note for Flash Player applications:</b> In Flash Player 10 and later
 * running in a browser, using this class programmatically to open a pop-up
 * window may not be successful. Various browsers (and browser configurations)
 * may block pop-up windows at any time; it is not possible to guarantee any
 * pop-up window will appear. However, for the best chance of success, use
 * this class to open a pop-up window only in code that executes as a direct
 * result of a user action (for example, in an event handler for a mouse click
 * or key-press event.)</p>
 *
 * <p>From ActionScript, you can do the following on the HTML page:
 * <ul>
 *   <li>Call any JavaScript function.</li>
 *   <li>Pass any number of arguments, with any names.</li>
 *   <li>Pass various data types (Boolean, Number, String, and so on).</li>
 *   <li>Receive a return value from the JavaScript function.</li>
 * </ul>
 * </p>
 *
 * <p>From JavaScript on the HTML page, you can:
 * <ul>
 *   <li>Call an ActionScript function.</li>
 *   <li>Pass arguments using standard function call notation.</li>
 *   <li>Return a value to the JavaScript function.</li>
 * </ul>
 * </p>
 *
 * <p><b>Note for Flash Player applications:</b> Flash Player does not
 * currently support SWF files embedded within HTML forms.</p>
 *
 * <p><b>Note for AIR applications:</b> In Adobe AIR, the ExternalInterface
 * class can be used to communicate between JavaScript in an HTML page loaded
 * in the HTMLLoader control and ActionScript in SWF content embedded in that
 * HTML page.</p>]]></haxe_doc>
	</class>
	<class path="nme.feedback.Haptic" params="" file="/Users/joshua/Development/Haxe/nme/nme/feedback/Haptic.hx" extern="1"><vibrate public="1" set="method" static="1"><f a="?period:?duration">
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></vibrate></class>
	<class path="nme.filesystem.File" params="" file="/Users/joshua/Development/Haxe/nme/nme/filesystem/File.hx" extern="1">
		<applicationDirectory public="1" get="nmeGetAppDir" set="null" static="1">
			<c path="nme.filesystem.File"/>
			<haxe_doc><![CDATA[* The folder containing the application's installed files.
	 *
	 * <p>The <code>url</code> property for this object uses the <code>app</code>
	 * URL scheme (not the <code>file</code> URL scheme). This means that the
	 * <code>url</code> string is specified starting with <code>"app:"</code>
	 * (not <code>"file:"</code>). Also, if you create a File object relative to
	 * the <code>File.applicationDirectory</code> directory (by using the
	 * <code>resolvePath()</code> method), the <code>url</code> property of the
	 * File object also uses the <code>app</code> URL scheme. </p>
	 *
	 * <p><i>Note:</i> You cannot write to files or directories that have paths
	 * that use the <code>app:</code> URL scheme. Also, you cannot delete or
	 * create files or folders that have paths that use the <code>app:</code> URL
	 * scheme. Modifying content in the application directory is a bad practice,
	 * for security reasons, and is blocked by the operating system on some
	 * platforms. If you want to store application-specific data, consider using
	 * the application storage directory
	 * (<code>File.applicationStorageDirectory</code>). If you want any of the
	 * content in the application storage directory to have access to the
	 * application-privileged functionality (AIR APIs), you can expose that
	 * functionality by using a sandbox bridge.</p>
	 *
	 * <p>The <code>applicationDirectory</code> property provides a way to
	 * reference the application directory that works across platforms. If you
	 * set a File object to reference the application directory using the
	 * <code>nativePath</code> or <code>url</code> property, it will only work on
	 * the platform for which that path is valid.</p>
	 *
	 * <p>On Android, the <code>nativePath</code> property of a File object
	 * pointing to the application directory is an empty string. Use the
	 * <code>url</code> property to access application files.</p>]]></haxe_doc>
		</applicationDirectory>
		<applicationStorageDirectory public="1" get="nmeGetStorageDir" set="null" static="1">
			<c path="nme.filesystem.File"/>
			<haxe_doc><![CDATA[* The application's private storage directory.
	 *
	 * <p>Each AIR application has a unique, persistent application storage
	 * directory, which is created when you first access
	 * <code>File.applicationStorageDirectory</code>. This directory is a
	 * convenient location to store application-specific data.</p>
	 *
	 * <p>When you uninstall an AIR application, whether the uninstaller deletes
	 * the application storage directory and its files depends on the
	 * platform.</p>
	 *
	 * <p>The <code>url</code> property for this object uses the
	 * <code>app-storage</code> URL scheme (not the <code>file</code> URL
	 * scheme). This means that the <code>url</code> string is specified starting
	 * with <code>"app-storage:"</code> (not <code>"file:"</code>). Also, if you
	 * create a File object relative to the
	 * <code>File.applicationStoreDirectory</code> directory (by using the
	 * <code>resolvePath()</code> method), the <code>url</code> of the File
	 * object also uses the <code>app-storage</code> URL scheme (as in the
	 * example).</p>
	 *
	 * <p>The <code>applicationStorageDirectory</code> property provides a way to
	 * reference the application storage directory that works across platforms.
	 * If you set a File object to reference the application storage directory
	 * using the <code>nativePath</code> or <code>url</code> property, it will
	 * only work on the platform for which that path is valid.</p>]]></haxe_doc>
		</applicationStorageDirectory>
		<desktopDirectory public="1" get="nmeGetDesktopDir" set="null" static="1">
			<c path="nme.filesystem.File"/>
			<haxe_doc><![CDATA[* The user's desktop directory.
	 *
	 * <p>The <code>desktopDirectory</code> property provides a way to reference
	 * the desktop directory that works across platforms. If you set a File
	 * object to reference the desktop directory using the
	 * <code>nativePath</code> or <code>url</code> property, it will only work on
	 * the platform for which that path is valid.</p>
	 *
	 * <p>If an operating system does not support a desktop directory, a suitable
	 * directory in the file system is used instead.</p>
	 *
	 * <p>AIR for TV devices have no concept of a user's desktop directory.
	 * Therefore, the <code>desktopDirectory</code> property references the same
	 * directory location as <code>File.userDirectory</code> property. The user
	 * directory is unique to the application.</p>]]></haxe_doc>
		</desktopDirectory>
		<documentsDirectory public="1" get="nmeGetDocsDir" set="null" static="1">
			<c path="nme.filesystem.File"/>
			<haxe_doc><![CDATA[* The user's documents directory.
	 *
	 * <p>On Windows, this is the My Documents directory (for example,
	 * C:\Documents and Settings\userName\My Documents). On Mac OS, the default
	 * location is /Users/userName/Documents. On Linux, the default location is
	 * /home/userName/Documents (on an English system), and the property observes
	 * the <code>xdg-user-dirs</code> setting.</p>
	 *
	 * <p>The <code>documentsDirectory</code> property provides a way to
	 * reference the documents directory that works across platforms. If you set
	 * a File object to reference the documents directory using the
	 * <code>nativePath</code> or <code>url</code> property, it will only work on
	 * the platform for which that path is valid.</p>
	 *
	 * <p>If an operating system does not support a documents directory, a
	 * suitable directory in the file system is used instead.</p>
	 *
	 * <p>AIR for TV devices have no concept of a user's documents directory.
	 * Therefore, the <code>documentsDirectory</code> property references the
	 * same directory location as the <code>File.userDirectory</code> property.
	 * The user directory is unique to the application.</p>]]></haxe_doc>
		</documentsDirectory>
		<userDirectory public="1" get="nmeGetUserDir" set="null" static="1">
			<c path="nme.filesystem.File"/>
			<haxe_doc><![CDATA[* The user's directory.
	 *
	 * <p>On Windows, this is the parent of the My Documents directory (for
	 * example, C:\Documents and Settings\userName). On Mac OS, it is
	 * /Users/userName. On Linux, it is /home/userName.</p>
	 *
	 * <p>The <code>userDirectory</code> property provides a way to reference the
	 * user directory that works across platforms. If you set the
	 * <code>nativePath</code> or <code>url</code> property of a File object
	 * directly, it will only work on the platform for which that path is
	 * valid.</p>
	 *
	 * <p>If an operating system does not support a user directory, a suitable
	 * directory in the file system is used instead.</p>
	 *
	 * <p>On AIR for TV devices, the <code>userDirectory</code> property
	 * references a user directory that is unique to the application.</p>]]></haxe_doc>
		</userDirectory>
		<url public="1" set="nmeSetURL">
			<c path="String"/>
			<haxe_doc><![CDATA[* The URL for this file path.
	 *
	 * <p>If this is a reference to a path in the application storage directory,
	 * the URL scheme is <code>"app-storage"</code>; if it is a reference to a
	 * path in the application directory, the URL scheme is <code>"app"</code>;
	 * otherwise the scheme is <code>"file"</code>. </p>
	 *
	 * <p>You can use blank space characters (rather than <code>"%20"</code>)
	 * when <i>assigning</i> a value to the <code>url</code> property; AIR
	 * automatically encodes the strings (for instance, converting spaces to
	 * <code>"%20"</code>).</p>
	 * 
	 * @throws ArgumentError The URL syntax is invalid.
	 * @throws SecurityError The caller is not in the application security
	 *                       sandbox.]]></haxe_doc>
		</url>
		<nativePath public="1" set="nmeSetNativePath">
			<c path="String"/>
			<haxe_doc><![CDATA[* The full path in the host operating system representation. On Mac OS and
	 * Linux, the forward slash (/) character is used as the path separator.
	 * However, in Windows, you can <i>set</i> the <code>nativePath</code>
	 * property by using the forward slash character or the backslash (\)
	 * character as the path separator, and AIR automatically replaces forward
	 * slashes with the appropriate backslash character.
	 *
	 * <p>Before writing code to <i>set</i> the <code>nativePath</code> property
	 * directly, consider whether doing so may result in platform-specific code.
	 * For example, a native path such as <code>"C:\\Documents and
	 * Settings\\bob\\Desktop"</code> is only valid on Windows. It is far better
	 * to use the following static properties, which represent commonly used
	 * directories, and which are valid on all platforms:</p>
	 *
	 * <ul>
	 *   <li><code>File.applicationDirectory</code></li>
	 *   <li><code>File.applicationStorageDirectory</code></li>
	 *   <li><code>File.desktopDirectory</code></li>
	 *   <li><code>File.documentsDirectory</code></li>
	 *   <li><code>File.userDirectory</code></li>
	 * </ul>
	 *
	 * <p>You can use the <code>resolvePath()</code> method to get a path
	 * relative to these directories.</p>
	 *
	 * <p>Some Flex APIs, such as the <code>source</code> property of the
	 * SWFLoader class, use a URL (the <code>url</code> property of a File
	 * object), not a native path (the <code>nativePath</code> property).</p>
	 * 
	 * @throws ArgumentError The syntax of the path is invalid.
	 * @throws SecurityError The caller is not in the application security
	 *                       sandbox.]]></haxe_doc>
		</nativePath>
		<new public="1" set="method">
			<f a="?path">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* The constructor function for the File class.
	 *
	 * <p>If you pass a <code>path</code> argument, the File object points to the
	 * specified path, and the <code>nativePath</code> property and and
	 * <code>url</code> property are set to reflect that path.</p>
	 *
	 * <p>Although you can pass a <code>path</code> argument to specify a file
	 * path, consider whether doing so may result in platform-specific code. For
	 * example, a native path such as <code>"C:\\Documents and
	 * Settings\\bob\\Desktop"</code> or a URL such as
	 * <code>"file:///C:/Documents%20and%20Settings/bob/Desktop"</code> is only
	 * valid on Windows. It is far better to use the following static properties,
	 * which represent commonly used directories, and which are valid on all
	 * platforms:</p>
	 *
	 * <ul>
	 *   <li><code>File.applicationDirectory</code></li>
	 *   <li><code>File.applicationStorageDirectory</code></li>
	 *   <li><code>File.desktopDirectory</code></li>
	 *   <li><code>File.documentsDirectory</code></li>
	 *   <li><code>File.userDirectory</code></li>
	 * </ul>
	 *
	 * <p>You can then use the <code>resolvePath()</code> method to get a path
	 * relative to these directories. For example, the following code sets up a
	 * File object to point to the settings.xml file in the application storage
	 * directory:</p>
	 * 
	 * @param path The path to the file. You can specify the path by using either
	 *             a URL or native path (platform-specific) notation.
	 *
	 *             <p>If you specify a URL, you can use any of the following URL
	 *             schemes: <code>file</code>, <code>app</code>, or
	 *             <code>app-storage</code>. The following are valid values for
	 *             the <code>path</code> parameter using URL notation: </p>
	 *
	 *             <ul>
	 *               <li><code>"app:/DesktopPathTest.xml"</code></li>
	 *               <li><code>"app-storage:/preferences.xml"</code></li>
	 *
	 *             <li><code>"file:///C:/Documents%20and%20Settings/bob/Desktop"</code>
	 *             (the desktop on Bob's Windows computer)</li>
	 *               <li><code>"file:///Users/bob/Desktop"</code> (the desktop on
	 *             Bob's Mac computer)</li>
	 *             </ul>
	 *
	 *             <p>The <code>app</code> and <code>app-storage</code> URL
	 *             schemes are useful because they can point to a valid file on
	 *             all file systems. However, in the other two examples, which
	 *             use the <code>file</code> URL scheme to point to the user's
	 *             desktop directory, it would be better to pass <i>no</i>
	 *             <code>path</code> argument to the <code>File()</code>
	 *             constructor and then assign <code>File.desktopDirectory</code>
	 *             to the File object, as a way to access the desktop directory
	 *             that is both platform- and user-independent.</p>
	 *
	 *             <p>If you specify a native path, on Windows you can use either
	 *             the backslash character or the forward slash character as the
	 *             path separator in this argument; on Mac OS and Linux, use the
	 *             forward slash. The following are valid values for the
	 *             <code>path</code> parameter using native path notation:</p>
	 *
	 *             <ul>
	 *               <li><code>"C:/Documents and
	 *             Settings/bob/Desktop"</code></li>
	 *               <li><code>"/Users/bob/Desktop"</code></li>
	 *             </ul>
	 *
	 *             <p>However, for these two examples, you should pass <i>no</i>
	 *             <code>path</code> argument to the <code>File()</code>
	 *             constructor and then assign <code>File.desktopDirectory</code>
	 *             to the File object, as a way to access the desktop directory
	 *             that is both platform- and user-independent.</p>
	 * @throws ArgumentError The syntax of the <code>path</code> parameter is
	 *                       invalid.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A File object represents a path to a file or directory. This can be an
 * existing file or directory, or it can be one that does not yet exist; for
 * instance, it can represent the path to a file or directory that you plan to
 * create.
 *
 * <p>The File class has a number of properties and methods for getting
 * information about the file system and for performing operations, such as
 * copying files and directories.</p>
 *
 * <p>You can use File objects along with the FileStream class to read and
 * write files. </p>
 *
 * <p>The File class extends the FileReference class. The FileReference class,
 * which is available in Flash<sup>®</sup> Player as well as
 * Adobe<sup>®</sup> AIR<sup>®</sup>, represents a pointer to a file, but
 * the File class adds properties and methods that are not exposed in Flash
 * Player (in a SWF running in a browser), due to security considerations.</p>
 *
 * <p>The File class includes static properties that let you reference
 * commonly used directory locations. These static properties include:</p>
 *
 * <ul>
 *   <li><code>File.applicationStorageDirectory</code> - a storage directory
 * unique to each installed AIR application</li>
 *   <li><code>File.applicationDirectory</code> - the read-only directory
 * where the application is installed (along with any installed assets)</li>
 *   <li><code>File.desktopDirectory</code> - the user's desktop
 * directory</li>
 *   <li><code>File.documentsDirectory</code> - the user's documents
 * directory</li>
 *   <li><code>File.userDirectory</code> - the user directory</li>
 * </ul>
 *
 * <p>These properties have meaningful values on different operating systems.
 * For example, Mac OS, Linux, and Windows each have different native paths to
 * the user's desktop directory. However, the
 * <code>File.desktopDirectory</code> property points to the correct desktop
 * directory path on each of these platforms. To write applications that work
 * well across platforms, use these properties as the basis for referencing
 * other files used by the application. Then use the
 * <code>resolvePath()</code> method to refine the path. For example, this
 * code points to the preferences.xml file in the application storage
 * directory:</p>
 *
 * <p>The application storage directory is particularly useful. It gives an
 * application-specific storage directory for the AIR application. It is
 * defined by the <code>File.applicationStorageDirectory</code> property.</p>
 *
 * <p>Do not add or remove content from the application directory (where the
 * AIR application is installed). Doing so can break an AIR application and
 * invalidate the application signature. AIR does not let you write to the
 * application directory by default, because the directory is not writable to
 * all user accounts on all operating systems. Use the application storage
 * directory to write internal application files. Use the documents directory
 * to write files that a user expects to use outside your application, such as
 * edited pictures or text files.</p>
 * 
 * @event cancel           Dispatched when a pending asynchronous operation is
 *                         canceled.
 * @event complete         Dispatched when an asynchronous operation is
 *                         complete.
 * @event directoryListing Dispatched when a directory list is available as a
 *                         result of a call to the
 *                         <code>getDirectoryListingAsync()</code> method.
 * @event ioError          Dispatched when an error occurs during an
 *                         asynchronous file operation.
 * @event securityError    Dispatched when an operation violates a security
 *                         constraint.
 * @event select           Dispatched when the user selects a file or
 *                         directory from a file- or directory-browsing dialog
 *                         box.
 * @event selectMultiple   Dispatched when the user selects files from the
 *                         dialog box opened by a call to the
 *                         <code>browseForOpenMultiple()</code> method.]]></haxe_doc>
	</class>
	<class path="nme.filesystem.StorageVolume" params="" file="/Users/joshua/Development/Haxe/nme/nme/filesystem/StorageVolume.hx" extern="1">
		<rootDirectory public="1" set="null">
			<c path="nme.filesystem.File"/>
			<haxe_doc>* A File object corresponding to the root directory of the volume.</haxe_doc>
		</rootDirectory>
		<name public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The name of the volume. If there is no name, this property is set to
	 * <code>null</code>.]]></haxe_doc>
		</name>
		<isWritable public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Whether a volume is writable (<code>true</code>) or not
	 * (<code>false</code>).
	 *
	 * <p><b>Note:</b> You can determine the amount of space available on a
	 * volume by calling the <code>rootDirectory.spaceAvailble</code> property of
	 * the StorageVolume object.</p>]]></haxe_doc>
		</isWritable>
		<isRemovable public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Whether the operating system considers the storage volume to be removable
	 * (<code>true</code>) or not (<code>false</code>).
	 *
	 * <p>The following table lists the values
	 * <code>StorageVolume.isRemovable</code> property for various types of
	 * devices:</p>
	 *
	 * <p><sup>1</sup> Linux does not have a concept of a shared volume.</p>
	 *
	 * <p><sup>2</sup> On Windows, an empty card reader is listed as a
	 * non-removable device. On Mac OS and Linux, empty car readers are not
	 * listed as storage volumes.</p>]]></haxe_doc>
		</isRemovable>
		<fileSystemType public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The type of file system on the storage volume (such as <code>"FAT"</code>,
	 * <code>"NTFS"</code>, <code>"HFS"</code>, or <code>"UFS"</code>).]]></haxe_doc>
		</fileSystemType>
		<drive public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The volume drive letter on Windows. On other platforms, this property is
	 * set to <code>null</code>.]]></haxe_doc>
		</drive>
		<new public="1" set="method">
			<f a="inRootDirPath:inName:inWritable:inRemovable:inFileSysType:inDrive">
				<c path="nme.filesystem.File"/>
				<c path="String"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* The constructor function. Generally, you do not call this constructor
	 * function directly (to create new StorageVolume objects). Rather, you
	 * reference StorageVolume objects by accessing the
	 * <code>storageVolume</code> property of a StorageVolumeChangeEvent object
	 * or by calling
	 * <code>StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</code>.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A StorageVolume object includes properties defining a mass storage volume.
 * This class is used in two ways:
 * <ul>
 *   <li>The <code>storageVolume</code> property of a StorageVolumeChangeEvent
 * object is a StorageVolume object. This object represents the storage volume
 * that has been mounted or unmounted.</li>
 *   <li>The
 * <code>StorageVolumeInfo.storageVolumeInfo.getStorageVolumes()</code> method
 * returns a vector of StorageVolume objects. Each of these StorageVolume
 * objects represents a mounted storage volume.</li>
 * </ul>]]></haxe_doc>
	</class>
	<class path="nme.filesystem.StorageVolumeInfo" params="" file="/Users/joshua/Development/Haxe/nme/nme/filesystem/StorageVolumeInfo.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<unknown/>
			<haxe_doc><![CDATA[* The <code>isSupported</code> property is set to <code>true</code> if the
    * StorageVolumeInfo class is supported on the current platform, otherwise
    * it is set to <code>false</code>.]]></haxe_doc>
		</isSupported>
		<storageVolumeInfo public="1" get="getInstance" set="null" static="1">
			<c path="nme.filesystem.StorageVolumeInfo"/>
			<haxe_doc><![CDATA[* The singleton instance of the StorageVolumeInfo object. Register event
    * listeners on this object for the <code>storageVolumeMount</code> and
    * <code>storageVolumeUnmount</code> events.]]></haxe_doc>
		</storageVolumeInfo>
		<getInstance public="1" set="method" static="1"><f a=""><c path="nme.filesystem.StorageVolumeInfo"/></f></getInstance>
		<getStorageVolumes public="1" set="method">
			<f a=""><c path="Array"><c path="nme.filesystem.StorageVolume"/></c></f>
			<haxe_doc><![CDATA[* Returns vector of StorageVolume objects corresponding to the currently
    * mounted storage volumes.
    *
    * <p>On modern Linux distributions, this method returns objects
    * corresponding to physical devices and network drives mounted at
    * particular locations.</p>
    *]]></haxe_doc>
		</getStorageVolumes>
		<haxe_doc><![CDATA[* The StorageVolumeInfo object dispatches a StorageVolumeChangeEvent object
 * when a storage volume is mounted or unmounted. The
 * <code>StorageVolume.storageVolume</code> static property references the
 * singleton StorageVolumeInfo object, which dispatches the events. The
 * StorageVolumeInfo class also defines a <code>getStorageVolumes</code>
 * method for listing currently mounted storage volumes.
 *
 * <p><i>AIR profile support:</i> This feature is supported on all desktop
 * operating systems, but it is not supported on all AIR for TV devices. It is
 * also not supported on mobile devices. You can test for support at run time
 * using the <code>StorageVolumeInfo.isSupported</code> property. See <a
 * href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html">
 * AIR Profile Support</a> for more information regarding API support across
 * multiple profiles.</p>
 *
 * <p>On modern Linux distributions, the StorageVolumeInfo object only
 * dispatches <code>storageVolumeMount</code> and
 * <code>storageVolumeUnmount</code> events for physical devices and network
 * drives mounted at particular locations.</p>
 * 
 * @event storageVolumeMount   Dispatched when a storage volume has been
 *                             mounted.
 *
 *                             <p>On modern Linux distributions, the
 *                             StorageVolumeInfo object only dispatches
 *                             <code>storageVolumeMount</code> and
 *                             <code>storageVolumeUnmount</code> events for
 *                             physical devices and network drives mounted at
 *                             particular locations.</p>
 * @event storageVolumeUnmount Dispatched when a storage volume has been
 *                             unmounted.
 *
 *                             <p>On modern Linux distributions, the
 *                             StorageVolumeInfo object only dispatches
 *                             <code>storageVolumeMount</code> and
 *                             <code>storageVolumeUnmount</code> events for
 *                             physical devices and network drives mounted at
 *                             particular locations.</p>]]></haxe_doc>
	</class>
	<class path="nme.filters.BitmapFilter" params="" file="/Users/joshua/Development/Haxe/nme/nme/filters/BitmapFilter.hx" extern="1">
		<clone public="1" set="method">
			<f a=""><c path="nme.filters.BitmapFilter"/></f>
			<haxe_doc>* Returns a BitmapFilter object that is an exact copy of the original
	 * BitmapFilter object.
	 * 
	 * @return A BitmapFilter object.</haxe_doc>
		</clone>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc><![CDATA[* The BitmapFilter class is the base class for all image filter effects.
 *
 * <p>The BevelFilter, BlurFilter, ColorMatrixFilter, ConvolutionFilter,
 * DisplacementMapFilter, DropShadowFilter, GlowFilter, GradientBevelFilter,
 * and GradientGlowFilter classes all extend the BitmapFilter class. You can
 * apply these filter effects to any display object.</p>
 *
 * <p>You can neither directly instantiate nor extend BitmapFilter.</p>]]></haxe_doc>
	</class>
	<class path="nme.filters.BitmapFilterQuality" params="" file="/Users/joshua/Development/Haxe/nme/nme/filters/BitmapFilterQuality.hx" extern="1">
		<HIGH public="1" get="inline" set="null" line="14" static="1">
			<c path="Int"/>
			<haxe_doc>* Defines the high quality filter setting.</haxe_doc>
		</HIGH>
		<LOW public="1" get="inline" set="null" line="19" static="1">
			<c path="Int"/>
			<haxe_doc>* Defines the low quality filter setting.</haxe_doc>
		</LOW>
		<MEDIUM public="1" get="inline" set="null" line="24" static="1">
			<c path="Int"/>
			<haxe_doc>* Defines the medium quality filter setting.</haxe_doc>
		</MEDIUM>
		<haxe_doc>* The BitmapFilterQuality class contains values to set the rendering quality
 * of a BitmapFilter object.</haxe_doc>
	</class>
	<enum path="nme.filters.BitmapFilterType" params="" file="/Users/joshua/Development/Haxe/nme/nme/filters/BitmapFilterType.hx">
		<OUTER><haxe_doc>* Defines the setting that applies a filter to the outer area of an object.</haxe_doc></OUTER>
		<INNER><haxe_doc>* Defines the setting that applies a filter to the inner area of an object.</haxe_doc></INNER>
		<FULL><haxe_doc>* Defines the setting that applies a filter to the entire area of an object.</haxe_doc></FULL>
		<haxe_doc>* The BitmapFilterType class contains values to set the type of a
 * BitmapFilter.</haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.filters.BlurFilter" params="" file="/Users/joshua/Development/Haxe/nme/nme/filters/BlurFilter.hx" extern="1">
		<extends path="nme.filters.BitmapFilter"/>
		<quality public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of times to perform the blur. The default value is
	 * <code>BitmapFilterQuality.LOW</code>, which is equivalent to applying the
	 * filter once. The value <code>BitmapFilterQuality.MEDIUM</code> applies the
	 * filter twice; the value <code>BitmapFilterQuality.HIGH</code> applies it
	 * three times and approximates a Gaussian blur. Filters with lower values
	 * are rendered more quickly.
	 *
	 * <p>For most applications, a <code>quality</code> value of low, medium, or
	 * high is sufficient. Although you can use additional numeric values up to
	 * 15 to increase the number of times the blur is applied, higher values are
	 * rendered more slowly. Instead of increasing the value of
	 * <code>quality</code>, you can often get a similar effect, and with faster
	 * rendering, by simply increasing the values of the <code>blurX</code> and
	 * <code>blurY</code> properties.</p>
	 *
	 * <p>You can use the following BitmapFilterQuality constants to specify
	 * values of the <code>quality</code> property:</p>
	 *
	 * <ul>
	 *   <li><code>BitmapFilterQuality.LOW</code></li>
	 *   <li><code>BitmapFilterQuality.MEDIUM</code></li>
	 *   <li><code>BitmapFilterQuality.HIGH</code></li>
	 * </ul>]]></haxe_doc>
		</quality>
		<blurY public="1">
			<c path="Float"/>
			<haxe_doc>* The amount of vertical blur. Valid values are from 0 to 255 (floating
	 * point). The default value is 4. Values that are a power of 2 (such as 2,
	 * 4, 8, 16 and 32) are optimized to render more quickly than other values.</haxe_doc>
		</blurY>
		<blurX public="1">
			<c path="Float"/>
			<haxe_doc>* The amount of horizontal blur. Valid values are from 0 to 255 (floating
	 * point). The default value is 4. Values that are a power of 2 (such as 2,
	 * 4, 8, 16 and 32) are optimized to render more quickly than other values.</haxe_doc>
		</blurX>
		<new public="1" set="method">
			<f a="?blurX:?blurY:?quality">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Initializes the filter with the specified parameters. The default values
	 * create a soft, unfocused image.
	 * 
	 * @param blurX   The amount to blur horizontally. Valid values are from 0 to
	 *                255.0 (floating-point value).
	 * @param blurY   The amount to blur vertically. Valid values are from 0 to
	 *                255.0 (floating-point value).
	 * @param quality The number of times to apply the filter. You can specify
	 *                the quality using the BitmapFilterQuality constants:
	 *                <ul>
	 *
	 *                <li><code>nme.filters.BitmapFilterQuality.LOW</code></li>
	 *
	 *                <li><code>nme.filters.BitmapFilterQuality.MEDIUM</code></li>
	 *
	 *                <li><code>nme.filters.BitmapFilterQuality.HIGH</code></li>
	 *                </ul>
	 *
	 *                <p>High quality approximates a Gaussian blur. For most
	 *                applications, these three values are sufficient. Although
	 *                you can use additional numeric values up to 15 to achieve
	 *                different effects, be aware that higher values are rendered
	 *                more slowly.</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The BlurFilter class lets you apply a blur visual effect to display
 * objects. A blur effect softens the details of an image. You can produce
 * blurs that range from a softly unfocused look to a Gaussian blur, a hazy
 * appearance like viewing an image through semi-opaque glass. When the
 * <code>quality</code> property of this filter is set to low, the result is a
 * softly unfocused look. When the <code>quality</code> property is set to
 * high, it approximates a Gaussian blur filter. You can apply the filter to
 * any display object (that is, objects that inherit from the DisplayObject
 * class), such as MovieClip, SimpleButton, TextField, and Video objects, as
 * well as to BitmapData objects.
 *
 * <p>To create a new filter, use the constructor <code>new
 * BlurFilter()</code>. The use of filters depends on the object to which you
 * apply the filter:</p>
 *
 * <ul>
 *   <li>To apply filters to movie clips, text fields, buttons, and video, use
 * the <code>filters</code> property (inherited from DisplayObject). Setting
 * the <code>filters</code> property of an object does not modify the object,
 * and you can remove the filter by clearing the <code>filters</code>
 * property. </li>
 *   <li>To apply filters to BitmapData objects, use the
 * <code>BitmapData.applyFilter()</code> method. Calling
 * <code>applyFilter()</code> on a BitmapData object takes the source
 * BitmapData object and the filter object and generates a filtered image as a
 * result.</li>
 * </ul>
 *
 * <p>If you apply a filter to a display object, the
 * <code>cacheAsBitmap</code> property of the display object is set to
 * <code>true</code>. If you remove all filters, the original value of
 * <code>cacheAsBitmap</code> is restored.</p>
 *
 * <p>This filter supports Stage scaling. However, it does not support general
 * scaling, rotation, and skewing. If the object itself is scaled
 * (<code>scaleX</code> and <code>scaleY</code> are not set to 100%), the
 * filter effect is not scaled. It is scaled only when the user zooms in on
 * the Stage.</p>
 *
 * <p>A filter is not applied if the resulting image exceeds the maximum
 * dimensions. In AIR 1.5 and Flash Player 10, the maximum is 8,191 pixels in
 * width or height, and the total number of pixels cannot exceed 16,777,215
 * pixels. (So, if an image is 8,191 pixels wide, it can only be 2,048 pixels
 * high.) In Flash Player 9 and earlier and AIR 1.1 and earlier, the
 * limitation is 2,880 pixels in height and 2,880 pixels in width. If, for
 * example, you zoom in on a large movie clip with a filter applied, the
 * filter is turned off if the resulting image exceeds the maximum
 * dimensions.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.filters.DropShadowFilter" params="" file="/Users/joshua/Development/Haxe/nme/nme/filters/DropShadowFilter.hx" extern="1">
		<extends path="nme.filters.BitmapFilter"/>
		<strength public="1">
			<c path="Float"/>
			<haxe_doc>* The strength of the imprint or spread. The higher the value, the more
	 * color is imprinted and the stronger the contrast between the shadow and
	 * the background. Valid values are from 0 to 255.0. The default is 1.0.</haxe_doc>
		</strength>
		<quality public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of times to apply the filter. The default value is
	 * <code>BitmapFilterQuality.LOW</code>, which is equivalent to applying the
	 * filter once. The value <code>BitmapFilterQuality.MEDIUM</code> applies the
	 * filter twice; the value <code>BitmapFilterQuality.HIGH</code> applies it
	 * three times. Filters with lower values are rendered more quickly.
	 *
	 * <p>For most applications, a quality value of low, medium, or high is
	 * sufficient. Although you can use additional numeric values up to 15 to
	 * achieve different effects, higher values are rendered more slowly. Instead
	 * of increasing the value of <code>quality</code>, you can often get a
	 * similar effect, and with faster rendering, by simply increasing the values
	 * of the <code>blurX</code> and <code>blurY</code> properties.</p>]]></haxe_doc>
		</quality>
		<knockout public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Applies a knockout effect (<code>true</code>), which effectively makes the
	 * object's fill transparent and reveals the background color of the
	 * document. The default is <code>false</code> (no knockout).]]></haxe_doc>
		</knockout>
		<inner public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether or not the shadow is an inner shadow. The value
	 * <code>true</code> indicates an inner shadow. The default is
	 * <code>false</code>, an outer shadow (a shadow around the outer edges of
	 * the object).]]></haxe_doc>
		</inner>
		<hideObject public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether or not the object is hidden. The value <code>true</code>
	 * indicates that the object itself is not drawn; only the shadow is visible.
	 * The default is <code>false</code> (the object is shown).]]></haxe_doc>
		</hideObject>
		<distance public="1">
			<c path="Float"/>
			<haxe_doc>* The offset distance for the shadow, in pixels. The default value is 4.0
	 * (floating point).</haxe_doc>
		</distance>
		<color public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The color of the shadow. Valid values are in hexadecimal format
	 * <i>0xRRGGBB</i>. The default value is 0x000000.]]></haxe_doc>
		</color>
		<blurY public="1">
			<c path="Float"/>
			<haxe_doc>* The amount of vertical blur. Valid values are 0 to 255.0 (floating point).
	 * The default value is 4.0.</haxe_doc>
		</blurY>
		<blurX public="1">
			<c path="Float"/>
			<haxe_doc>* The amount of horizontal blur. Valid values are 0 to 255.0 (floating
	 * point). The default value is 4.0.</haxe_doc>
		</blurX>
		<angle public="1">
			<c path="Float"/>
			<haxe_doc>* The angle of the shadow. Valid values are 0 to 360 degrees (floating
	 * point). The default value is 45.</haxe_doc>
		</angle>
		<alpha public="1">
			<c path="Float"/>
			<haxe_doc>* The alpha transparency value for the shadow color. Valid values are 0.0 to
	 * 1.0. For example, .25 sets a transparency value of 25%. The default value
	 * is 1.0.</haxe_doc>
		</alpha>
		<new public="1" set="method">
			<f a="?distance:?angle:?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout:?hideObject">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Int"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new DropShadowFilter instance with the specified parameters.
	 * 
	 * @param distance   Offset distance for the shadow, in pixels.
	 * @param angle      Angle of the shadow, 0 to 360 degrees (floating point).
	 * @param color      Color of the shadow, in hexadecimal format
	 *                   <i>0xRRGGBB</i>. The default value is 0x000000.
	 * @param alpha      Alpha transparency value for the shadow color. Valid
	 *                   values are 0.0 to 1.0. For example, .25 sets a
	 *                   transparency value of 25%.
	 * @param blurX      Amount of horizontal blur. Valid values are 0 to 255.0
	 *                   (floating point).
	 * @param blurY      Amount of vertical blur. Valid values are 0 to 255.0
	 *                   (floating point).
	 * @param strength   The strength of the imprint or spread. The higher the
	 *                   value, the more color is imprinted and the stronger the
	 *                   contrast between the shadow and the background. Valid
	 *                   values are 0 to 255.0.
	 * @param quality    The number of times to apply the filter. Use the
	 *                   BitmapFilterQuality constants:
	 *                   <ul>
	 *                     <li><code>BitmapFilterQuality.LOW</code></li>
	 *                     <li><code>BitmapFilterQuality.MEDIUM</code></li>
	 *                     <li><code>BitmapFilterQuality.HIGH</code></li>
	 *                   </ul>
	 *
	 *                   <p>For more information about these values, see the
	 *                   <code>quality</code> property description.</p>
	 * @param inner      Indicates whether or not the shadow is an inner shadow.
	 *                   A value of <code>true</code> specifies an inner shadow.
	 *                   A value of <code>false</code> specifies an outer shadow
	 *                   (a shadow around the outer edges of the object).
	 * @param knockout   Applies a knockout effect (<code>true</code>), which
	 *                   effectively makes the object's fill transparent and
	 *                   reveals the background color of the document.
	 * @param hideObject Indicates whether or not the object is hidden. A value
	 *                   of <code>true</code> indicates that the object itself is
	 *                   not drawn; only the shadow is visible.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The DropShadowFilter class lets you add a drop shadow to display objects.
 * The shadow algorithm is based on the same box filter that the blur filter
 * uses. You have several options for the style of the drop shadow, including
 * inner or outer shadow and knockout mode. You can apply the filter to any
 * display object (that is, objects that inherit from the DisplayObject
 * class), such as MovieClip, SimpleButton, TextField, and Video objects, as
 * well as to BitmapData objects.
 *
 * <p>The use of filters depends on the object to which you apply the
 * filter:</p>
 *
 * <ul>
 *   <li>To apply filters to display objects use the <code>filters</code>
 * property (inherited from DisplayObject). Setting the <code>filters</code>
 * property of an object does not modify the object, and you can remove the
 * filter by clearing the <code>filters</code> property. </li>
 *   <li>To apply filters to BitmapData objects, use the
 * <code>BitmapData.applyFilter()</code> method. Calling
 * <code>applyFilter()</code> on a BitmapData object takes the source
 * BitmapData object and the filter object and generates a filtered image as a
 * result.</li>
 * </ul>
 *
 * <p>If you apply a filter to a display object, the value of the
 * <code>cacheAsBitmap</code> property of the display object is set to
 * <code>true</code>. If you clear all filters, the original value of
 * <code>cacheAsBitmap</code> is restored.</p>
 *
 * <p>This filter supports Stage scaling. However, it does not support general
 * scaling, rotation, and skewing. If the object itself is scaled (if
 * <code>scaleX</code> and <code>scaleY</code> are set to a value other than
 * 1.0), the filter is not scaled. It is scaled only when the user zooms in on
 * the Stage.</p>
 *
 * <p>A filter is not applied if the resulting image exceeds the maximum
 * dimensions. In AIR 1.5 and Flash Player 10, the maximum is 8,191 pixels in
 * width or height, and the total number of pixels cannot exceed 16,777,215
 * pixels. (So, if an image is 8,191 pixels wide, it can only be 2,048 pixels
 * high.) In Flash Player 9 and earlier and AIR 1.1 and earlier, the
 * limitation is 2,880 pixels in height and 2,880 pixels in width. If, for
 * example, you zoom in on a large movie clip with a filter applied, the
 * filter is turned off if the resulting image exceeds the maximum
 * dimensions.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.filters.GlowFilter" params="" file="/Users/joshua/Development/Haxe/nme/nme/filters/GlowFilter.hx" extern="1">
		<extends path="nme.filters.BitmapFilter"/>
		<strength public="1">
			<c path="Float"/>
			<haxe_doc>* The strength of the imprint or spread. The higher the value, the more
	 * color is imprinted and the stronger the contrast between the glow and the
	 * background. Valid values are 0 to 255. The default is 2.</haxe_doc>
		</strength>
		<quality public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of times to apply the filter. The default value is
	 * <code>BitmapFilterQuality.LOW</code>, which is equivalent to applying the
	 * filter once. The value <code>BitmapFilterQuality.MEDIUM</code> applies the
	 * filter twice; the value <code>BitmapFilterQuality.HIGH</code> applies it
	 * three times. Filters with lower values are rendered more quickly.
	 *
	 * <p>For most applications, a <code>quality</code> value of low, medium, or
	 * high is sufficient. Although you can use additional numeric values up to
	 * 15 to achieve different effects, higher values are rendered more slowly.
	 * Instead of increasing the value of <code>quality</code>, you can often get
	 * a similar effect, and with faster rendering, by simply increasing the
	 * values of the <code>blurX</code> and <code>blurY</code> properties.</p>]]></haxe_doc>
		</quality>
		<knockout public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the object has a knockout effect. A value of
	 * <code>true</code> makes the object's fill transparent and reveals the
	 * background color of the document. The default value is <code>false</code>
	 * (no knockout effect).]]></haxe_doc>
		</knockout>
		<inner public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the glow is an inner glow. The value <code>true</code>
	 * indicates an inner glow. The default is <code>false</code>, an outer glow
	 * (a glow around the outer edges of the object).]]></haxe_doc>
		</inner>
		<color public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The color of the glow. Valid values are in the hexadecimal format
	 * 0x<i>RRGGBB</i>. The default value is 0xFF0000.]]></haxe_doc>
		</color>
		<blurY public="1">
			<c path="Float"/>
			<haxe_doc>* The amount of vertical blur. Valid values are 0 to 255 (floating point).
	 * The default value is 6. Values that are a power of 2 (such as 2, 4, 8, 16,
	 * and 32) are optimized to render more quickly than other values.</haxe_doc>
		</blurY>
		<blurX public="1">
			<c path="Float"/>
			<haxe_doc>* The amount of horizontal blur. Valid values are 0 to 255 (floating point).
	 * The default value is 6. Values that are a power of 2 (such as 2, 4, 8, 16,
	 * and 32) are optimized to render more quickly than other values.</haxe_doc>
		</blurX>
		<alpha public="1">
			<c path="Float"/>
			<haxe_doc>* The alpha transparency value for the color. Valid values are 0 to 1. For
	 * example, .25 sets a transparency value of 25%. The default value is 1.</haxe_doc>
		</alpha>
		<new public="1" set="method">
			<f a="?color:?alpha:?blurX:?blurY:?strength:?quality:?inner:?knockout">
				<c path="Int"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Initializes a new GlowFilter instance with the specified parameters.
	 * 
	 * @param color    The color of the glow, in the hexadecimal format
	 *                 0x<i>RRGGBB</i>. The default value is 0xFF0000.
	 * @param alpha    The alpha transparency value for the color. Valid values
	 *                 are 0 to 1. For example, .25 sets a transparency value of
	 *                 25%.
	 * @param blurX    The amount of horizontal blur. Valid values are 0 to 255
	 *                 (floating point). Values that are a power of 2 (such as 2,
	 *                 4, 8, 16 and 32) are optimized to render more quickly than
	 *                 other values.
	 * @param blurY    The amount of vertical blur. Valid values are 0 to 255
	 *                 (floating point). Values that are a power of 2 (such as 2,
	 *                 4, 8, 16 and 32) are optimized to render more quickly than
	 *                 other values.
	 * @param strength The strength of the imprint or spread. The higher the
	 *                 value, the more color is imprinted and the stronger the
	 *                 contrast between the glow and the background. Valid values
	 *                 are 0 to 255.
	 * @param quality  The number of times to apply the filter. Use the
	 *                 BitmapFilterQuality constants:
	 *                 <ul>
	 *                   <li><code>BitmapFilterQuality.LOW</code></li>
	 *                   <li><code>BitmapFilterQuality.MEDIUM</code></li>
	 *                   <li><code>BitmapFilterQuality.HIGH</code></li>
	 *                 </ul>
	 *
	 *                 <p>For more information, see the description of the
	 *                 <code>quality</code> property.</p>
	 * @param inner    Specifies whether the glow is an inner glow. The value
	 *                 <code> true</code> specifies an inner glow. The value
	 *                 <code>false</code> specifies an outer glow (a glow around
	 *                 the outer edges of the object).
	 * @param knockout Specifies whether the object has a knockout effect. The
	 *                 value <code>true</code> makes the object's fill
	 *                 transparent and reveals the background color of the
	 *                 document.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The GlowFilter class lets you apply a glow effect to display objects. You
 * have several options for the style of the glow, including inner or outer
 * glow and knockout mode. The glow filter is similar to the drop shadow
 * filter with the <code>distance</code> and <code>angle</code> properties of
 * the drop shadow filter set to 0. You can apply the filter to any display
 * object (that is, objects that inherit from the DisplayObject class), such
 * as MovieClip, SimpleButton, TextField, and Video objects, as well as to
 * BitmapData objects.
 *
 * <p>The use of filters depends on the object to which you apply the
 * filter:</p>
 *
 * <ul>
 *   <li>To apply filters to display objects, use the <code>filters</code>
 * property (inherited from DisplayObject). Setting the <code>filters</code>
 * property of an object does not modify the object, and you can remove the
 * filter by clearing the <code>filters</code> property. </li>
 *   <li>To apply filters to BitmapData objects, use the
 * <code>BitmapData.applyFilter()</code> method. Calling
 * <code>applyFilter()</code> on a BitmapData object takes the source
 * BitmapData object and the filter object and generates a filtered image as a
 * result.</li>
 * </ul>
 *
 * <p>If you apply a filter to a display object, the
 * <code>cacheAsBitmap</code> property of the display object is set to
 * <code>true</code>. If you clear all filters, the original value of
 * <code>cacheAsBitmap</code> is restored.</p>
 *
 * <p>This filter supports Stage scaling. However, it does not support general
 * scaling, rotation, and skewing. If the object itself is scaled (if
 * <code>scaleX</code> and <code>scaleY</code> are set to a value other than
 * 1.0), the filter is not scaled. It is scaled only when the user zooms in on
 * the Stage.</p>
 *
 * <p>A filter is not applied if the resulting image exceeds the maximum
 * dimensions. In AIR 1.5 and Flash Player 10, the maximum is 8,191 pixels in
 * width or height, and the total number of pixels cannot exceed 16,777,215
 * pixels. (So, if an image is 8,191 pixels wide, it can only be 2,048 pixels
 * high.) In Flash Player 9 and earlier and AIR 1.1 and earlier, the
 * limitation is 2,880 pixels in height and 2,880 pixels in width. For
 * example, if you zoom in on a large movie clip with a filter applied, the
 * filter is turned off if the resulting image exceeds the maximum
 * dimensions.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.geom.ColorTransform" params="" file="/Users/joshua/Development/Haxe/nme/nme/geom/ColorTransform.hx" extern="1">
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Formats and returns a string that describes all of the properties of the
	 * ColorTransform object.
	 * 
	 * @return A string that lists all of the properties of the ColorTransform
	 *         object.</haxe_doc>
		</toString>
		<concat public="1" set="method">
			<f a="second">
				<c path="nme.geom.ColorTransform"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Concatenates the ColorTranform object specified by the <code>second</code>
	 * parameter with the current ColorTransform object and sets the current
	 * object as the result, which is an additive combination of the two color
	 * transformations. When you apply the concatenated ColorTransform object,
	 * the effect is the same as applying the <code>second</code> color
	 * transformation after the <i>original</i> color transformation.
	 * 
	 * @param second The ColorTransform object to be combined with the current
	 *               ColorTransform object.]]></haxe_doc>
		</concat>
		<redOffset public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the red channel value after it
	 * has been multiplied by the <code>redMultiplier</code> value.]]></haxe_doc>
		</redOffset>
		<redMultiplier public="1">
			<c path="Float"/>
			<haxe_doc>* A decimal value that is multiplied with the red channel value.</haxe_doc>
		</redMultiplier>
		<greenOffset public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the green channel value after
	 * it has been multiplied by the <code>greenMultiplier</code> value.]]></haxe_doc>
		</greenOffset>
		<greenMultiplier public="1">
			<c path="Float"/>
			<haxe_doc>* A decimal value that is multiplied with the green channel value.</haxe_doc>
		</greenMultiplier>
		<color public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The RGB color value for a ColorTransform object.
	 *
	 * <p>When you set this property, it changes the three color offset values
	 * (<code>redOffset</code>, <code>greenOffset</code>, and
	 * <code>blueOffset</code>) accordingly, and it sets the three color
	 * multiplier values (<code>redMultiplier</code>,
	 * <code>greenMultiplier</code>, and <code>blueMultiplier</code>) to 0. The
	 * alpha transparency multiplier and offset values do not change.</p>
	 *
	 * <p>When you pass a value for this property, use the format
	 * 0x<i>RRGGBB</i>. <i>RR</i>, <i>GG</i>, and <i>BB</i> each consist of two
	 * hexadecimal digits that specify the offset of each color component. The 0x
	 * tells the ActionScript compiler that the number is a hexadecimal
	 * value.</p>]]></haxe_doc>
		</color>
		<blueOffset public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the blue channel value after it
	 * has been multiplied by the <code>blueMultiplier</code> value.]]></haxe_doc>
		</blueOffset>
		<blueMultiplier public="1">
			<c path="Float"/>
			<haxe_doc>* A decimal value that is multiplied with the blue channel value.</haxe_doc>
		</blueMultiplier>
		<alphaOffset public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* A number from -255 to 255 that is added to the alpha transparency channel
	 * value after it has been multiplied by the <code>alphaMultiplier</code>
	 * value.]]></haxe_doc>
		</alphaOffset>
		<alphaMultiplier public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* A decimal value that is multiplied with the alpha transparency channel
	 * value.
	 *
	 * <p>If you set the alpha transparency value of a display object directly by
	 * using the <code>alpha</code> property of the DisplayObject instance, it
	 * affects the value of the <code>alphaMultiplier</code> property of that
	 * display object's <code>transform.colorTransform</code> property.</p>]]></haxe_doc>
		</alphaMultiplier>
		<new public="1" set="method">
			<f a="?redMultiplier:?greenMultiplier:?blueMultiplier:?alphaMultiplier:?redOffset:?greenOffset:?blueOffset:?alphaOffset">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a ColorTransform object for a display object with the specified
	 * color channel values and alpha values.
	 * 
	 * @param redMultiplier   The value for the red multiplier, in the range from
	 *                        0 to 1.
	 * @param greenMultiplier The value for the green multiplier, in the range
	 *                        from 0 to 1.
	 * @param blueMultiplier  The value for the blue multiplier, in the range
	 *                        from 0 to 1.
	 * @param alphaMultiplier The value for the alpha transparency multiplier, in
	 *                        the range from 0 to 1.
	 * @param redOffset       The offset value for the red color channel, in the
	 *                        range from -255 to 255.
	 * @param greenOffset     The offset value for the green color channel, in
	 *                        the range from -255 to 255.
	 * @param blueOffset      The offset for the blue color channel value, in the
	 *                        range from -255 to 255.
	 * @param alphaOffset     The offset for alpha transparency channel value, in
	 *                        the range from -255 to 255.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The ColorTransform class lets you adjust the color values in a display
 * object. The color adjustment or <i>color transformation</i> can be applied
 * to all four channels: red, green, blue, and alpha transparency.
 *
 * <p>When a ColorTransform object is applied to a display object, a new value
 * for each color channel is calculated like this:</p>
 *
 * <ul>
 *   <li>New red value = (old red value * <code>redMultiplier</code>) +
 * <code>redOffset</code></li>
 *   <li>New green value = (old green value * <code>greenMultiplier</code>) +
 * <code>greenOffset</code></li>
 *   <li>New blue value = (old blue value * <code>blueMultiplier</code>) +
 * <code>blueOffset</code></li>
 *   <li>New alpha value = (old alpha value * <code>alphaMultiplier</code>) +
 * <code>alphaOffset</code></li>
 * </ul>
 *
 * <p>If any of the color channel values is greater than 255 after the
 * calculation, it is set to 255. If it is less than 0, it is set to 0.</p>
 *
 * <p>You can use ColorTransform objects in the following ways:</p>
 *
 * <ul>
 *   <li>In the <code>colorTransform</code> parameter of the
 * <code>colorTransform()</code> method of the BitmapData class</li>
 *   <li>As the <code>colorTransform</code> property of a Transform object
 * (which can be used as the <code>transform</code> property of a display
 * object)</li>
 * </ul>
 *
 * <p>You must use the <code>new ColorTransform()</code> constructor to create
 * a ColorTransform object before you can call the methods of the
 * ColorTransform object.</p>
 *
 * <p>Color transformations do not apply to the background color of a movie
 * clip (such as a loaded SWF object). They apply only to graphics and symbols
 * that are attached to the movie clip.</p>]]></haxe_doc>
	</class>
	<class path="nme.geom.Matrix" params="" file="/Users/joshua/Development/Haxe/nme/nme/geom/Matrix.hx" extern="1">
		<translate public="1" set="method">
			<f a="dx:dy">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Translates the matrix along the <i>x</i> and <i>y</i> axes, as specified
	 * by the <code>dx</code> and <code>dy</code> parameters.
	 * 
	 * @param dx The amount of movement along the <i>x</i> axis to the right, in
	 *           pixels.
	 * @param dy The amount of movement down along the <i>y</i> axis, in pixels.]]></haxe_doc>
		</translate>
		<transformPoint public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc>* Returns the result of applying the geometric transformation represented by
	 * the Matrix object to the specified point.
	 * 
	 * @param point The point for which you want to get the result of the Matrix
	 *              transformation.
	 * @return The point resulting from applying the Matrix transformation.</haxe_doc>
		</transformPoint>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Returns a text value listing the properties of the Matrix object.
	 * 
	 * @return A string containing the values of the properties of the Matrix
	 *         object: <code>a</code>, <code>b</code>, <code>c</code>,
	 *         <code>d</code>, <code>tx</code>, and <code>ty</code>.]]></haxe_doc>
		</toString>
		<setTo public="1">
			<f a="aa:ba:ca:da:txa:tya">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scale public="1" set="method">
			<f a="sx:sy">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Applies a scaling transformation to the matrix. The <i>x</i> axis is
	 * multiplied by <code>sx</code>, and the <i>y</i> axis it is multiplied by
	 * <code>sy</code>.
	 *
	 * <p>The <code>scale()</code> method alters the <code>a</code> and
	 * <code>d</code> properties of the Matrix object. In matrix notation, this
	 * is the same as concatenating the current matrix with the following
	 * matrix:</p>
	 * 
	 * @param sx A multiplier used to scale the object along the <i>x</i> axis.
	 * @param sy A multiplier used to scale the object along the <i>y</i> axis.]]></haxe_doc>
		</scale>
		<rotate public="1" set="method">
			<f a="angle">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Applies a rotation transformation to the Matrix object.
	 *
	 * <p>The <code>rotate()</code> method alters the <code>a</code>,
	 * <code>b</code>, <code>c</code>, and <code>d</code> properties of the
	 * Matrix object. In matrix notation, this is the same as concatenating the
	 * current matrix with the following:</p>
	 * 
	 * @param angle The rotation angle in radians.]]></haxe_doc>
		</rotate>
		<invert public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Performs the opposite transformation of the original matrix. You can apply
	 * an inverted matrix to an object to undo the transformation performed when
	 * applying the original matrix.
	 *</haxe_doc>
		</invert>
		<identity public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Sets each matrix property to a value that causes a null transformation. An
	 * object transformed by applying an identity matrix will be identical to the
	 * original.
	 *
	 * <p>After calling the <code>identity()</code> method, the resulting matrix
	 * has the following properties: <code>a</code>=1, <code>b</code>=0,
	 * <code>c</code>=0, <code>d</code>=1, <code>tx</code>=0,
	 * <code>ty</code>=0.</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>
	 *]]></haxe_doc>
		</identity>
		<deltaTransformPoint public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Given a point in the pretransform coordinate space, returns the
	 * coordinates of that point after the transformation occurs. Unlike the
	 * standard transformation applied using the <code>transformPoint()</code>
	 * method, the <code>deltaTransformPoint()</code> method's transformation
	 * does not consider the translation parameters <code>tx</code> and
	 * <code>ty</code>.
	 * 
	 * @param point The point for which you want to get the result of the matrix
	 *              transformation.
	 * @return The point resulting from applying the matrix transformation.]]></haxe_doc>
		</deltaTransformPoint>
		<createGradientBox public="1" set="method">
			<f a="width:height:?rotation:?tx:?ty">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates the specific style of matrix expected by the
	 * <code>beginGradientFill()</code> and <code>lineGradientStyle()</code>
	 * methods of the Graphics class. Width and height are scaled to a
	 * <code>scaleX</code>/<code>scaleY</code> pair and the
	 * <code>tx</code>/<code>ty</code> values are offset by half the width and
	 * height.
	 *
	 * <p>For example, consider a gradient with the following
	 * characteristics:</p>
	 *
	 * <ul>
	 *   <li><code>GradientType.LINEAR</code></li>
	 *   <li>Two colors, green and blue, with the ratios array set to <code>[0,
	 * 255]</code></li>
	 *   <li><code>SpreadMethod.PAD</code></li>
	 *   <li><code>InterpolationMethod.LINEAR_RGB</code></li>
	 * </ul>
	 *
	 * <p>The following illustrations show gradients in which the matrix was
	 * defined using the <code>createGradientBox()</code> method with different
	 * parameter settings:</p>
	 * 
	 * @param width    The width of the gradient box.
	 * @param height   The height of the gradient box.
	 * @param rotation The amount to rotate, in radians.
	 * @param tx       The distance, in pixels, to translate to the right along
	 *                 the <i>x</i> axis. This value is offset by half of the
	 *                 <code>width</code> parameter.
	 * @param ty       The distance, in pixels, to translate down along the
	 *                 <i>y</i> axis. This value is offset by half of the
	 *                 <code>height</code> parameter.]]></haxe_doc>
		</createGradientBox>
		<createBox public="1" set="method">
			<f a="scaleX:scaleY:?rotation:?tx:?ty">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Includes parameters for scaling, rotation, and translation. When applied
	 * to a matrix it sets the matrix's values based on those parameters.
	 *
	 * <p>Using the <code>createBox()</code> method lets you obtain the same
	 * matrix as you would if you applied the <code>identity()</code>,
	 * <code>rotate()</code>, <code>scale()</code>, and <code>translate()</code>
	 * methods in succession. For example, <code>mat1.createBox(2,2,Math.PI/4,
	 * 100, 100)</code> has the same effect as the following:</p>
	 * 
	 * @param scaleX   The factor by which to scale horizontally.
	 * @param scaleY   The factor by which scale vertically.
	 * @param rotation The amount to rotate, in radians.
	 * @param tx       The number of pixels to translate (move) to the right
	 *                 along the <i>x</i> axis.
	 * @param ty       The number of pixels to translate (move) down along the
	 *                 <i>y</i> axis.]]></haxe_doc>
		</createBox>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyFrom public="1">
			<f a="sourceMatrix">
				<c path="nme.geom.Matrix"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<concat public="1" set="method">
			<f a="m">
				<c path="nme.geom.Matrix"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Concatenates a matrix with the current matrix, effectively combining the
	 * geometric effects of the two. In mathematical terms, concatenating two
	 * matrixes is the same as combining them using matrix multiplication.
	 *
	 * <p>For example, if matrix <code>m1</code> scales an object by a factor of
	 * four, and matrix <code>m2</code> rotates an object by 1.5707963267949
	 * radians (<code>Math.PI/2</code>), then <code>m1.concat(m2)</code>
	 * transforms <code>m1</code> into a matrix that scales an object by a factor
	 * of four and rotates the object by <code>Math.PI/2</code> radians. </p>
	 *
	 * <p>This method replaces the source matrix with the concatenated matrix. If
	 * you want to concatenate two matrixes without altering either of the two
	 * source matrixes, first copy the source matrix by using the
	 * <code>clone()</code> method, as shown in the Class Examples section.</p>
	 * 
	 * @param m The matrix to be concatenated to the source matrix.]]></haxe_doc>
		</concat>
		<clone public="1" set="method">
			<f a=""><c path="nme.geom.Matrix"/></f>
			<haxe_doc>* Returns a new Matrix object that is a clone of this matrix, with an exact
	 * copy of the contained object.
	 * 
	 * @return A Matrix object.</haxe_doc>
		</clone>
		<ty public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The distance by which to translate each point along the <i>y</i> axis.]]></haxe_doc>
		</ty>
		<tx public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The distance by which to translate each point along the <i>x</i> axis.]]></haxe_doc>
		</tx>
		<d public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>y</i> axis
	 * when scaling or rotating an image.]]></haxe_doc>
		</d>
		<c public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>x</i> axis
	 * when rotating or skewing an image.]]></haxe_doc>
		</c>
		<b public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>y</i> axis
	 * when rotating or skewing an image.]]></haxe_doc>
		</b>
		<a public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The value that affects the positioning of pixels along the <i>x</i> axis
	 * when scaling or rotating an image.]]></haxe_doc>
		</a>
		<new public="1" set="method">
			<f a="?a:?b:?c:?d:?tx:?ty">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new Matrix object with the specified parameters. In matrix
	 * notation, the properties are organized like this:
	 *
	 * <p>If you do not provide any parameters to the <code>new Matrix()</code>
	 * constructor, it creates an <i>identity matrix</i> with the following
	 * values:</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>
	 * 
	 * @param a  The value that affects the positioning of pixels along the
	 *           <i>x</i> axis when scaling or rotating an image.
	 * @param b  The value that affects the positioning of pixels along the
	 *           <i>y</i> axis when rotating or skewing an image.
	 * @param c  The value that affects the positioning of pixels along the
	 *           <i>x</i> axis when rotating or skewing an image.
	 * @param d  The value that affects the positioning of pixels along the
	 *           <i>y</i> axis when scaling or rotating an image..
	 * @param tx The distance by which to translate each point along the <i>x</i>
	 *           axis.
	 * @param ty The distance by which to translate each point along the <i>y</i>
	 *           axis.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Matrix class represents a transformation matrix that determines how to
 * map points from one coordinate space to another. You can perform various
 * graphical transformations on a display object by setting the properties of
 * a Matrix object, applying that Matrix object to the <code>matrix</code>
 * property of a Transform object, and then applying that Transform object as
 * the <code>transform</code> property of the display object. These
 * transformation functions include translation (<i>x</i> and <i>y</i>
 * repositioning), rotation, scaling, and skewing.
 *
 * <p>Together these types of transformations are known as <i>affine
 * transformations</i>. Affine transformations preserve the straightness of
 * lines while transforming, so that parallel lines stay parallel.</p>
 *
 * <p>To apply a transformation matrix to a display object, you create a
 * Transform object, set its <code>matrix</code> property to the
 * transformation matrix, and then set the <code>transform</code> property of
 * the display object to the Transform object. Matrix objects are also used as
 * parameters of some methods, such as the following:</p>
 *
 * <ul>
 *   <li>The <code>draw()</code> method of a BitmapData object</li>
 *   <li>The <code>beginBitmapFill()</code> method,
 * <code>beginGradientFill()</code> method, or
 * <code>lineGradientStyle()</code> method of a Graphics object</li>
 * </ul>
 *
 * <p>A transformation matrix object is a 3 x 3 matrix with the following
 * contents:</p>
 *
 * <p>In traditional transformation matrixes, the <code>u</code>,
 * <code>v</code>, and <code>w</code> properties provide extra capabilities.
 * The Matrix class can only operate in two-dimensional space, so it always
 * assumes that the property values <code>u</code> and <code>v</code> are 0.0,
 * and that the property value <code>w</code> is 1.0. The effective values of
 * the matrix are as follows:</p>
 *
 * <p>You can get and set the values of all six of the other properties in a
 * Matrix object: <code>a</code>, <code>b</code>, <code>c</code>,
 * <code>d</code>, <code>tx</code>, and <code>ty</code>.</p>
 *
 * <p>The Matrix class supports the four major types of transformations:
 * translation, scaling, rotation, and skewing. You can set three of these
 * transformations by using specialized methods, as described in the following
 * table: </p>
 *
 * <p>Each transformation function alters the current matrix properties so
 * that you can effectively combine multiple transformations. To do this, you
 * call more than one transformation function before applying the matrix to
 * its display object target (by using the <code>transform</code> property of
 * that display object).</p>
 *
 * <p>Use the <code>new Matrix()</code> constructor to create a Matrix object
 * before you can call the methods of the Matrix object.</p>]]></haxe_doc>
	</class>
	<class path="nme.geom.Matrix3D" params="" file="/Users/joshua/Development/Haxe/nme/nme/geom/Matrix3D.hx" extern="1">
		<interpolate public="1" static="1"><f a="thisMat:toMat:percent">
	<c path="nme.geom.Matrix3D"/>
	<c path="nme.geom.Matrix3D"/>
	<c path="Float"/>
	<c path="nme.geom.Matrix3D"/>
</f></interpolate>
		<transpose public="1" set="method"><f a=""><e path="Void"/></f></transpose>
		<transformVectors public="1" set="method"><f a="vin:vout">
	<t path="nme.Vector"><c path="Float"/></t>
	<t path="nme.Vector"><c path="Float"/></t>
	<e path="Void"/>
</f></transformVectors>
		<transformVector public="1" set="method"><f a="v">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></transformVector>
		<prependTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependTranslation>
		<prependScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></prependScale>
		<prependRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></prependRotation>
		<prepend public="1" set="method"><f a="rhs">
	<c path="nme.geom.Matrix3D"/>
	<e path="Void"/>
</f></prepend>
		<pointAt public="1" set="method"><f a="pos:?at:?up">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></pointAt>
		<invert public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc>* Performs the opposite transformation of the original matrix. You can apply
	 * an inverted matrix to an object to undo the transformation performed when
	 * applying the original matrix.
	 *</haxe_doc>
		</invert>
		<interpolateTo public="1" set="method"><f a="toMat:percent">
	<c path="nme.geom.Matrix3D"/>
	<c path="Float"/>
	<e path="Void"/>
</f></interpolateTo>
		<identity public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Sets each matrix property to a value that causes a null transformation. An
	 * object transformed by applying an identity matrix will be identical to the
	 * original.
	 *
	 * <p>After calling the <code>identity()</code> method, the resulting matrix
	 * has the following properties: <code>a</code>=1, <code>b</code>=0,
	 * <code>c</code>=0, <code>d</code>=1, <code>tx</code>=0,
	 * <code>ty</code>=0.</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>
	 *]]></haxe_doc>
		</identity>
		<deltaTransformVector public="1" set="method"><f a="v">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></deltaTransformVector>
		<copyToMatrix3D public="1">
			<f a="dest">
				<c path="nme.geom.Matrix3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyToMatrix3D>
		<copyRowTo public="1">
			<f a="row:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowTo>
		<copyRowFrom public="1">
			<f a="row:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRowFrom>
		<copyRawDataTo public="1">
			<f a="vector:?index:?transpose">
				<t path="nme.Vector"><c path="Float"/></t>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataTo>
		<copyRawDataFrom public="1">
			<f a="vector:?index:?transpose">
				<t path="nme.Vector"><c path="Float"/></t>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyRawDataFrom>
		<copyFrom public="1">
			<f a="sourceMatrix3D">
				<c path="nme.geom.Matrix3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<copyColumnTo public="1">
			<f a="column:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnTo>
		<copyColumnFrom public="1">
			<f a="column:vector3D">
				<c path="Int"/>
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyColumnFrom>
		<clone public="1" set="method">
			<f a=""><c path="nme.geom.Matrix3D"/></f>
			<haxe_doc>* Returns a new Matrix object that is a clone of this matrix, with an exact
	 * copy of the contained object.
	 * 
	 * @return A Matrix object.</haxe_doc>
		</clone>
		<appendTranslation public="1" set="method"><f a="x:y:z">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendTranslation>
		<appendScale public="1" set="method"><f a="xScale:yScale:zScale">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></appendScale>
		<appendRotation public="1" set="method"><f a="degrees:axis:?pivotPoint">
	<c path="Float"/>
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></appendRotation>
		<append public="1" set="method"><f a="lhs">
	<c path="nme.geom.Matrix3D"/>
	<e path="Void"/>
</f></append>
		<rawData public="1"><t path="nme.Vector"><c path="Float"/></t></rawData>
		<position public="1"><c path="nme.geom.Vector3D"/></position>
		<determinant public="1" set="null"><c path="Float"/></determinant>
		<new public="1">
			<f a="?v">
				<t path="nme.Vector"><c path="Float"/></t>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new Matrix object with the specified parameters. In matrix
	 * notation, the properties are organized like this:
	 *
	 * <p>If you do not provide any parameters to the <code>new Matrix()</code>
	 * constructor, it creates an <i>identity matrix</i> with the following
	 * values:</p>
	 *
	 * <p>In matrix notation, the identity matrix looks like this:</p>]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Matrix class represents a transformation matrix that determines how to
 * map points from one coordinate space to another. You can perform various
 * graphical transformations on a display object by setting the properties of
 * a Matrix object, applying that Matrix object to the <code>matrix</code>
 * property of a Transform object, and then applying that Transform object as
 * the <code>transform</code> property of the display object. These
 * transformation functions include translation (<i>x</i> and <i>y</i>
 * repositioning), rotation, scaling, and skewing.
 *
 * <p>Together these types of transformations are known as <i>affine
 * transformations</i>. Affine transformations preserve the straightness of
 * lines while transforming, so that parallel lines stay parallel.</p>
 *
 * <p>To apply a transformation matrix to a display object, you create a
 * Transform object, set its <code>matrix</code> property to the
 * transformation matrix, and then set the <code>transform</code> property of
 * the display object to the Transform object. Matrix objects are also used as
 * parameters of some methods, such as the following:</p>
 *
 * <ul>
 *   <li>The <code>draw()</code> method of a BitmapData object</li>
 *   <li>The <code>beginBitmapFill()</code> method,
 * <code>beginGradientFill()</code> method, or
 * <code>lineGradientStyle()</code> method of a Graphics object</li>
 * </ul>
 *
 * <p>A transformation matrix object is a 3 x 3 matrix with the following
 * contents:</p>
 *
 * <p>In traditional transformation matrixes, the <code>u</code>,
 * <code>v</code>, and <code>w</code> properties provide extra capabilities.
 * The Matrix class can only operate in two-dimensional space, so it always
 * assumes that the property values <code>u</code> and <code>v</code> are 0.0,
 * and that the property value <code>w</code> is 1.0. The effective values of
 * the matrix are as follows:</p>
 *
 * <p>You can get and set the values of all six of the other properties in a
 * Matrix object: <code>a</code>, <code>b</code>, <code>c</code>,
 * <code>d</code>, <code>tx</code>, and <code>ty</code>.</p>
 *
 * <p>The Matrix class supports the four major types of transformations:
 * translation, scaling, rotation, and skewing. You can set three of these
 * transformations by using specialized methods, as described in the following
 * table: </p>
 *
 * <p>Each transformation function alters the current matrix properties so
 * that you can effectively combine multiple transformations. To do this, you
 * call more than one transformation function before applying the matrix to
 * its display object target (by using the <code>transform</code> property of
 * that display object).</p>
 *
 * <p>Use the <code>new Matrix()</code> constructor to create a Matrix object
 * before you can call the methods of the Matrix object.</p>]]></haxe_doc>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="nme.geom.Point" params="" file="/Users/joshua/Development/Haxe/nme/nme/geom/Point.hx" extern="1">
		<distance public="1" set="method" static="1">
			<f a="pt1:pt2">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
				<c path="Float"/>
			</f>
			<haxe_doc><![CDATA[* Returns the distance between <code>pt1</code> and <code>pt2</code>.
	 * 
	 * @param pt1 The first point.
	 * @param pt2 The second point.
	 * @return The distance between the first and second points.]]></haxe_doc>
		</distance>
		<interpolate public="1" set="method" static="1">
			<f a="pt1:pt2:f">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
				<c path="Float"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc><![CDATA[* Determines a point between two specified points. The parameter
	 * <code>f</code> determines where the new interpolated point is located
	 * relative to the two end points specified by parameters <code>pt1</code>
	 * and <code>pt2</code>. The closer the value of the parameter <code>f</code>
	 * is to <code>1.0</code>, the closer the interpolated point is to the first
	 * point (parameter <code>pt1</code>). The closer the value of the parameter
	 * <code>f</code> is to 0, the closer the interpolated point is to the second
	 * point (parameter <code>pt2</code>).
	 * 
	 * @param pt1 The first point.
	 * @param pt2 The second point.
	 * @param f   The level of interpolation between the two points. Indicates
	 *            where the new point will be, along the line between
	 *            <code>pt1</code> and <code>pt2</code>. If <code>f</code>=1,
	 *            <code>pt1</code> is returned; if <code>f</code>=0,
	 *            <code>pt2</code> is returned.
	 * @return The new, interpolated point.]]></haxe_doc>
		</interpolate>
		<polar public="1" set="method" static="1">
			<f a="len:angle">
				<c path="Float"/>
				<c path="Float"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc>* Converts a pair of polar coordinates to a Cartesian point coordinate.
	 * 
	 * @param len   The length coordinate of the polar pair.
	 * @param angle The angle, in radians, of the polar pair.
	 * @return The Cartesian point.</haxe_doc>
		</polar>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Returns a string that contains the values of the <i>x</i> and <i>y</i>
	 * coordinates. The string has the form <code>"(x=<i>x</i>,
	 * y=<i>y</i>)"</code>, so calling the <code>toString()</code> method for a
	 * point at 23,17 would return <code>"(x=23, y=17)"</code>.
	 * 
	 * @return The string representation of the coordinates.]]></haxe_doc>
		</toString>
		<subtract public="1" set="method">
			<f a="v">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc>* Subtracts the coordinates of another point from the coordinates of this
	 * point to create a new point.
	 * 
	 * @param v The point to be subtracted.
	 * @return The new point.</haxe_doc>
		</subtract>
		<setTo public="1">
			<f a="xa:ya">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<offset public="1" set="method">
			<f a="dx:dy">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Offsets the Point object by the specified amount. The value of
	 * <code>dx</code> is added to the original value of <i>x</i> to create the
	 * new <i>x</i> value. The value of <code>dy</code> is added to the original
	 * value of <i>y</i> to create the new <i>y</i> value.
	 * 
	 * @param dx The amount by which to offset the horizontal coordinate,
	 *           <i>x</i>.
	 * @param dy The amount by which to offset the vertical coordinate, <i>y</i>.]]></haxe_doc>
		</offset>
		<normalize public="1" set="method">
			<f a="thickness">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Scales the line segment between (0,0) and the current point to a set
	 * length.
	 * 
	 * @param thickness The scaling value. For example, if the current point is
	 *                  (0,5), and you normalize it to 1, the point returned is
	 *                  at (0,1).
	 * @return The normalized point.</haxe_doc>
		</normalize>
		<equals public="1" set="method">
			<f a="toCompare">
				<c path="nme.geom.Point"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether two points are equal. Two points are equal if they have
	 * the same <i>x</i> and <i>y</i> values.
	 * 
	 * @param toCompare The point to be compared.
	 * @return A value of <code>true</code> if the object is equal to this Point
	 *         object; <code>false</code> if it is not equal.]]></haxe_doc>
		</equals>
		<copyFrom public="1">
			<f a="sourcePoint">
				<c path="nme.geom.Point"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method">
			<f a=""><c path="nme.geom.Point"/></f>
			<haxe_doc>* Creates a copy of this Point object.
	 * 
	 * @return The new Point object.</haxe_doc>
		</clone>
		<add public="1" set="method">
			<f a="v">
				<c path="nme.geom.Point"/>
				<c path="nme.geom.Point"/>
			</f>
			<haxe_doc>* Adds the coordinates of another point to the coordinates of this point to
	 * create a new point.
	 * 
	 * @param v The point to be added.
	 * @return The new point.</haxe_doc>
		</add>
		<y public="1">
			<c path="Float"/>
			<haxe_doc>* The vertical coordinate of the point. The default value is 0.</haxe_doc>
		</y>
		<x public="1">
			<c path="Float"/>
			<haxe_doc>* The horizontal coordinate of the point. The default value is 0.</haxe_doc>
		</x>
		<length public="1" set="null">
			<c path="Float"/>
			<haxe_doc>* The length of the line segment from (0,0) to this point.</haxe_doc>
		</length>
		<new public="1" set="method">
			<f a="?x:?y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a new point. If you pass no parameters to this method, a point is
	 * created at (0,0).
	 * 
	 * @param x The horizontal coordinate.
	 * @param y The vertical coordinate.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Point object represents a location in a two-dimensional coordinate
 * system, where <i>x</i> represents the horizontal axis and <i>y</i>
 * represents the vertical axis.
 *
 * <p>The following code creates a point at (0,0):</p>
 *
 * <p>Methods and properties of the following classes use Point objects:</p>
 *
 * <ul>
 *   <li>BitmapData</li>
 *   <li>DisplayObject</li>
 *   <li>DisplayObjectContainer</li>
 *   <li>DisplacementMapFilter</li>
 *   <li>NativeWindow</li>
 *   <li>Matrix</li>
 *   <li>Rectangle</li>
 * </ul>
 *
 * <p>You can use the <code>new Point()</code> constructor to create a Point
 * object.</p>]]></haxe_doc>
	</class>
	<class path="nme.geom.Rectangle" params="" file="/Users/joshua/Development/Haxe/nme/nme/geom/Rectangle.hx" extern="1">
		<union public="1" set="method">
			<f a="toUnion">
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* Adds two rectangles together to create a new Rectangle object, by filling
	 * in the horizontal and vertical space between the two rectangles.
	 *
	 * <p><b>Note:</b> The <code>union()</code> method ignores rectangles with
	 * <code>0</code> as the height or width value, such as: <code>var
	 * rect2:Rectangle = new Rectangle(300,300,50,0);</code></p>
	 * 
	 * @param toUnion A Rectangle object to add to this Rectangle object.
	 * @return A new Rectangle object that is the union of the two rectangles.]]></haxe_doc>
		</union>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Builds and returns a string that lists the horizontal and vertical
	 * positions and the width and height of the Rectangle object.
	 * 
	 * @return A string listing the value of each of the following properties of
	 *         the Rectangle object: <code>x</code>, <code>y</code>,
	 *         <code>width</code>, and <code>height</code>.]]></haxe_doc>
		</toString>
		<setTo public="1">
			<f a="xa:ya:widtha:heighta">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<setEmpty public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Sets all of the Rectangle object's properties to 0. A Rectangle object is
	 * empty if its width or height is less than or equal to 0.
	 *
	 * <p> This method sets the values of the <code>x</code>, <code>y</code>,
	 * <code>width</code>, and <code>height</code> properties to 0.</p>
	 *]]></haxe_doc>
		</setEmpty>
		<offsetPoint public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adjusts the location of the Rectangle object using a Point object as a
	 * parameter. This method is similar to the <code>Rectangle.offset()</code>
	 * method, except that it takes a Point object as a parameter.
	 * 
	 * @param point A Point object to use to offset this Rectangle object.]]></haxe_doc>
		</offsetPoint>
		<offset public="1" set="method">
			<f a="dx:dy">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Adjusts the location of the Rectangle object, as determined by its
	 * top-left corner, by the specified amounts.
	 * 
	 * @param dx Moves the <i>x</i> value of the Rectangle object by this amount.
	 * @param dy Moves the <i>y</i> value of the Rectangle object by this amount.]]></haxe_doc>
		</offset>
		<isEmpty public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc><![CDATA[* Determines whether or not this Rectangle object is empty.
	 * 
	 * @return A value of <code>true</code> if the Rectangle object's width or
	 *         height is less than or equal to 0; otherwise <code>false</code>.]]></haxe_doc>
		</isEmpty>
		<intersects public="1" set="method">
			<f a="toIntersect">
				<c path="nme.geom.Rectangle"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the object specified in the <code>toIntersect</code>
	 * parameter intersects with this Rectangle object. This method checks the
	 * <code>x</code>, <code>y</code>, <code>width</code>, and
	 * <code>height</code> properties of the specified Rectangle object to see if
	 * it intersects with this Rectangle object.
	 * 
	 * @param toIntersect The Rectangle object to compare against this Rectangle
	 *                    object.
	 * @return A value of <code>true</code> if the specified object intersects
	 *         with this Rectangle object; otherwise <code>false</code>.]]></haxe_doc>
		</intersects>
		<intersection public="1" set="method">
			<f a="toIntersect">
				<c path="nme.geom.Rectangle"/>
				<c path="nme.geom.Rectangle"/>
			</f>
			<haxe_doc><![CDATA[* If the Rectangle object specified in the <code>toIntersect</code>
	 * parameter intersects with this Rectangle object, returns the area of
	 * intersection as a Rectangle object. If the rectangles do not intersect,
	 * this method returns an empty Rectangle object with its properties set to
	 * 0.
	 * 
	 * @param toIntersect The Rectangle object to compare against to see if it
	 *                    intersects with this Rectangle object.
	 * @return A Rectangle object that equals the area of intersection. If the
	 *         rectangles do not intersect, this method returns an empty
	 *         Rectangle object; that is, a rectangle with its <code>x</code>,
	 *         <code>y</code>, <code>width</code>, and <code>height</code>
	 *         properties set to 0.]]></haxe_doc>
		</intersection>
		<inflatePoint public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Increases the size of the Rectangle object. This method is similar to the
	 * <code>Rectangle.inflate()</code> method except it takes a Point object as
	 * a parameter.
	 *
	 * <p>The following two code examples give the same result:</p>
	 * 
	 * @param point The <code>x</code> property of this Point object is used to
	 *              increase the horizontal dimension of the Rectangle object.
	 *              The <code>y</code> property is used to increase the vertical
	 *              dimension of the Rectangle object.]]></haxe_doc>
		</inflatePoint>
		<inflate public="1" set="method">
			<f a="dx:dy">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Increases the size of the Rectangle object by the specified amounts, in
	 * pixels. The center point of the Rectangle object stays the same, and its
	 * size increases to the left and right by the <code>dx</code> value, and to
	 * the top and the bottom by the <code>dy</code> value.
	 * 
	 * @param dx The value to be added to the left and the right of the Rectangle
	 *           object. The following equation is used to calculate the new
	 *           width and position of the rectangle:
	 * @param dy The value to be added to the top and the bottom of the
	 *           Rectangle. The following equation is used to calculate the new
	 *           height and position of the rectangle:]]></haxe_doc>
		</inflate>
		<equals public="1" set="method">
			<f a="toCompare">
				<c path="nme.geom.Rectangle"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the object specified in the <code>toCompare</code>
	 * parameter is equal to this Rectangle object. This method compares the
	 * <code>x</code>, <code>y</code>, <code>width</code>, and
	 * <code>height</code> properties of an object against the same properties of
	 * this Rectangle object.
	 * 
	 * @param toCompare The rectangle to compare to this Rectangle object.
	 * @return A value of <code>true</code> if the object has exactly the same
	 *         values for the <code>x</code>, <code>y</code>, <code>width</code>,
	 *         and <code>height</code> properties as this Rectangle object;
	 *         otherwise <code>false</code>.]]></haxe_doc>
		</equals>
		<copyFrom public="1">
			<f a="sourceRect">
				<c path="nme.geom.Rectangle"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<containsRect public="1" set="method">
			<f a="rect">
				<c path="nme.geom.Rectangle"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the Rectangle object specified by the <code>rect</code>
	 * parameter is contained within this Rectangle object. A Rectangle object is
	 * said to contain another if the second Rectangle object falls entirely
	 * within the boundaries of the first.
	 * 
	 * @param rect The Rectangle object being checked.
	 * @return A value of <code>true</code> if the Rectangle object that you
	 *         specify is contained by this Rectangle object; otherwise
	 *         <code>false</code>.]]></haxe_doc>
		</containsRect>
		<containsPoint public="1" set="method">
			<f a="point">
				<c path="nme.geom.Point"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the specified point is contained within the rectangular
	 * region defined by this Rectangle object. This method is similar to the
	 * <code>Rectangle.contains()</code> method, except that it takes a Point
	 * object as a parameter.
	 * 
	 * @param point The point, as represented by its <i>x</i> and <i>y</i>
	 *              coordinates.
	 * @return A value of <code>true</code> if the Rectangle object contains the
	 *         specified point; otherwise <code>false</code>.]]></haxe_doc>
		</containsPoint>
		<contains public="1" set="method">
			<f a="x:y">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Determines whether the specified point is contained within the rectangular
	 * region defined by this Rectangle object.
	 * 
	 * @param x The <i>x</i> coordinate (horizontal position) of the point.
	 * @param y The <i>y</i> coordinate (vertical position) of the point.
	 * @return A value of <code>true</code> if the Rectangle object contains the
	 *         specified point; otherwise <code>false</code>.]]></haxe_doc>
		</contains>
		<clone public="1" set="method">
			<f a=""><c path="nme.geom.Rectangle"/></f>
			<haxe_doc><![CDATA[* Returns a new Rectangle object with the same values for the
	 * <code>x</code>, <code>y</code>, <code>width</code>, and
	 * <code>height</code> properties as the original Rectangle object.
	 * 
	 * @return A new Rectangle object with the same values for the
	 *         <code>x</code>, <code>y</code>, <code>width</code>, and
	 *         <code>height</code> properties as the original Rectangle object.]]></haxe_doc>
		</clone>
		<y public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The <i>y</i> coordinate of the top-left corner of the rectangle. Changing
	 * the value of the <code>y</code> property of a Rectangle object has no
	 * effect on the <code>x</code>, <code>width</code>, and <code>height</code>
	 * properties.
	 *
	 * <p>The value of the <code>y</code> property is equal to the value of the
	 * <code>top</code> property.</p>]]></haxe_doc>
		</y>
		<x public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The <i>x</i> coordinate of the top-left corner of the rectangle. Changing
	 * the value of the <code>x</code> property of a Rectangle object has no
	 * effect on the <code>y</code>, <code>width</code>, and <code>height</code>
	 * properties.
	 *
	 * <p>The value of the <code>x</code> property is equal to the value of the
	 * <code>left</code> property.</p>]]></haxe_doc>
		</x>
		<width public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The width of the rectangle, in pixels. Changing the <code>width</code>
	 * value of a Rectangle object has no effect on the <code>x</code>,
	 * <code>y</code>, and <code>height</code> properties.]]></haxe_doc>
		</width>
		<topLeft public="1">
			<c path="nme.geom.Point"/>
			<haxe_doc><![CDATA[* The location of the Rectangle object's top-left corner, determined by the
	 * <i>x</i> and <i>y</i> coordinates of the point.]]></haxe_doc>
		</topLeft>
		<top public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The <i>y</i> coordinate of the top-left corner of the rectangle. Changing
	 * the <code>top</code> property of a Rectangle object has no effect on the
	 * <code>x</code> and <code>width</code> properties. However it does affect
	 * the <code>height</code> property, whereas changing the <code>y</code>
	 * value does <i>not</i> affect the <code>height</code> property.
	 *
	 * <p>The value of the <code>top</code> property is equal to the value of the
	 * <code>y</code> property.</p>]]></haxe_doc>
		</top>
		<size public="1">
			<c path="nme.geom.Point"/>
			<haxe_doc><![CDATA[* The size of the Rectangle object, expressed as a Point object with the
	 * values of the <code>width</code> and <code>height</code> properties.]]></haxe_doc>
		</size>
		<right public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The sum of the <code>x</code> and <code>width</code> properties.]]></haxe_doc>
		</right>
		<left public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The <i>x</i> coordinate of the top-left corner of the rectangle. Changing
	 * the <code>left</code> property of a Rectangle object has no effect on the
	 * <code>y</code> and <code>height</code> properties. However it does affect
	 * the <code>width</code> property, whereas changing the <code>x</code> value
	 * does <i>not</i> affect the <code>width</code> property.
	 *
	 * <p>The value of the <code>left</code> property is equal to the value of
	 * the <code>x</code> property.</p>]]></haxe_doc>
		</left>
		<height public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The height of the rectangle, in pixels. Changing the <code>height</code>
	 * value of a Rectangle object has no effect on the <code>x</code>,
	 * <code>y</code>, and <code>width</code> properties.]]></haxe_doc>
		</height>
		<bottomRight public="1">
			<c path="nme.geom.Point"/>
			<haxe_doc><![CDATA[* The location of the Rectangle object's bottom-right corner, determined by
	 * the values of the <code>right</code> and <code>bottom</code> properties.]]></haxe_doc>
		</bottomRight>
		<bottom public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The sum of the <code>y</code> and <code>height</code> properties.]]></haxe_doc>
		</bottom>
		<new public="1" set="method">
			<f a="?x:?y:?width:?height">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new Rectangle object with the top-left corner specified by the
	 * <code>x</code> and <code>y</code> parameters and with the specified
	 * <code>width</code> and <code>height</code> parameters. If you call this
	 * function without parameters, a rectangle with <code>x</code>,
	 * <code>y</code>, <code>width</code>, and <code>height</code> properties set
	 * to 0 is created.
	 * 
	 * @param x      The <i>x</i> coordinate of the top-left corner of the
	 *               rectangle.
	 * @param y      The <i>y</i> coordinate of the top-left corner of the
	 *               rectangle.
	 * @param width  The width of the rectangle, in pixels.
	 * @param height The height of the rectangle, in pixels.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* A Rectangle object is an area defined by its position, as indicated by its
 * top-left corner point (<i>x</i>, <i>y</i>) and by its width and its height.
 *
 *
 * <p>The <code>x</code>, <code>y</code>, <code>width</code>, and
 * <code>height</code> properties of the Rectangle class are independent of
 * each other; changing the value of one property has no effect on the others.
 * However, the <code>right</code> and <code>bottom</code> properties are
 * integrally related to those four properties. For example, if you change the
 * value of the <code>right</code> property, the value of the
 * <code>width</code> property changes; if you change the <code>bottom</code>
 * property, the value of the <code>height</code> property changes. </p>
 *
 * <p>The following methods and properties use Rectangle objects:</p>
 *
 * <ul>
 *   <li>The <code>applyFilter()</code>, <code>colorTransform()</code>,
 * <code>copyChannel()</code>, <code>copyPixels()</code>, <code>draw()</code>,
 * <code>fillRect()</code>, <code>generateFilterRect()</code>,
 * <code>getColorBoundsRect()</code>, <code>getPixels()</code>,
 * <code>merge()</code>, <code>paletteMap()</code>,
 * <code>pixelDisolve()</code>, <code>setPixels()</code>, and
 * <code>threshold()</code> methods, and the <code>rect</code> property of the
 * BitmapData class</li>
 *   <li>The <code>getBounds()</code> and <code>getRect()</code> methods, and
 * the <code>scrollRect</code> and <code>scale9Grid</code> properties of the
 * DisplayObject class</li>
 *   <li>The <code>getCharBoundaries()</code> method of the TextField
 * class</li>
 *   <li>The <code>pixelBounds</code> property of the Transform class</li>
 *   <li>The <code>bounds</code> parameter for the <code>startDrag()</code>
 * method of the Sprite class</li>
 *   <li>The <code>printArea</code> parameter of the <code>addPage()</code>
 * method of the PrintJob class</li>
 * </ul>
 *
 * <p>You can use the <code>new Rectangle()</code> constructor to create a
 * Rectangle object.</p>
 *
 * <p><b>Note:</b> The Rectangle class does not define a rectangular Shape
 * display object. To draw a rectangular Shape object onscreen, use the
 * <code>drawRect()</code> method of the Graphics class.</p>]]></haxe_doc>
	</class>
	<class path="nme.geom.Transform" params="" file="/Users/joshua/Development/Haxe/nme/nme/geom/Transform.hx" extern="1">
		<getRelativeMatrix3D public="1">
			<f a="relativeTo">
				<c path="nme.display.DisplayObject"/>
				<c path="nme.geom.Matrix3D"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Returns a Matrix3D object, which can transform the space of a specified
	 * display object in relation to the current display object's space. You can
	 * use the <code>getRelativeMatrix3D()</code> method to move one
	 * three-dimensional display object relative to another three-dimensional
	 * display object.
	 * 
	 * @param relativeTo The display object relative to which the transformation
	 *                   occurs. To get a Matrix3D object relative to the stage,
	 *                   set the parameter to the <code>root</code> or
	 *                   <code>stage</code> object. To get the world-relative
	 *                   matrix of the display object, set the parameter to a
	 *                   display object that has a perspective transformation
	 *                   applied to it.
	 * @return A Matrix3D object that can be used to transform the space from the
	 *         <code>relativeTo</code> display object to the current display
	 *         object space.]]></haxe_doc>
		</getRelativeMatrix3D>
		<pixelBounds public="1" set="null">
			<c path="nme.geom.Rectangle"/>
			<haxe_doc>* A Rectangle object that defines the bounding rectangle of the display
	 * object on the stage.</haxe_doc>
		</pixelBounds>
		<matrix3D public="1">
			<c path="nme.geom.Matrix3D"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Provides access to the Matrix3D object of a three-dimensional display
	 * object. The Matrix3D object represents a transformation matrix that
	 * determines the display object's position and orientation. A Matrix3D
	 * object can also perform perspective projection.
	 *
	 * <p>If the <code>matrix</code> property is set to a value (not
	 * <code>null</code>), the <code>matrix3D</code> property is
	 * <code>null</code>. And if the <code>matrix3D</code> property is set to a
	 * value (not <code>null</code>), the <code>matrix</code> property is
	 * <code>null</code>.</p>]]></haxe_doc>
		</matrix3D>
		<matrix public="1">
			<c path="nme.geom.Matrix"/>
			<haxe_doc><![CDATA[* A Matrix object containing values that alter the scaling, rotation, and
	 * translation of the display object.
	 *
	 * <p>If the <code>matrix</code> property is set to a value (not
	 * <code>null</code>), the <code>matrix3D</code> property is
	 * <code>null</code>. And if the <code>matrix3D</code> property is set to a
	 * value (not <code>null</code>), the <code>matrix</code> property is
	 * <code>null</code>.</p>
	 * 
	 * @throws TypeError The matrix is null when being set]]></haxe_doc>
		</matrix>
		<concatenatedMatrix public="1" set="null">
			<c path="nme.geom.Matrix"/>
			<haxe_doc>* A Matrix object representing the combined transformation matrixes of the
	 * display object and all of its parent objects, back to the root level. If
	 * different transformation matrixes have been applied at different levels,
	 * all of those matrixes are concatenated into one matrix for this property.
	 * Also, for resizeable SWF content running in the browser, this property
	 * factors in the difference between stage coordinates and window coordinates
	 * due to window resizing. Thus, the property converts local coordinates to
	 * window coordinates, which may not be the same coordinate space as that of
	 * the Stage.</haxe_doc>
		</concatenatedMatrix>
		<concatenatedColorTransform public="1" set="null">
			<c path="nme.geom.ColorTransform"/>
			<haxe_doc>* A ColorTransform object representing the combined color transformations
	 * applied to the display object and all of its parent objects, back to the
	 * root level. If different color transformations have been applied at
	 * different levels, all of those transformations are concatenated into one
	 * ColorTransform object for this property.</haxe_doc>
		</concatenatedColorTransform>
		<colorTransform public="1">
			<c path="nme.geom.ColorTransform"/>
			<haxe_doc>* A ColorTransform object containing values that universally adjust the
	 * colors in the display object.
	 * 
	 * @throws TypeError The colorTransform is null when being set</haxe_doc>
		</colorTransform>
		<new public="1" set="method"><f a="displayObject">
	<c path="nme.display.DisplayObject"/>
	<e path="Void"/>
</f></new>
		<haxe_doc><![CDATA[* The Transform class provides access to color adjustment properties and two-
 * or three-dimensional transformation objects that can be applied to a
 * display object. During the transformation, the color or the orientation and
 * position of a display object is adjusted (offset) from the current values
 * or coordinates to new values or coordinates. The Transform class also
 * collects data about color and two-dimensional matrix transformations that
 * are applied to a display object and all of its parent objects. You can
 * access these combined transformations through the
 * <code>concatenatedColorTransform</code> and <code>concatenatedMatrix</code>
 * properties.
 *
 * <p>To apply color transformations: create a ColorTransform object, set the
 * color adjustments using the object's methods and properties, and then
 * assign the <code>colorTransformation</code> property of the
 * <code>transform</code> property of the display object to the new
 * ColorTransformation object.</p>
 *
 * <p>To apply two-dimensional transformations: create a Matrix object, set
 * the matrix's two-dimensional transformation, and then assign the
 * <code>transform.matrix</code> property of the display object to the new
 * Matrix object.</p>
 *
 * <p>To apply three-dimensional transformations: start with a
 * three-dimensional display object. A three-dimensional display object has a
 * <code>z</code> property value other than zero. You do not need to create
 * the Matrix3D object. For all three-dimensional objects, a Matrix3D object
 * is created automatically when you assign a <code>z</code> value to a
 * display object. You can access the display object's Matrix3D object through
 * the display object's <code>transform</code> property. Using the methods of
 * the Matrix3D class, you can add to or modify the existing transformation
 * settings. Also, you can create a custom Matrix3D object, set the custom
 * Matrix3D object's transformation elements, and then assign the new Matrix3D
 * object to the display object using the <code>transform.matrix</code>
 * property.</p>
 *
 * <p>To modify a perspective projection of the stage or root object: use the
 * <code>transform.matrix</code> property of the root display object to gain
 * access to the PerspectiveProjection object. Or, apply different perspective
 * projection properties to a display object by setting the perspective
 * projection properties of the display object's parent. The child display
 * object inherits the new properties. Specifically, create a
 * PerspectiveProjection object and set its properties, then assign the
 * PerspectiveProjection object to the <code>perspectiveProjection</code>
 * property of the parent display object's <code>transform</code> property.
 * The specified projection transformation then applies to all the display
 * object's three-dimensional children.</p>
 *
 * <p>Since both PerspectiveProjection and Matrix3D objects perform
 * perspective transformations, do not assign both to a display object at the
 * same time. Use the PerspectiveProjection object for focal length and
 * projection center changes. For more control over the perspective
 * transformation, create a perspective projection Matrix3D object.</p>]]></haxe_doc>
	</class>
	<class path="nme.geom.Vector3D" params="" file="/Users/joshua/Development/Haxe/nme/nme/geom/Vector3D.hx" extern="1">
		<X_AXIS public="1" static="1"><c path="nme.geom.Vector3D"/></X_AXIS>
		<Y_AXIS public="1" static="1"><c path="nme.geom.Vector3D"/></Y_AXIS>
		<Z_AXIS public="1" static="1"><c path="nme.geom.Vector3D"/></Z_AXIS>
		<angleBetween public="1" static="1"><f a="a:b">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
</f></angleBetween>
		<distance public="1" static="1"><f a="pt1:pt2">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
</f></distance>
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<subtract public="1" set="method"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></subtract>
		<setTo public="1">
			<f a="xa:ya:za">
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</setTo>
		<scaleBy public="1" set="method"><f a="s">
	<c path="Float"/>
	<e path="Void"/>
</f></scaleBy>
		<project public="1" set="method"><f a=""><e path="Void"/></f></project>
		<normalize public="1" set="method"><f a=""><c path="Float"/></f></normalize>
		<negate public="1" set="method"><f a=""><e path="Void"/></f></negate>
		<nearEquals public="1" set="method"><f a="toCompare:tolerance:?allFour">
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></nearEquals>
		<incrementBy public="1" set="method"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></incrementBy>
		<equals public="1" set="method"><f a="toCompare:?allFour">
	<c path="nme.geom.Vector3D"/>
	<e path="Bool"/>
	<e path="Bool"/>
</f></equals>
		<dotProduct public="1" set="method"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="Float"/>
</f></dotProduct>
		<decrementBy public="1" set="method"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<e path="Void"/>
</f></decrementBy>
		<crossProduct public="1" set="method"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></crossProduct>
		<copyFrom public="1">
			<f a="sourceVector3D">
				<c path="nme.geom.Vector3D"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</copyFrom>
		<clone public="1" set="method"><f a=""><c path="nme.geom.Vector3D"/></f></clone>
		<add public="1" set="method"><f a="a">
	<c path="nme.geom.Vector3D"/>
	<c path="nme.geom.Vector3D"/>
</f></add>
		<z public="1"><c path="Float"/></z>
		<y public="1"><c path="Float"/></y>
		<x public="1"><c path="Float"/></x>
		<w public="1"><c path="Float"/></w>
		<lengthSquared public="1" set="null"><c path="Float"/></lengthSquared>
		<length public="1" set="null"><c path="Float"/></length>
		<new public="1"><f a="?x:?y:?z:?w">
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<c path="Float"/>
	<e path="Void"/>
</f></new>
		<meta><m n=":require"><e>flash10</e></m></meta>
	</class>
	<class path="nme.media.ID3Info" params="" file="/Users/joshua/Development/Haxe/nme/nme/media/ID3Info.hx" extern="1">
		<year public="1"><c path="String"/></year>
		<track public="1"><c path="String"/></track>
		<songName public="1"><c path="String"/></songName>
		<genre public="1"><c path="String"/></genre>
		<comment public="1"><c path="String"/></comment>
		<artist public="1"><c path="String"/></artist>
		<album public="1"><c path="String"/></album>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<meta><m n=":final"/></meta>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="nme.media.Sound" params="" file="/Users/joshua/Development/Haxe/nme/nme/media/Sound.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<play public="1" set="method">
			<f a="?startTime:?loops:?sndTransform">
				<c path="Float"/>
				<c path="Int"/>
				<c path="nme.media.SoundTransform"/>
				<c path="nme.media.SoundChannel"/>
			</f>
			<haxe_doc><![CDATA[* Generates a new SoundChannel object to play back the sound. This method
	 * returns a SoundChannel object, which you access to stop the sound and to
	 * monitor volume. (To control the volume, panning, and balance, access the
	 * SoundTransform object assigned to the sound channel.)
	 * 
	 * @param startTime    The initial position in milliseconds at which playback
	 *                     should start.
	 * @param loops        Defines the number of times a sound loops back to the
	 *                     <code>startTime</code> value before the sound channel
	 *                     stops playback.
	 * @param sndTransform The initial SoundTransform object assigned to the
	 *                     sound channel.
	 * @return A SoundChannel object, which you use to control the sound. This
	 *         method returns <code>null</code> if you have no sound card or if
	 *         you run out of available sound channels. The maximum number of
	 *         sound channels available at once is 32.]]></haxe_doc>
		</play>
		<loadPCMFromByteArray public="1">
			<f a="bytes:samples:?format:?stereo:?sampleRate">
				<c path="nme.utils.ByteArray"/>
				<c path="Int"/>
				<c path="String"/>
				<e path="Bool"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</loadPCMFromByteArray>
		<loadCompressedDataFromByteArray public="1">
			<f a="bytes:bytesLength">
				<c path="nme.utils.ByteArray"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</loadCompressedDataFromByteArray>
		<load public="1" set="method">
			<f a="stream:?context">
				<c path="nme.net.URLRequest"/>
				<c path="nme.media.SoundLoaderContext"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Initiates loading of an external MP3 file from the specified URL. If you
	 * provide a valid URLRequest object to the Sound constructor, the
	 * constructor calls <code>Sound.load()</code> for you. You only need to call
	 * <code>Sound.load()</code> yourself if you don't pass a valid URLRequest
	 * object to the Sound constructor or you pass a <code>null</code> value.
	 *
	 * <p>Once <code>load()</code> is called on a Sound object, you can't later
	 * load a different sound file into that Sound object. To load a different
	 * sound file, create a new Sound object.</p>
	 *
	 * <p>When using this method, consider the following security model:</p>
	 *
	 * <ul>
	 *   <li>Calling <code>Sound.load()</code> is not allowed if the calling file
	 * is in the local-with-file-system sandbox and the sound is in a network
	 * sandbox.</li>
	 *   <li>Access from the local-trusted or local-with-networking sandbox
	 * requires permission from a website through a URL policy file.</li>
	 *   <li>You cannot connect to commonly reserved ports. For a complete list
	 * of blocked ports, see "Restricting Networking APIs" in the <i>ActionScript
	 * 3.0 Developer's Guide</i>.</li>
	 *   <li>You can prevent a SWF file from using this method by setting the
	 * <code>allowNetworking</code> parameter of the <code>object</code> and
	 * <code>embed</code> tags in the HTML page that contains the SWF
	 * content.</li>
	 * </ul>
	 *
	 * <p> In Flash Player 10 and later, if you use a multipart Content-Type (for
	 * example "multipart/form-data") that contains an upload (indicated by a
	 * "filename" parameter in a "content-disposition" header within the POST
	 * body), the POST operation is subject to the security rules applied to
	 * uploads:</p>
	 *
	 * <ul>
	 *   <li>The POST operation must be performed in response to a user-initiated
	 * action, such as a mouse click or key press.</li>
	 *   <li>If the POST operation is cross-domain (the POST target is not on the
	 * same server as the SWF file that is sending the POST request), the target
	 * server must provide a URL policy file that permits cross-domain
	 * access.</li>
	 * </ul>
	 *
	 * <p>Also, for any multipart Content-Type, the syntax must be valid
	 * (according to the RFC2046 standards). If the syntax appears to be invalid,
	 * the POST operation is subject to the security rules applied to
	 * uploads.</p>
	 *
	 * <p>In Adobe AIR, content in the <code>application</code> security sandbox
	 * (content installed with the AIR application) are not restricted by these
	 * security limitations.</p>
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @param stream  A URL that points to an external MP3 file.
	 * @param context An optional SoundLoader context object, which can define
	 *                the buffer time (the minimum number of milliseconds of MP3
	 *                data to hold in the Sound object's buffer) and can specify
	 *                whether the application should check for a cross-domain
	 *                policy file prior to loading the sound.
	 * @throws IOError       A network error caused the load to fail.
	 * @throws IOError       The <code>digest</code> property of the
	 *                       <code>stream</code> object is not <code>null</code>.
	 *                       You should only set the <code>digest</code> property
	 *                       of a URLRequest object when calling the
	 *                       <code>URLLoader.load()</code> method when loading a
	 *                       SWZ file (an Adobe platform component).
	 * @throws SecurityError Local untrusted files may not communicate with the
	 *                       Internet. You can work around this by reclassifying
	 *                       this file as local-with-networking or trusted.
	 * @throws SecurityError You cannot connect to commonly reserved ports. For a
	 *                       complete list of blocked ports, see "Restricting
	 *                       Networking APIs" in the <i>ActionScript 3.0
	 *                       Developer's Guide</i>.]]></haxe_doc>
		</load>
		<extract public="1">
			<f a="target:length:?startPosition">
				<c path="nme.utils.ByteArray"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
			</f>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Extracts raw sound data from a Sound object.
	 *
	 * <p>This method is designed to be used when you are working with
	 * dynamically generated audio, using a function you assign to the
	 * <code>sampleData</code> event for a different Sound object. That is, you
	 * can use this method to extract sound data from a Sound object. Then you
	 * can write the data to the byte array that another Sound object is using to
	 * stream dynamic audio.</p>
	 *
	 * <p>The audio data is placed in the target byte array starting from the
	 * current position of the byte array. The audio data is always exposed as
	 * 44100 Hz Stereo. The sample type is a 32-bit floating-point value, which
	 * can be converted to a Number using <code>ByteArray.readFloat()</code>.
	 * </p>
	 * 
	 * @param target A ByteArray object in which the extracted sound samples are
	 *               placed.
	 * @param length The number of sound samples to extract. A sample contains
	 *               both the left and right channels  -  that is, two 32-bit
	 *               floating-point values.
	 * @return The number of samples written to the ByteArray specified in the
	 *         <code>target</code> parameter.]]></haxe_doc>
		</extract>
		<close public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Closes the stream, causing any download of data to cease. No data may be
	 * read from the stream after the <code>close()</code> method is called.
	 * 
	 * @throws IOError The stream could not be closed, or the stream was not
	 *                 open.]]></haxe_doc>
		</close>
		<url public="1" set="null">
			<c path="String"/>
			<haxe_doc><![CDATA[* The URL from which this sound was loaded. This property is applicable only
	 * to Sound objects that were loaded using the <code>Sound.load()</code>
	 * method. For Sound objects that are associated with a sound asset from a
	 * SWF file's library, the value of the <code>url</code> property is
	 * <code>null</code>.
	 *
	 * <p>When you first call <code>Sound.load()</code>, the <code>url</code>
	 * property initially has a value of <code>null</code>, because the final URL
	 * is not yet known. The <code>url</code> property will have a non-null value
	 * as soon as an <code>open</code> event is dispatched from the Sound
	 * object.</p>
	 *
	 * <p>The <code>url</code> property contains the final, absolute URL from
	 * which a sound was loaded. The value of <code>url</code> is usually the
	 * same as the value passed to the <code>stream</code> parameter of
	 * <code>Sound.load()</code>. However, if you passed a relative URL to
	 * <code>Sound.load()</code> the value of the <code>url</code> property
	 * represents the absolute URL. Additionally, if the original URL request is
	 * redirected by an HTTP server, the value of the <code>url</code> property
	 * reflects the final URL from which the sound file was actually downloaded.
	 * This reporting of an absolute, final URL is equivalent to the behavior of
	 * <code>LoaderInfo.url</code>.</p>
	 *
	 * <p>In some cases, the value of the <code>url</code> property is truncated;
	 * see the <code>isURLInaccessible</code> property for details.</p>]]></haxe_doc>
		</url>
		<length public="1" set="null">
			<c path="Float"/>
			<haxe_doc>* The length of the current sound in milliseconds.</haxe_doc>
		</length>
		<isURLInaccessible public="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Indicates if the <code>Sound.url</code> property has been truncated. When
	 * the <code>isURLInaccessible</code> value is <code>true</code> the
	 * <code>Sound.url</code> value is only the domain of the final URL from
	 * which the sound loaded. For example, the property is truncated if the
	 * sound is loaded from <code>http://www.adobe.com/assets/hello.mp3</code>,
	 * and the <code>Sound.url</code> property has the value
	 * <code>http://www.adobe.com</code>. The <code>isURLInaccessible</code>
	 * value is <code>true</code> only when all of the following are also true:
	 * <ul>
	 *   <li>An HTTP redirect occurred while loading the sound file.</li>
	 *   <li>The SWF file calling <code>Sound.load()</code> is from a different
	 * domain than the sound file's final URL.</li>
	 *   <li>The SWF file calling <code>Sound.load()</code> does not have
	 * permission to access the sound file. Permission is granted to access the
	 * sound file the same way permission is granted for the
	 * <code>Sound.id3</code> property: establish a policy file and use the
	 * <code>SoundLoaderContext.checkPolicyFile</code> property.</li>
	 * </ul>
	 *
	 * <p><b>Note:</b> The <code>isURLInaccessible</code> property was added for
	 * Flash Player 10.1 and AIR 2.0. However, this property is made available to
	 * SWF files of all versions when the Flash runtime supports it. So, using
	 * some authoring tools in "strict mode" causes a compilation error. To work
	 * around the error use the indirect syntax
	 * <code>mySound["isURLInaccessible"]</code>, or disable strict mode. If you
	 * are using Flash Professional CS5 or Flex SDK 4.1, you can use and compile
	 * this API for runtimes released before Flash Player 10.1 and AIR 2.</p>
	 *
	 * <p>For application content in AIR, the value of this property is always
	 * <code>false</code>.</p>]]></haxe_doc>
		</isURLInaccessible>
		<isBuffering public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Returns the buffering state of external MP3 files. If the value is
	 * <code>true</code>, any playback is currently suspended while the object
	 * waits for more data.]]></haxe_doc>
		</isBuffering>
		<id3 public="1" set="null">
			<c path="nme.media.ID3Info"/>
			<haxe_doc><![CDATA[* Provides access to the metadata that is part of an MP3 file.
	 *
	 * <p>MP3 sound files can contain ID3 tags, which provide metadata about the
	 * file. If an MP3 sound that you load using the <code>Sound.load()</code>
	 * method contains ID3 tags, you can query these properties. Only ID3 tags
	 * that use the UTF-8 character set are supported.</p>
	 *
	 * <p>Flash Player 9 and later and AIR support ID3 2.0 tags, specifically 2.3
	 * and 2.4. The following tables list the standard ID3 2.0 tags and the type
	 * of content the tags represent. The <code>Sound.id3</code> property
	 * provides access to these tags through the format
	 * <code>my_sound.id3.COMM</code>, <code>my_sound.id3.TIME</code>, and so on.
	 * The first table describes tags that can be accessed either through the ID3
	 * 2.0 property name or the ActionScript property name. The second table
	 * describes ID3 tags that are supported but do not have predefined
	 * properties in ActionScript. </p>
	 *
	 * <p>When using this property, consider the Flash Player security model:</p>
	 *
	 * <ul>
	 *   <li>The <code>id3</code> property of a Sound object is always permitted
	 * for SWF files that are in the same security sandbox as the sound file. For
	 * files in other sandboxes, there are security checks.</li>
	 *   <li>When you load the sound, using the <code>load()</code> method of the
	 * Sound class, you can specify a <code>context</code> parameter, which is a
	 * SoundLoaderContext object. If you set the <code>checkPolicyFile</code>
	 * property of the SoundLoaderContext object to <code>true</code>, Flash
	 * Player checks for a URL policy file on the server from which the sound is
	 * loaded. If a policy file exists and permits access from the domain of the
	 * loading SWF file, then the file is allowed to access the <code>id3</code>
	 * property of the Sound object; otherwise it is not.</li>
	 * </ul>
	 *
	 * <p>However, in Adobe AIR, content in the <code>application</code> security
	 * sandbox (content installed with the AIR application) are not restricted by
	 * these security limitations.</p>
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>]]></haxe_doc>
		</id3>
		<bytesTotal public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* Returns the total number of bytes in this sound object.</haxe_doc>
		</bytesTotal>
		<bytesLoaded public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* Returns the currently available number of bytes in this sound object. This
	 * property is usually useful only for externally loaded files.</haxe_doc>
		</bytesLoaded>
		<new public="1" set="method">
			<f a="?stream:?context">
				<c path="nme.net.URLRequest"/>
				<c path="nme.media.SoundLoaderContext"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new Sound object. If you pass a valid URLRequest object to the
	 * Sound constructor, the constructor automatically calls the
	 * <code>load()</code> function for the Sound object. If you do not pass a
	 * valid URLRequest object to the Sound constructor, you must call the
	 * <code>load()</code> function for the Sound object yourself, or the stream
	 * will not load.
	 *
	 * <p>Once <code>load()</code> is called on a Sound object, you can't later
	 * load a different sound file into that Sound object. To load a different
	 * sound file, create a new Sound object.</p>
	 * In Flash Player 10 and later and AIR 1.5 and later, instead of using
	 * <code>load()</code>, you can use the <code>sampleData</code> event handler
	 * to load sound dynamically into the Sound object.
	 * 
	 * @param stream  The URL that points to an external MP3 file.
	 * @param context An optional SoundLoader context object, which can define
	 *                the buffer time (the minimum number of milliseconds of MP3
	 *                data to hold in the Sound object's buffer) and can specify
	 *                whether the application should check for a cross-domain
	 *                policy file prior to loading the sound.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Sound class lets you work with sound in an application. The Sound class
 * lets you create a Sound object, load and play an external MP3 file into
 * that object, close the sound stream, and access data about the sound, such
 * as information about the number of bytes in the stream and ID3 metadata.
 * More detailed control of the sound is performed through the sound source
 *  -  the SoundChannel or Microphone object for the sound  -  and through the
 * properties in the SoundTransform class that control the output of the sound
 * to the computer's speakers.
 *
 * <p>In Flash Player 10 and later and AIR 1.5 and later, you can also use
 * this class to work with sound that is generated dynamically. In this case,
 * the Sound object uses the function you assign to a <code>sampleData</code>
 * event handler to poll for sound data. The sound is played as it is
 * retrieved from a ByteArray object that you populate with sound data. You
 * can use <code>Sound.extract()</code> to extract sound data from a Sound
 * object, after which you can manipulate it before writing it back to the
 * stream for playback.</p>
 *
 * <p>To control sounds that are embedded in a SWF file, use the properties in
 * the SoundMixer class.</p>
 *
 * <p><b>Note</b>: The ActionScript 3.0 Sound API differs from ActionScript
 * 2.0. In ActionScript 3.0, you cannot take sound objects and arrange them in
 * a hierarchy to control their properties.</p>
 *
 * <p>When you use this class, consider the following security model: </p>
 *
 * <ul>
 *   <li>Loading and playing a sound is not allowed if the calling file is in
 * a network sandbox and the sound file to be loaded is local.</li>
 *   <li>By default, loading and playing a sound is not allowed if the calling
 * file is local and tries to load and play a remote sound. A user must grant
 * explicit permission to allow this type of access.</li>
 *   <li>Certain operations dealing with sound are restricted. The data in a
 * loaded sound cannot be accessed by a file in a different domain unless you
 * implement a cross-domain policy file. Sound-related APIs that fall under
 * this restriction are <code>Sound.id3</code>,
 * <code>SoundMixer.computeSpectrum()</code>,
 * <code>SoundMixer.bufferTime</code>, and the <code>SoundTransform</code>
 * class.</li>
 * </ul>
 *
 * <p>However, in Adobe AIR, content in the <code>application</code> security
 * sandbox (content installed with the AIR application) are not restricted by
 * these security limitations.</p>
 *
 * <p>For more information related to security, see the Flash Player Developer
 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
 * scope="external">Security</a>.</p>
 * 
 * @event complete   Dispatched when data has loaded successfully.
 * @event id3        Dispatched by a Sound object when ID3 data is available
 *                   for an MP3 sound.
 * @event ioError    Dispatched when an input/output error occurs that causes
 *                   a load operation to fail.
 * @event open       Dispatched when a load operation starts.
 * @event progress   Dispatched when data is received as a load operation
 *                   progresses.
 * @event sampleData Dispatched when the runtime requests new audio data.]]></haxe_doc>
	</class>
	<class path="nme.media.SoundChannel" params="" file="/Users/joshua/Development/Haxe/nme/nme/media/SoundChannel.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<stop public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Stops the sound playing in the channel.
	 *</haxe_doc>
		</stop>
		<soundTransform public="1">
			<c path="nme.media.SoundTransform"/>
			<haxe_doc>* The SoundTransform object assigned to the sound channel. A SoundTransform
	 * object includes properties for setting volume, panning, left speaker
	 * assignment, and right speaker assignment.</haxe_doc>
		</soundTransform>
		<rightPeak public="1" set="null">
			<c path="Float"/>
			<haxe_doc>* The current amplitude (volume) of the right channel, from 0 (silent) to 1
	 * (full amplitude).</haxe_doc>
		</rightPeak>
		<position public="1" set="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* When the sound is playing, the <code>position</code> property indicates in
	 * milliseconds the current point that is being played in the sound file.
	 * When the sound is stopped or paused, the <code>position</code> property
	 * indicates the last point that was played in the sound file.
	 *
	 * <p>A common use case is to save the value of the <code>position</code>
	 * property when the sound is stopped. You can resume the sound later by
	 * restarting it from that saved position. </p>
	 *
	 * <p>If the sound is looped, <code>position</code> is reset to 0 at the
	 * beginning of each loop.</p>]]></haxe_doc>
		</position>
		<leftPeak public="1" set="null">
			<c path="Float"/>
			<haxe_doc>* The current amplitude (volume) of the left channel, from 0 (silent) to 1
	 * (full amplitude).</haxe_doc>
		</leftPeak>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc><![CDATA[* The SoundChannel class controls a sound in an application. Every sound is
 * assigned to a sound channel, and the application can have multiple sound
 * channels that are mixed together. The SoundChannel class contains a
 * <code>stop()</code> method, properties for monitoring the amplitude
 * (volume) of the channel, and a property for assigning a SoundTransform
 * object to the channel.
 * 
 * @event soundComplete Dispatched when a sound has finished playing.]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.media.SoundLoaderContext" params="" file="/Users/joshua/Development/Haxe/nme/nme/media/SoundLoaderContext.hx" extern="1">
		<checkPolicyFile public="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the application should try to download a URL policy file
	 * from the loaded sound's server before beginning to load the sound. This
	 * property applies to sound that is loaded from outside the calling file's
	 * own domain using the <code>Sound.load()</code> method.
	 *
	 * <p>Set this property to <code>true</code> when you load a sound from
	 * outside the calling file's own domain and code in the calling file needs
	 * low-level access to the sound's data. Examples of low-level access to a
	 * sound's data include referencing the <code>Sound.id3</code> property to
	 * get an ID3Info object or calling the
	 * <code>SoundMixer.computeSpectrum()</code> method to get sound samples from
	 * the loaded sound. If you try to access sound data without setting the
	 * <code>checkPolicyFile</code> property to <code>true</code> at loading
	 * time, you may get a SecurityError exception because the required policy
	 * file has not been downloaded.</p>
	 *
	 * <p>If you don't need low-level access to the sound data that you are
	 * loading, avoid setting <code>checkPolicyFile</code> to <code>true</code>.
	 * Checking for a policy file consumes network bandwidth and might delay the
	 * start of your download, so it should only be done when necessary.</p>
	 *
	 * <p>When you call <code>Sound.load()</code> with
	 * <code>SoundLoaderContext.checkPolicyFile</code> set to <code>true</code>,
	 * Flash Player or AIR must either successfully download a relevant URL
	 * policy file or determine that no such policy file exists before it begins
	 * downloading the specified sound. Flash Player or AIR performs the
	 * following actions, in this order, to verify the existence of a policy
	 * file:</p>
	 *
	 * <ul>
	 *   <li>Flash Player or AIR considers policy files that have already been
	 * downloaded.</li>
	 *   <li>Flash Player or AIR tries to download any pending policy files
	 * specified in calls to <code>Security.loadPolicyFile()</code>.</li>
	 *   <li>Flash Player or AIR tries to download a policy file from the default
	 * location that corresponds to the sound's URL, which is
	 * <code>/crossdomain.xml</code> on the same server as
	 * <code>URLRequest.url</code>. (The sound's URL is specified in the
	 * <code>url</code> property of the URLRequest object passed to
	 * <code>Sound.load()</code> or the Sound() constructor function.)</li>
	 * </ul>
	 *
	 * <p>In all cases, Flash Player or AIR requires that an appropriate policy
	 * file exist on the sound's server, that it provide access to the sound file
	 * at <code>URLRequest.url</code> by virtue of the policy file's location,
	 * and that it allow the domain of the calling file to access the sound,
	 * through one or more <code><allow-access-from></code> tags. </p>
	 *
	 * <p>If you set <code>checkPolicyFile</code> to <code>true</code>, Flash
	 * Player or AIR waits until the policy file is verified before loading the
	 * sound. You should wait to perform any low-level operations on the sound
	 * data, such as calling <code>Sound.id3</code> or
	 * <code>SoundMixer.computeSpectrum()</code>, until <code>progress</code> and
	 * <code>complete</code> events are dispatched from the Sound object. </p>
	 *
	 * <p>If you set <code>checkPolicyFile</code> to <code>true</code> but no
	 * appropriate policy file is found, you will not receive an error until you
	 * perform an operation that requires a policy file, and then Flash Player or
	 * AIR throws a <code>SecurityError</code> exception. After you receive a
	 * <code>complete</code> event, you can test whether a relevant policy file
	 * was found by getting the value of <code>Sound.id3</code> within a
	 * <code>try</code> block and seeing if a <code>SecurityError</code> is
	 * thrown.</p>
	 *
	 * <p>Be careful with <code>checkPolicyFile</code> if you are downloading
	 * sound from a URL that uses server-side HTTP redirects. Flash Player or AIR
	 * tries to retrieve policy files that correspond to the <code>url</code>
	 * property of the URLRequest object passed to <code>Sound.load()</code>. If
	 * the final sound file comes from a different URL because of HTTP redirects,
	 * then the initially downloaded policy files might not be applicable to the
	 * sound's final URL, which is the URL that matters in security
	 * decisions.</p>
	 *
	 * <p>If you find yourself in this situation, here is one possible solution.
	 * After you receive a <code>progress</code> or <code>complete</code> event,
	 * you can examine the value of the <code>Sound.url</code> property, which
	 * contains the sound's final URL. Then call the
	 * <code>Security.loadPolicyFile()</code> method with a policy file URL that
	 * you calculate based on the sound's final URL. Finally, poll the value of
	 * <code>Sound.id3</code> until no exception is thrown.</p>
	 *
	 * <p>This does not apply to content in the AIR application sandbox. Content
	 * in the application sandbox always has programatic access to sound content,
	 * regardless of its origin.</p>
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>]]></haxe_doc>
		</checkPolicyFile>
		<bufferTime public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The number of milliseconds to preload a streaming sound into a buffer
	 * before the sound starts to stream.
	 *
	 * <p>Note that you cannot override the value of
	 * <code>SoundLoaderContext.bufferTime</code> by setting the global
	 * <code>SoundMixer.bufferTime</code> property. The
	 * <code>SoundMixer.bufferTime</code> property affects the buffer time for
	 * embedded streaming sounds in a SWF file and is independent of dynamically
	 * created Sound objects (that is, Sound objects created in
	 * ActionScript).</p>]]></haxe_doc>
		</bufferTime>
		<new public="1" set="method">
			<f a="?bufferTime:?checkPolicyFile">
				<c path="Float"/>
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new sound loader context object.
	 * 
	 * @param bufferTime      The number of seconds to preload a streaming sound
	 *                        into a buffer before the sound starts to stream.
	 * @param checkPolicyFile Specifies whether the existence of a URL policy
	 *                        file should be checked upon loading the object
	 *                        (<code>true</code>) or not.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The SoundLoaderContext class provides security checks for files that load
 * sound. SoundLoaderContext objects are passed as an argument to the
 * constructor and the <code>load()</code> method of the Sound class.
 *
 * <p>When you use this class, consider the following security model: </p>
 *
 * <ul>
 *   <li>Loading and playing a sound is not allowed if the calling file is in
 * a network sandbox and the sound file to be loaded is local.</li>
 *   <li>By default, loading and playing a sound is not allowed if the calling
 * is local and tries to load and play a remote sound. A user must grant
 * explicit permission to allow this.</li>
 *   <li>Certain operations dealing with sound are restricted. The data in a
 * loaded sound cannot be accessed by a file in a different domain unless you
 * implement a URL policy file. Sound-related APIs that fall under this
 * restriction are the <code>Sound.id3</code> property and the
 * <code>SoundMixer.computeSpectrum()</code>,
 * <code>SoundMixer.bufferTime</code>, and <code>SoundTransform()</code>
 * methods.</li>
 * </ul>
 *
 * <p>However, in Adobe AIR, content in the <code>application</code> security
 * sandbox (content installed with the AIR application) are not restricted by
 * these security limitations.</p>
 *
 * <p>For more information related to security, see the Flash Player Developer
 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
 * scope="external">Security</a>.</p>]]></haxe_doc>
	</class>
	<class path="nme.media.SoundTransform" params="" file="/Users/joshua/Development/Haxe/nme/nme/media/SoundTransform.hx" extern="1">
		<volume public="1">
			<c path="Float"/>
			<haxe_doc>* The volume, ranging from 0 (silent) to 1 (full volume).</haxe_doc>
		</volume>
		<rightToRight public="1">
			<c path="Float"/>
			<haxe_doc>* A value, from 0 (none) to 1 (all), specifying how much of the right input
	 * is played in the right speaker.</haxe_doc>
		</rightToRight>
		<rightToLeft public="1">
			<c path="Float"/>
			<haxe_doc>* A value, from 0 (none) to 1 (all), specifying how much of the right input
	 * is played in the left speaker.</haxe_doc>
		</rightToLeft>
		<pan public="1">
			<c path="Float"/>
			<haxe_doc>* The left-to-right panning of the sound, ranging from -1 (full pan left) to
	 * 1 (full pan right). A value of 0 represents no panning (balanced center
	 * between right and left).</haxe_doc>
		</pan>
		<leftToRight public="1">
			<c path="Float"/>
			<haxe_doc>* A value, from 0 (none) to 1 (all), specifying how much of the left input
	 * is played in the right speaker.</haxe_doc>
		</leftToRight>
		<leftToLeft public="1">
			<c path="Float"/>
			<haxe_doc>* A value, from 0 (none) to 1 (all), specifying how much of the left input
	 * is played in the left speaker.</haxe_doc>
		</leftToLeft>
		<new public="1" set="method">
			<f a="?vol:?panning">
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Creates a SoundTransform object.
	 * 
	 * @param vol     The volume, ranging from 0 (silent) to 1 (full volume).
	 * @param panning The left-to-right panning of the sound, ranging from -1
	 *                (full pan left) to 1 (full pan right). A value of 0
	 *                represents no panning (center).</haxe_doc>
		</new>
		<haxe_doc>* The SoundTransform class contains properties for volume and panning.</haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.net.SharedObject" params="" file="/Users/joshua/Development/Haxe/nme/nme/net/SharedObject.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<defaultObjectEncoding public="1" static="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The default object encoding (AMF version) for all local shared objects
	 * created in the SWF file. When local shared objects are written to disk,
	 * the <code>SharedObject.defaultObjectEncoding</code> property indicates
	 * which Action Message Format version should be used: the ActionScript 3.0
	 * format (AMF3) or the ActionScript 1.0 or 2.0 format (AMF0).
	 *
	 * <p>For more information about object encoding, including the difference
	 * between encoding in local and remote shared objects, see the description
	 * of the <code>objectEncoding</code> property.</p>
	 *
	 * <p>The default value of <code>SharedObject.defaultObjectEncoding</code> is
	 * set to use the ActionScript 3.0 format, AMF3. If you need to write local
	 * shared objects that ActionScript 2.0 or 1.0 SWF files can read, set
	 * <code>SharedObject.defaultObjectEncoding</code> to use the ActionScript
	 * 1.0 or ActionScript 2.0 format,
	 * <code>nme.net.ObjectEncoding.AMF0</code>, at the beginning of your
	 * script, before you create any local shared objects. All local shared
	 * objects created thereafter will use AMF0 encoding and can interact with
	 * older content. You cannot change the <code>objectEncoding</code> value of
	 * existing local shared objects by setting
	 * <code>SharedObject.defaultObjectEncoding</code> after the local shared
	 * objects have been created.</p>
	 *
	 * <p>To set the object encoding on a per-object basis, rather than for all
	 * shared objects created by the SWF file, set the
	 * <code>objectEncoding</code> property of the local shared object
	 * instead.</p>]]></haxe_doc>
		</defaultObjectEncoding>
		<deleteAll public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<c path="Int"/>
</f></deleteAll>
		<getDiskUsage public="1" set="method" static="1"><f a="url">
	<c path="String"/>
	<c path="Int"/>
</f></getDiskUsage>
		<getLocal public="1" set="method" static="1">
			<f a="name:?localPath:?secure">
				<c path="String"/>
				<c path="String"/>
				<e path="Bool"/>
				<c path="nme.net.SharedObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns a reference to a locally persistent shared object that is only
	 * available to the current client. If the shared object does not already
	 * exist, this method creates one. If any values passed to
	 * <code>getLocal()</code> are invalid or if the call fails, Flash Player
	 * throws an exception.
	 *
	 * <p>The following code shows how you assign the returned shared object
	 * reference to a variable:</p>
	 *
	 * <p><code>var so:SharedObject =
	 * SharedObject.getLocal("savedData");</code></p>
	 *
	 * <p><b>Note:</b> If the user has chosen to never allow local storage for
	 * this domain, the object is not saved locally, even if a value for
	 * <code>localPath</code> is specified. The exception to this rule is local
	 * content. Local content can always write shared objects from third-party
	 * domains (domains other than the domain in the current browser address bar)
	 * to disk, even if writing of third-party shared objects to disk is
	 * disallowed. </p>
	 *
	 * <p>To avoid name conflicts, Flash looks at the location of the SWF file
	 * creating the shared object. For example, if a SWF file at
	 * www.myCompany.com/apps/stockwatcher.swf creates a shared object named
	 * <code>portfolio</code>, that shared object does not conflict with another
	 * object named <code>portfolio</code> that was created by a SWF file at
	 * www.yourCompany.com/photoshoot.swf because the SWF files originate from
	 * different directories. </p>
	 *
	 * <p>Although the <code>localPath</code> parameter is optional, you should
	 * give some thought to its use, especially if other SWF files need to access
	 * the shared object. If the data in the shared object is specific to one SWF
	 * file that will not be moved to another location, then use of the default
	 * value makes sense. If other SWF files need access to the shared object, or
	 * if the SWF file that creates the shared object will later be moved, then
	 * the value of this parameter affects how accessible the shared object will
	 * be. For example, if you create a shared object with <code>localPath</code>
	 * set to the default value of the full path to the SWF file, no other SWF
	 * file can access that shared object. If you later move the original SWF
	 * file to another location, not even that SWF file can access the data
	 * already stored in the shared object.</p>
	 *
	 * <p>To avoid inadvertently restricting access to a shared object, use the
	 * <code>localpath</code> parameter. The most permissive approach is to set
	 * <code>localPath</code> to <code>/</code> (slash), which makes the shared
	 * object available to all SWF files in the domain, but increases the
	 * likelihood of name conflicts with other shared objects in the domain. A
	 * more restrictive approach is to append <code>localPath</code> with folder
	 * names that are in the full path to the SWF file. For example, for a
	 * <code>portfolio</code> shared object created by the SWF file at
	 * www.myCompany.com/apps/stockwatcher.swf, you could set the
	 * <code>localPath</code> parameter to <code>/</code>, <code>/apps</code>, or
	 * <code>/apps/stockwatcher.swf</code>. You must determine which approach
	 * provides optimal flexibility for your application.</p>
	 *
	 * <p>When using this method, consider the following security model:
	 * <ul>
	 *   <li>You cannot access shared objects across sandbox boundaries.</li>
	 *   <li>Users can restrict shared object access by using the Flash Player
	 * Settings dialog box or the Settings Manager. By default, an application
	 * can create shared objects of up 100 KB of data per domain. Administrators
	 * and users can also place restrictions on the ability to write to the file
	 * system.</li>
	 * </ul>
	 * </p>
	 *
	 * <p>Suppose you publish SWF file content to be played back as local files
	 * (either locally installed SWF files or EXE files), and you need to access
	 * a specific shared object from more than one local SWF file. In this
	 * situation, be aware that for local files, two different locations might be
	 * used to store shared objects. The domain that is used depends on the
	 * security permissions granted to the local file that created the shared
	 * object. Local files can have three different levels of permissions:
	 * <ol>
	 *   <li>Access to the local filesystem only.</li>
	 *   <li>Access to the network only.</li>
	 *   <li>Access to both the network and the local filesystem.</li>
	 * </ol>
	 * </p>
	 *
	 * <p>Local files with access to the local filesystem (level 1 or 3) store
	 * their shared objects in one location. Local files without access to the
	 * local filesystem (level 2) store their shared objects in another
	 * location.</p>
	 *
	 * <p>You can prevent a SWF file from using this method by setting the
	 * <code>allowNetworking</code> parameter of the the <code>object</code> and
	 * <code>embed</code> tags in the HTML page that contains the SWF
	 * content.</p>
	 *
	 * <p>For more information, see the Flash Player Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @param name      The name of the object. The name can include forward
	 *                  slashes (<code>/</code>); for example,
	 *                  <code>work/addresses</code> is a legal name. Spaces are
	 *                  not allowed in a shared object name, nor are the
	 *                  following characters: <pre xml:space="preserve"> ~ % & \
	 *                  ; : " ' , < > ? # </pre>
	 * @param localPath The full or partial path to the SWF file that created the
	 *                  shared object, and that determines where the shared
	 *                  object will be stored locally. If you do not specify this
	 *                  parameter, the full path is used.
	 * @param secure    Determines whether access to this shared object is
	 *                  restricted to SWF files that are delivered over an HTTPS
	 *                  connection. If your SWF file is delivered over HTTPS,
	 *                  this parameter's value has the following effects:
	 *                  <ul>
	 *                    <li>If this parameter is set to <code>true</code>,
	 *                  Flash Player creates a new secure shared object or gets a
	 *                  reference to an existing secure shared object. This
	 *                  secure shared object can be read from or written to only
	 *                  by SWF files delivered over HTTPS that call
	 *                  <code>SharedObject.getLocal()</code> with the
	 *                  <code>secure</code> parameter set to
	 *                  <code>true</code>.</li>
	 *                    <li>If this parameter is set to <code>false</code>,
	 *                  Flash Player creates a new shared object or gets a
	 *                  reference to an existing shared object that can be read
	 *                  from or written to by SWF files delivered over non-HTTPS
	 *                  connections.</li>
	 *                  </ul>
	 *
	 *                  <p>If your SWF file is delivered over a non-HTTPS
	 *                  connection and you try to set this parameter to
	 *                  <code>true</code>, the creation of a new shared object
	 *                  (or the access of a previously created secure shared
	 *                  object) fails and <code>null</code> is returned.
	 *                  Regardless of the value of this parameter, the created
	 *                  shared objects count toward the total amount of disk
	 *                  space allowed for a domain.</p>
	 *
	 *                  <p>The following diagram shows the use of the
	 *                  <code>secure</code> parameter:</p>
	 * @return A reference to a shared object that is persistent locally and is
	 *         available only to the current client. If Flash Player can't create
	 *         or find the shared object (for example, if <code>localPath</code>
	 *         was specified but no such directory exists), this method throws an
	 *         exception.
	 * @throws Error Flash Player cannot create the shared object for whatever
	 *               reason. This error might occur is if persistent shared
	 *               object creation and storage by third-party Flash content is
	 *               prohibited (does not apply to local content). Users can
	 *               prohibit third-party persistent shared objects on the Global
	 *               Storage Settings panel of the Settings Manager, located at
	 *               <a
	 *               href="http://www.adobe.com/support/documentation/en/flashplayer/help/settings_manager03.html"
	 *               scope="external">http://www.adobe.com/support/documentation/en/flashplayer/help/settings_manager03.html</a>.]]></haxe_doc>
		</getLocal>
		<getRemote public="1" set="method" static="1">
			<f a="name:?remotePath:?persistence:?secure">
				<c path="String"/>
				<c path="String"/>
				<d/>
				<e path="Bool"/>
				<c path="nme.net.SharedObject"/>
			</f>
			<haxe_doc><![CDATA[* Returns a reference to a shared object on Flash Media Server that multiple
	 * clients can access. If the remote shared object does not already exist,
	 * this method creates one.
	 *
	 * <p> To create a remote shared object, call <code>getRemote()</code> the
	 * call <code>connect()</code> to connect the remote shared object to the
	 * server, as in the following:</p>
	 *
	 * <p> To confirm that the local and remote copies of the shared object are
	 * synchronized, listen for and handle the <code>sync</code> event. All
	 * clients that want to share this object must pass the same values for the
	 * <code>name</code> and <code>remotePath</code> parameters. </p>
	 *
	 * <p>To create a shared object that is available only to the current client,
	 * use <code>SharedObject.getLocal()</code>. </p>
	 * 
	 * @param name        The name of the remote shared object. The name can
	 *                    include forward slashes (/); for example,
	 *                    work/addresses is a legal name. Spaces are not allowed
	 *                    in a shared object name, nor are the following
	 *                    characters: <pre xml:space="preserve"> ~ % & \ ; : " '
	 *                    , > ? ? #</pre>
	 * @param remotePath  The URI of the server on which the shared object will
	 *                    be stored. This URI must be identical to the URI of the
	 *                    NetConnection object passed to the
	 *                    <code>connect()</code> method.
	 * @param persistence Specifies whether the attributes of the shared object's
	 *                    data property are persistent locally, remotely, or
	 *                    both. This parameter can also specify where the shared
	 *                    object will be stored locally. Acceptable values are as
	 *                    follows:
	 *                    <ul>
	 *                      <li>A value of <code>false</code> specifies that the
	 *                    shared object is not persistent on the client or
	 *                    server.</li>
	 *                      <li>A value of <code>true</code> specifies that the
	 *                    shared object is persistent only on the server.</li>
	 *                      <li>A full or partial local path to the shared object
	 *                    indicates that the shared object is persistent on the
	 *                    client and the server. On the client, it is stored in
	 *                    the specified path; on the server, it is stored in a
	 *                    subdirectory within the application directory.</li>
	 *                    </ul>
	 *
	 *                    <p><b>Note:</b> If the user has chosen to never allow
	 *                    local storage for this domain, the object will not be
	 *                    saved locally, even if a local path is specified for
	 *                    persistence. For more information, see the class
	 *                    description.</p>
	 * @param secure      Determines whether access to this shared object is
	 *                    restricted to SWF files that are delivered over an
	 *                    HTTPS connection. For more information, see the
	 *                    description of the <code>secure</code> parameter in the
	 *                    <code>getLocal</code> method entry.
	 * @return A reference to an object that can be shared across multiple
	 *         clients.
	 * @throws Error Flash Player can't create or find the shared object. This
	 *               might occur if nonexistent paths were specified for the
	 *               <code>remotePath</code> and <code>persistence</code>
	 *               parameters.]]></haxe_doc>
		</getRemote>
		<setProperty public="1" set="method">
			<f a="propertyName:?value">
				<c path="String"/>
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Updates the value of a property in a shared object and indicates to the
	 * server that the value of the property has changed. The
	 * <code>setProperty()</code> method explicitly marks properties as changed,
	 * or dirty.
	 *
	 * <p>For more information about remote shared objects see the <a
	 * href="http://www.adobe.com/go/learn_fms_docs_en"> Flash Media Server
	 * documentation</a>.</p>
	 *
	 * <p><b>Note:</b> The <code>SharedObject.setProperty()</code> method
	 * implements the <code>setDirty()</code> method. In most cases, such as when
	 * the value of a property is a primitive type like String or Number, you
	 * would use <code>setProperty()</code> instead of <code>setDirty</code>.
	 * However, when the value of a property is an object that contains its own
	 * properties, use <code>setDirty()</code> to indicate when a value within
	 * the object has changed. In general, it is a good idea to call
	 * <code>setProperty()</code> rather than <code>setDirty()</code>, because
	 * <code>setProperty()</code> updates a property value only when that value
	 * has changed, whereas <code>setDirty()</code> forces synchronization on all
	 * subscribed clients.</p>
	 * 
	 * @param propertyName The name of the property in the shared object.
	 * @param value        The value of the property (an ActionScript object), or
	 *                     <code>null</code> to delete the property.]]></haxe_doc>
		</setProperty>
		<setDirty public="1" set="method">
			<f a="propertyName">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Indicates to the server that the value of a property in the shared object
	 * has changed. This method marks properties as <i>dirty</i>, which means
	 * changed.
	 *
	 * <p> Call the <code>SharedObject.setProperty()</code> to create properties
	 * for a shared object. </p>
	 *
	 * <p> The <code>SharedObject.setProperty()</code> method implements
	 * <code>setDirty()</code>. In most cases, such as when the value of a
	 * property is a primitive type like String or Number, you can call
	 * <code>setProperty()</code> instead of calling <code>setDirty()</code>.
	 * However, when the value of a property is an object that contains its own
	 * properties, call <code>setDirty()</code> to indicate when a value within
	 * the object has changed. </p>
	 * 
	 * @param propertyName The name of the property that has changed.]]></haxe_doc>
		</setDirty>
		<flush public="1" set="method">
			<f a="?minDiskSpace">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Immediately writes a locally persistent shared object to a local file. If
	 * you don't use this method, Flash Player writes the shared object to a file
	 * when the shared object session ends  -  that is, when the SWF file is
	 * closed, when the shared object is garbage-collected because it no longer
	 * has any references to it, or when you call
	 * <code>SharedObject.clear()</code> or <code>SharedObject.close()</code>.
	 *
	 * <p>If this method returns <code>SharedObjectFlushStatus.PENDING</code>,
	 * Flash Player displays a dialog box asking the user to increase the amount
	 * of disk space available to objects from this domain. To allow space for
	 * the shared object to grow when it is saved in the future, which avoids
	 * return values of <code>PENDING</code>, pass a value for
	 * <code>minDiskSpace</code>. When Flash Player tries to write the file, it
	 * looks for the number of bytes passed to <code>minDiskSpace</code>, instead
	 * of looking for enough space to save the shared object at its current size.
	 * </p>
	 *
	 * <p>For example, if you expect a shared object to grow to a maximum size of
	 * 500 bytes, even though it might start out much smaller, pass 500 for
	 * <code>minDiskSpace</code>. If Flash asks the user to allot disk space for
	 * the shared object, it asks for 500 bytes. After the user allots the
	 * requested amount of space, Flash won't have to ask for more space on
	 * future attempts to flush the object (as long as its size doesn't exceed
	 * 500 bytes). </p>
	 *
	 * <p>After the user responds to the dialog box, this method is called again.
	 * A <code>netStatus</code> event is dispatched with a <code>code</code>
	 * property of <code>SharedObject.Flush.Success</code> or
	 * <code>SharedObject.Flush.Failed</code>. </p>
	 * 
	 * @param minDiskSpace The minimum disk space, in bytes, that must be
	 *                     allotted for this object.
	 * @return Either of the following values:
	 *         <ul>
	 *           <li><code>SharedObjectFlushStatus.PENDING</code>: The user has
	 *         permitted local information storage for objects from this domain,
	 *         but the amount of space allotted is not sufficient to store the
	 *         object. Flash Player prompts the user to allow more space. To
	 *         allow space for the shared object to grow when it is saved, thus
	 *         avoiding a <code>SharedObjectFlushStatus.PENDING</code> return
	 *         value, pass a value for <code>minDiskSpace</code>. </li>
	 *           <li><code>SharedObjectFlushStatus.FLUSHED</code>: The shared
	 *         object has been successfully written to a file on the local
	 *         disk.</li>
	 *         </ul>
	 * @throws Error Flash Player cannot write the shared object to disk. This
	 *               error might occur if the user has permanently disallowed
	 *               local information storage for objects from this domain.
	 *
	 *               <p><b>Note:</b> Local content can always write shared
	 *               objects from third-party domains (domains other than the
	 *               domain in the current browser address bar) to disk, even if
	 *               writing of third-party shared objects to disk is
	 *               disallowed.</p>]]></haxe_doc>
		</flush>
		<close public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Closes the connection between a remote shared object and the server. If a
	 * remote shared object is locally persistent, the user can make changes to
	 * the local copy of the object after this method is called. Any changes made
	 * to the local object are sent to the server the next time the user connects
	 * to the remote shared object.
	 *</haxe_doc>
		</close>
		<clear public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* For local shared objects, purges all of the data and deletes the shared
	 * object from the disk. The reference to the shared object is still active,
	 * but its data properties are deleted.
	 *
	 * <p> For remote shared objects used with Flash Media Server,
	 * <code>clear()</code> disconnects the object and purges all of the data. If
	 * the shared object is locally persistent, this method also deletes the
	 * shared object from the disk. The reference to the shared object is still
	 * active, but its data properties are deleted. </p>
	 *]]></haxe_doc>
		</clear>
		<size public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The current size of the shared object, in bytes.
	 *
	 * <p>Flash calculates the size of a shared object by stepping through all of
	 * its data properties; the more data properties the object has, the longer
	 * it takes to estimate its size. Estimating object size can take significant
	 * processing time, so you may want to avoid using this method unless you
	 * have a specific need for it.</p>]]></haxe_doc>
		</size>
		<objectEncoding public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The object encoding (AMF version) for this shared object. When a local
	 * shared object is written to disk, the <code>objectEncoding</code> property
	 * indicates which Action Message Format version should be used: the
	 * ActionScript 3.0 format (AMF3) or the ActionScript 1.0 or 2.0 format
	 * (AMF0).
	 *
	 * <p>Object encoding is handled differently depending if the shared object
	 * is local or remote.</p>
	 *
	 * <ul>
	 *   <li><b>Local shared objects</b>. You can get or set the value of the
	 * <code>objectEncoding</code> property for local shared objects. The value
	 * of <code>objectEncoding</code> affects what formatting is used for
	 * <i>writing</i> this local shared object. If this local shared object must
	 * be readable by ActionScript 2.0 or 1.0 SWF files, set
	 * <code>objectEncoding</code> to <code>ObjectEncoding.AMF0</code>. Even if
	 * object encoding is set to write AMF3, Flash Player can still read AMF0
	 * local shared objects. That is, if you use the default value of this
	 * property, <code>ObjectEncoding.AMF3</code>, your SWF file can still read
	 * shared objects created by ActionScript 2.0 or 1.0 SWF files. </li>
	 *   <li><b>Remote shared objects</b>. When connected to the server, a remote
	 * shared object inherits its <code>objectEncoding</code> setting from the
	 * associated NetConnection instance (the instance used to connect to the
	 * remote shared object). When not connected to the server, a remote shared
	 * object inherits the <code>defaultObjectEncoding</code> setting from the
	 * associated NetConnection instance. Because the value of a remote shared
	 * object's <code>objectEncoding</code> property is determined by the
	 * NetConnection instance, this property is read-only for remote shared
	 * objects. </li>
	 * </ul>
	 * 
	 * @throws ReferenceError You attempted to set the value of the
	 *                        <code>objectEncoding</code> property on a remote
	 *                        shared object. This property is read-only for
	 *                        remote shared objects because its value is
	 *                        determined by the associated NetConnection
	 *                        instance.]]></haxe_doc>
		</objectEncoding>
		<fps public="1" get="null">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Specifies the number of times per second that a client's changes to a
	 * shared object are sent to the server.
	 *
	 * <p>Use this method when you want to control the amount of traffic between
	 * the client and the server. For example, if the connection between the
	 * client and server is relatively slow, you may want to set <code>fps</code>
	 * to a relatively low value. Conversely, if the client is connected to a
	 * multiuser application in which timing is important, you may want to set
	 * <code>fps</code> to a relatively high value.</p>
	 *
	 * <p>Setting <code>fps</code> will trigger a <code>sync</code> event and
	 * update all changes to the server. If you only want to update the server
	 * manually, set <code>fps</code> to 0.</p>
	 *
	 * <p>Changes are not sent to the server until the <code>sync</code> event
	 * has been dispatched. That is, if the response time from the server is
	 * slow, updates may be sent to the server less frequently than the value
	 * specified in this property. </p>]]></haxe_doc>
		</fps>
		<data public="1" set="null">
			<d/>
			<haxe_doc><![CDATA[* The collection of attributes assigned to the <code>data</code> property of
	 * the object; these attributes can be shared and stored. Each attribute can
	 * be an object of any ActionScript or JavaScript type  -  Array, Number,
	 * Boolean, ByteArray, XML, and so on. For example, the following lines
	 * assign values to various aspects of a shared object:
	 *
	 * <p> For remote shared objects used with a server, all attributes of the
	 * <code>data</code> property are available to all clients connected to the
	 * shared object, and all attributes are saved if the object is persistent.
	 * If one client changes the value of an attribute, all clients now see the
	 * new value. </p>]]></haxe_doc>
		</data>
		<client public="1">
			<d/>
			<haxe_doc><![CDATA[* Indicates the object on which callback methods are invoked. The default
	 * object is <code>this</code>. You can set the client property to another
	 * object, and callback methods will be invoked on that other object.
	 * 
	 * @throws TypeError The <code>client</code> property must be set to a
	 *                   non-null object.]]></haxe_doc>
		</client>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc><![CDATA[* The SharedObject class is used to read and store limited amounts of data on
 * a user's computer or on a server. Shared objects offer real-time data
 * sharing between multiple client SWF files and objects that are persistent
 * on the local computer or remote server. Local shared objects are similar to
 * browser cookies and remote shared objects are similar to real-time data
 * transfer devices. To use remote shared objects, you need Adobe Flash Media
 * Server.
 *
 * <p>Use shared objects to do the following:</p>
 *
 * <ul>
 *   <li><b>Maintain local persistence</b>. This is the simplest way to use a
 * shared object, and does not require Flash Media Server. For example, you
 * can call <code>SharedObject.getLocal()</code> to create a shared object in
 * an application, such as a calculator with memory. When the user closes the
 * calculator, Flash Player saves the last value in a shared object on the
 * user's computer. The next time the calculator is run, it contains the
 * values it had previously. Alternatively, if you set the shared object's
 * properties to <code>null</code> before the calculator application is
 * closed, the next time the application runs, it opens without any values.
 * Another example of maintaining local persistence is tracking user
 * preferences or other data for a complex website, such as a record of which
 * articles a user read on a news site. Tracking this information allows you
 * to display articles that have already been read differently from new,
 * unread articles. Storing this information on the user's computer reduces
 * server load.</li>
 *   <li><b>Store and share data on Flash Media Server</b>. A shared object
 * can store data on the server for other clients to retrieve. For example,
 * call <code>SharedObject.getRemote()</code> to create a remote shared
 * object, such as a phone list, that is persistent on the server. Whenever a
 * client makes changes to the shared object, the revised data is available to
 * all clients currently connected to the object or who later connect to it.
 * If the object is also persistent locally, and a client changes data while
 * not connected to the server, the data is copied to the remote shared object
 * the next time the client connects to the object.</li>
 *   <li><b>Share data in real time</b>. A shared object can share data among
 * multiple clients in real time. For example, you can open a remote shared
 * object that stores a list of users connected to a chat room that is visible
 * to all clients connected to the object. When a user enters or leaves the
 * chat room, the object is updated and all clients that are connected to the
 * object see the revised list of chat room users.</li>
 * </ul>
 *
 * <p> To create a local shared object, call
 * <code>SharedObject.getLocal()</code>. To create a remote shared object,
 * call <code>SharedObject.getRemote()</code>.</p>
 *
 * <p> When an application closes, shared objects are <i>flushed</i>, or
 * written to a disk. You can also call the <code>flush()</code> method to
 * explicitly write data to a disk.</p>
 *
 * <p><b>Local disk space considerations.</b> Local shared objects have some
 * limitations that are important to consider as you design your application.
 * Sometimes SWF files may not be allowed to write local shared objects, and
 * sometimes the data stored in local shared objects can be deleted without
 * your knowledge. Flash Player users can manage the disk space that is
 * available to individual domains or to all domains. When users decrease the
 * amount of disk space available, some local shared objects may be deleted.
 * Flash Player users also have privacy controls that can prevent third-party
 * domains (domains other than the domain in the current browser address bar)
 * from reading or writing local shared objects.</p>
 *
 * <p><b>Note</b>: SWF files that are stored and run on a local computer, not
 * from a remote server, can always write third-party shared objects to disk.
 * For more information about third-party shared objects, see the <a
 * href="http://www.macromedia.com/support/documentation/en/flashplayer/help/settings_manager03.html"
 * scope="external">Global Storage Settings panel</a> in Flash Player
 * Help.</p>
 *
 * <p>It's a good idea to check for failures related to the amount of disk
 * space and to user privacy controls. Perform these checks when you call
 * <code>getLocal()</code> and <code>flush()</code>:
 * <ul>
 *   <li><code>SharedObject.getLocal()</code>  -  Flash Player throws an
 * exception when a call to this method fails, such as when the user has
 * disabled third-party shared objects and the domain of your SWF file does
 * not match the domain in the browser address bar.</li>
 *   <li><code>SharedObject.flush()</code>  -  Flash Player throws an
 * exception when a call to this method fails. It returns
 * <code>SharedObjectFlushStatus.FLUSHED</code> when it succeeds. It returns
 * <code>SharedObjectFlushStatus.PENDING</code> when additional storage space
 * is needed. Flash Player prompts the user to allow an increase in storage
 * space for locally saved information. Thereafter, the <code>netStatus</code>
 * event is dispatched with an information object indicating whether the flush
 * failed or succeeded.</li>
 * </ul>
 * </p>
 *
 * <p>If your SWF file attempts to create or modify local shared objects, make
 * sure that your SWF file is at least 215 pixels wide and at least 138 pixels
 * high (the minimum dimensions for displaying the dialog box that prompts
 * users to increase their local shared object storage limit). If your SWF
 * file is smaller than these dimensions and an increase in the storage limit
 * is required, <code>SharedObject.flush()</code> fails, returning
 * <code>SharedObjectFlushedStatus.PENDING</code> and dispatching the
 * <code>netStatus</code> event.</p>
 *
 * <p> <b>Remote shared objects.</b> With Flash Media Server, you can create
 * and use remote shared objects, that are shared in real-time by all clients
 * connected to your application. When one client changes a property of a
 * remote shared object, the property is changed for all connected clients.
 * You can use remote shared objects to synchronize clients, for example,
 * users in a multi-player game. </p>
 *
 * <p> Each remote shared object has a <code>data</code> property which is an
 * Object with properties that store data. Call <code>setProperty()</code> to
 * change an property of the data object. The server updates the properties,
 * dispatches a <code>sync</code> event, and sends the properties back to the
 * connected clients. </p>
 *
 * <p> You can choose to make remote shared objects persistent on the client,
 * the server, or both. By default, Flash Player saves locally persistent
 * remote shared objects up to 100K in size. When you try to save a larger
 * object, Flash Player displays the Local Storage dialog box, which lets the
 * user allow or deny local storage for the shared object. Make sure your
 * Stage size is at least 215 by 138 pixels; this is the minimum size Flash
 * requires to display the dialog box. </p>
 *
 * <p> If the user selects Allow, the server saves the shared object and
 * dispatches a <code>netStatus</code> event with a <code>code</code> property
 * of <code>SharedObject.Flush.Success</code>. If the user select Deny, the
 * server does not save the shared object and dispatches a
 * <code>netStatus</code> event with a <code>code</code> property of
 * <code>SharedObject.Flush.Failed</code>. </p>
 * 
 * @event asyncError Dispatched when an exception is thrown asynchronously  - 
 *                   that is, from native asynchronous code.
 * @event netStatus  Dispatched when a SharedObject instance is reporting its
 *                   status or error condition. The <code>netStatus</code>
 *                   event contains an <code>info</code> property, which is an
 *                   information object that contains specific information
 *                   about the event, such as whether a connection attempt
 *                   succeeded or whether the shared object was successfully
 *                   written to the local disk.
 * @event sync       Dispatched when a remote shared object has been updated
 *                   by the server.]]></haxe_doc>
	</class>
	<class path="nme.net.SharedObjectFlushStatus" params="" file="/Users/joshua/Development/Haxe/nme/nme/net/SharedObjectFlushStatus.hx" extern="1">
		<FLUSHED public="1" static="1">
			<c path="String"/>
			<haxe_doc>* Indicates that the flush completed successfully.</haxe_doc>
		</FLUSHED>
		<PENDING public="1" static="1">
			<c path="String"/>
			<haxe_doc>* Indicates that the user is being prompted to increase disk space for the
	 * shared object before the flush can occur.</haxe_doc>
		</PENDING>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc><![CDATA[* The SharedObjectFlushStatus class provides values for the code returned
 * from a call to the <code>SharedObject.flush()</code> method.]]></haxe_doc>
	</class>
	<class path="nme.net.URLLoader" params="" file="/Users/joshua/Development/Haxe/nme/nme/net/URLLoader.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<load public="1" set="method">
			<f a="request">
				<c path="nme.net.URLRequest"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Sends and loads data from the specified URL. The data can be received as
	 * text, raw binary data, or URL-encoded variables, depending on the value
	 * you set for the <code>dataFormat</code> property. Note that the default
	 * value of the <code>dataFormat</code> property is text. If you want to send
	 * data to the specified URL, you can set the <code>data</code> property in
	 * the URLRequest object.
	 *
	 * <p><b>Note:</b> If a file being loaded contains non-ASCII characters (as
	 * found in many non-English languages), it is recommended that you save the
	 * file with UTF-8 or UTF-16 encoding as opposed to a non-Unicode format like
	 * ASCII.</p>
	 *
	 * <p> A SWF file in the local-with-filesystem sandbox may not load data
	 * from, or provide data to, a resource that is in the network sandbox.</p>
	 *
	 * <p> By default, the calling SWF file and the URL you load must be in
	 * exactly the same domain. For example, a SWF file at www.adobe.com can load
	 * data only from sources that are also at www.adobe.com. To load data from a
	 * different domain, place a URL policy file on the server hosting the
	 * data.</p>
	 *
	 * <p>You cannot connect to commonly reserved ports. For a complete list of
	 * blocked ports, see "Restricting Networking APIs" in the <i>ActionScript
	 * 3.0 Developer's Guide</i>.</p>
	 *
	 * <p> In Flash Player 10 and later, if you use a multipart Content-Type (for
	 * example "multipart/form-data") that contains an upload (indicated by a
	 * "filename" parameter in a "content-disposition" header within the POST
	 * body), the POST operation is subject to the security rules applied to
	 * uploads:</p>
	 *
	 * <ul>
	 *   <li>The POST operation must be performed in response to a user-initiated
	 * action, such as a mouse click or key press.</li>
	 *   <li>If the POST operation is cross-domain (the POST target is not on the
	 * same server as the SWF file that is sending the POST request), the target
	 * server must provide a URL policy file that permits cross-domain
	 * access.</li>
	 * </ul>
	 *
	 * <p>Also, for any multipart Content-Type, the syntax must be valid
	 * (according to the RFC2046 standards). If the syntax appears to be invalid,
	 * the POST operation is subject to the security rules applied to
	 * uploads.</p>
	 *
	 * <p>For more information related to security, see the Flash Player
	 * Developer Center Topic: <a
	 * href="http://www.adobe.com/go/devnet_security_en"
	 * scope="external">Security</a>.</p>
	 * 
	 * @param request A URLRequest object specifying the URL to download.
	 * @throws ArgumentError <code>URLRequest.requestHeader</code> objects may
	 *                       not contain certain prohibited HTTP request headers.
	 *                       For more information, see the URLRequestHeader class
	 *                       description.
	 * @throws MemoryError   This error can occur for the following reasons: 1)
	 *                       Flash Player or AIR cannot convert the
	 *                       <code>URLRequest.data</code> parameter from UTF8 to
	 *                       MBCS. This error is applicable if the URLRequest
	 *                       object passed to <code>load()</code> is set to
	 *                       perform a <code>GET</code> operation and if
	 *                       <code>System.useCodePage</code> is set to
	 *                       <code>true</code>. 2) Flash Player or AIR cannot
	 *                       allocate memory for the <code>POST</code> data. This
	 *                       error is applicable if the URLRequest object passed
	 *                       to <code>load</code> is set to perform a
	 *                       <code>POST</code> operation.
	 * @throws SecurityError Local untrusted files may not communicate with the
	 *                       Internet. This may be worked around by reclassifying
	 *                       this file as local-with-networking or trusted.
	 * @throws SecurityError You are trying to connect to a commonly reserved
	 *                       port. For a complete list of blocked ports, see
	 *                       "Restricting Networking APIs" in the <i>ActionScript
	 *                       3.0 Developer's Guide</i>.
	 * @throws TypeError     The value of the request parameter or the
	 *                       <code>URLRequest.url</code> property of the
	 *                       URLRequest object passed are <code>null</code>.
	 * @event complete           Dispatched after data has loaded successfully.
	 * @event httpResponseStatus Dispatched if a call to the <code>load()</code>
	 *                           method attempts to access data over HTTP and
	 *                           Adobe AIR is able to detect and return the
	 *                           status code for the request.
	 * @event httpStatus         If access is over HTTP, and the current Flash
	 *                           Player environment supports obtaining status
	 *                           codes, you may receive these events in addition
	 *                           to any <code>complete</code> or
	 *                           <code>error</code> event.
	 * @event ioError            The load operation could not be completed.
	 * @event open               Dispatched when a load operation commences.
	 * @event progress           Dispatched when data is received as the download
	 *                           operation progresses.
	 * @event securityError      A load operation attempted to retrieve data from
	 *                           a server outside the caller's security sandbox.
	 *                           This may be worked around using a policy file on
	 *                           the server.
	 * @event securityError      A load operation attempted to load a SWZ file (a
	 *                           Adobe platform component), but the certificate
	 *                           is invalid or the digest does not match the
	 *                           component.]]></haxe_doc>
		</load>
		<close public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Closes the load operation in progress. Any load operation in progress is
	 * immediately terminated. If no URL is currently being streamed, an invalid
	 * stream error is thrown.
	 *</haxe_doc>
		</close>
		<dataFormat public="1">
			<e path="nme.net.URLLoaderDataFormat"/>
			<haxe_doc><![CDATA[* Controls whether the downloaded data is received as text
	 * (<code>URLLoaderDataFormat.TEXT</code>), raw binary data
	 * (<code>URLLoaderDataFormat.BINARY</code>), or URL-encoded variables
	 * (<code>URLLoaderDataFormat.VARIABLES</code>).
	 *
	 * <p>If the value of the <code>dataFormat</code> property is
	 * <code>URLLoaderDataFormat.TEXT</code>, the received data is a string
	 * containing the text of the loaded file.</p>
	 *
	 * <p>If the value of the <code>dataFormat</code> property is
	 * <code>URLLoaderDataFormat.BINARY</code>, the received data is a ByteArray
	 * object containing the raw binary data.</p>
	 *
	 * <p>If the value of the <code>dataFormat</code> property is
	 * <code>URLLoaderDataFormat.VARIABLES</code>, the received data is a
	 * URLVariables object containing the URL-encoded variables.</p>
	 * 
	 * @default URLLoaderDataFormat.TEXT]]></haxe_doc>
		</dataFormat>
		<data public="1">
			<d/>
			<haxe_doc><![CDATA[* The data received from the load operation. This property is populated only
	 * when the load operation is complete. The format of the data depends on the
	 * setting of the <code>dataFormat</code> property:
	 *
	 * <p>If the <code>dataFormat</code> property is
	 * <code>URLLoaderDataFormat.TEXT</code>, the received data is a string
	 * containing the text of the loaded file.</p>
	 *
	 * <p>If the <code>dataFormat</code> property is
	 * <code>URLLoaderDataFormat.BINARY</code>, the received data is a ByteArray
	 * object containing the raw binary data.</p>
	 *
	 * <p>If the <code>dataFormat</code> property is
	 * <code>URLLoaderDataFormat.VARIABLES</code>, the received data is a
	 * URLVariables object containing the URL-encoded variables.</p>]]></haxe_doc>
		</data>
		<bytesTotal public="1">
			<c path="Int"/>
			<haxe_doc>* Indicates the total number of bytes in the downloaded data. This property
	 * contains 0 while the load operation is in progress and is populated when
	 * the operation is complete. Also, a missing Content-Length header will
	 * result in bytesTotal being indeterminate.</haxe_doc>
		</bytesTotal>
		<bytesLoaded public="1">
			<c path="Int"/>
			<haxe_doc>* Indicates the number of bytes that have been loaded thus far during the
	 * load operation.</haxe_doc>
		</bytesLoaded>
		<new public="1" set="method">
			<f a="?request">
				<c path="nme.net.URLRequest"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a URLLoader object.
	 * 
	 * @param request A URLRequest object specifying the URL to download. If this
	 *                parameter is omitted, no load operation begins. If
	 *                specified, the load operation begins immediately (see the
	 *                <code>load</code> entry for more information).]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The URLLoader class downloads data from a URL as text, binary data, or
 * URL-encoded variables. It is useful for downloading text files, XML, or
 * other information to be used in a dynamic, data-driven application.
 *
 * <p>A URLLoader object downloads all of the data from a URL before making it
 * available to code in the applications. It sends out notifications about the
 * progress of the download, which you can monitor through the
 * <code>bytesLoaded</code> and <code>bytesTotal</code> properties, as well as
 * through dispatched events.</p>
 *
 * <p>When loading very large video files, such as FLV's, out-of-memory errors
 * may occur. </p>
 *
 * <p>When you use this class in Flash Player and in AIR application content
 * in security sandboxes other than then application security sandbox,
 * consider the following security model:</p>
 *
 * <ul>
 *   <li>A SWF file in the local-with-filesystem sandbox may not load data
 * from, or provide data to, a resource that is in the network sandbox. </li>
 *   <li> By default, the calling SWF file and the URL you load must be in
 * exactly the same domain. For example, a SWF file at www.adobe.com can load
 * data only from sources that are also at www.adobe.com. To load data from a
 * different domain, place a URL policy file on the server hosting the
 * data.</li>
 * </ul>
 *
 * <p>For more information related to security, see the Flash Player Developer
 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
 * scope="external">Security</a>.</p>
 * 
 * @event complete           Dispatched after all the received data is decoded
 *                           and placed in the data property of the URLLoader
 *                           object. The received data may be accessed once
 *                           this event has been dispatched.
 * @event httpResponseStatus Dispatched if a call to the load() method
 *                           attempts to access data over HTTP, and Adobe AIR
 *                           is able to detect and return the status code for
 *                           the request.
 * @event httpStatus         Dispatched if a call to URLLoader.load() attempts
 *                           to access data over HTTP. For content running in
 *                           Flash Player, this event is only dispatched if
 *                           the current Flash Player environment is able to
 *                           detect and return the status code for the
 *                           request. (Some browser environments may not be
 *                           able to provide this information.) Note that the
 *                           <code>httpStatus</code> event (if any) is sent
 *                           before (and in addition to) any
 *                           <code>complete</code> or <code>error</code>
 *                           event.
 * @event ioError            Dispatched if a call to URLLoader.load() results
 *                           in a fatal error that terminates the download.
 * @event open               Dispatched when the download operation commences
 *                           following a call to the
 *                           <code>URLLoader.load()</code> method.
 * @event progress           Dispatched when data is received as the download
 *                           operation progresses.
 *
 *                           <p>Note that with a URLLoader object, it is not
 *                           possible to access the data until it has been
 *                           received completely. So, the progress event only
 *                           serves as a notification of how far the download
 *                           has progressed. To access the data before it's
 *                           entirely downloaded, use a URLStream object. </p>
 * @event securityError      Dispatched if a call to URLLoader.load() attempts
 *                           to load data from a server outside the security
 *                           sandbox. Also dispatched if a call to
 *                           <code>URLLoader.load()</code> attempts to load a
 *                           SWZ file and the certificate is invalid or the
 *                           digest string does not match the component.]]></haxe_doc>
	</class>
	<enum path="nme.net.URLLoaderDataFormat" params="" file="/Users/joshua/Development/Haxe/nme/nme/net/URLLoaderDataFormat.hx">
		<VARIABLES><haxe_doc>* Specifies that downloaded data is received as URL-encoded variables.</haxe_doc></VARIABLES>
		<TEXT><haxe_doc>* Specifies that downloaded data is received as text.</haxe_doc></TEXT>
		<BINARY><haxe_doc>* Specifies that downloaded data is received as raw binary data.</haxe_doc></BINARY>
		<haxe_doc>* The URLLoaderDataFormat class provides values that specify how downloaded
 * data is received.</haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.net.URLRequest" params="" file="/Users/joshua/Development/Haxe/nme/nme/net/URLRequest.hx" extern="1">
		<url public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The URL to be requested.
	 *
	 * <p>Be sure to encode any characters that are either described as unsafe in
	 * the Uniform Resource Locator specification (see
	 * http://www.faqs.org/rfcs/rfc1738.html) or that are reserved in the URL
	 * scheme of the URLRequest object (when not used for their reserved
	 * purpose). For example, use <code>"%25"</code> for the percent (%) symbol
	 * and <code>"%23"</code> for the number sign (#), as in
	 * <code>"http://www.example.com/orderForm.cfm?item=%23B-3&discount=50%25"</code>.</p>
	 *
	 * <p>By default, the URL must be in the same domain as the calling file,
	 * unless the content is running in the Adobe AIR application security
	 * sandbox. If you need to load data from a different domain, put a URL
	 * policy file on the server that is hosting the data. For more information,
	 * see the description of the URLRequest class.</p>
	 *
	 * <p>For content running in Adobe AIR, files in the application security
	 * sandobx  -  files installed with the AIR application  -  can access URLs
	 * using any of the following URL schemes:</p>
	 *
	 * <ul>
	 *   <li><code>http</code> and <code>https</code> </li>
	 *   <li><code>file</code> </li>
	 *   <li><code>app-storage</code> </li>
	 *   <li><code>app</code> </li>
	 * </ul>
	 *
	 * <p><b>Note:</b> IPv6 (Internet Protocol version 6) is supported in AIR and
	 * in Flash Player 9.0.115.0 and later. IPv6 is a version of Internet
	 * Protocol that supports 128-bit addresses (an improvement on the earlier
	 * IPv4 protocol that supports 32-bit addresses). You might need to activate
	 * IPv6 on your networking interfaces. For more information, see the Help for
	 * the operating system hosting the data. If IPv6 is supported on the hosting
	 * system, you can specify numeric IPv6 literal addresses in URLs enclosed in
	 * brackets ([]), as in the following. </p>
	 * <pre xml:space="preserve">
	 * rtmp://[2001:db8:ccc3:ffff:0:444d:555e:666f]:1935/test </pre>]]></haxe_doc>
		</url>
		<method public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Controls the HTTP form submission method.
	 *
	 * <p>For SWF content running in Flash Player (in the browser), this property
	 * is limited to GET or POST operations, and valid values are
	 * <code>URLRequestMethod.GET</code> or
	 * <code>URLRequestMethod.POST</code>.</p>
	 *
	 * <p>For content running in Adobe AIR, you can use any string value if the
	 * content is in the application security sandbox. Otherwise, as with content
	 * running in Flash Player, you are restricted to using GET or POST
	 * operations.</p>
	 *
	 * <p>For content running in Adobe AIR, when using the
	 * <code>navigateToURL()</code> function, the runtime treats a URLRequest
	 * that uses the POST method (one that has its <code>method</code> property
	 * set to <code>URLRequestMethod.POST</code>) as using the GET method.</p>
	 *
	 * <p><b>Note:</b> If running in Flash Player and the referenced form has no
	 * body, Flash Player automatically uses a GET operation, even if the method
	 * is set to <code>URLRequestMethod.POST</code>. For this reason, it is
	 * recommended to always include a "dummy" body to ensure that the correct
	 * method is used.</p>
	 * 
	 * @default URLRequestMethod.GET
	 * @throws ArgumentError If the <code>value</code> parameter is not
	 *                       <code>URLRequestMethod.GET</code> or
	 *                       <code>URLRequestMethod.POST</code>.]]></haxe_doc>
		</method>
		<digest public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* A string that uniquely identifies the signed Adobe platform component to
	 * be stored to (or retrieved from) the Flash Player cache. An Adobe platform
	 * component is a signed file (a SWZ file) that contains SWF content that is
	 * cached persistently on a user's machine. All SWZ files are signed by
	 * Adobe. A digest corresponds to a single cached file; if you change the
	 * file in any way, its digest will change in an unpredictable way. By using
	 * a digest, you can verify the cached file across multiple domains. Two
	 * files with the same digest are the same file, and two files with different
	 * digests are not the same file. A file cannot (practically) be created to
	 * "spoof" a digest and pretend to be another digest.
	 *
	 * <p>The digest is based on an SHA-256 message digest algorithm (64
	 * characters long in hexadecimal format).</p>
	 *
	 * <p>For example, the Flex SDK includes a SWZ for the Flex framework (and it
	 * provides the digest string for that SWZ file). You can post this SWZ on
	 * your web server and load it in your SWF file (using the
	 * <code>load()</code> method of a URLLoader object). If the end user's
	 * machine already has the matching SWZ file cached, the application uses the
	 * cached SWZ file. (A SWZ file matches if its <code>digest</code> matches
	 * the one you provide.) Otherwise, the application downloads the SWZ file
	 * from the URL you specify. </p>
	 *
	 * <p>Only set the <code>digest</code> parameter in a URLRequest object used
	 * in a call to the <code>URLLoader.load()</code> method to load a SWZ file.
	 * If the <code>digest</code> property of a a URLRequest object is set when
	 * it is used in other methods, the application throws an IOError
	 * exception.</p>
	 * 
	 * @throws ArgumentError The digest provided does not match the digest of the
	 *                       file that is extracted from the downloaded signed
	 *                       file or the signed file loaded out of the cache. The
	 *                       application also throws this error if the provided
	 *                       digest is the wrong length or contains invalid
	 *                       (nonhexadecimal) characters.]]></haxe_doc>
		</digest>
		<data public="1">
			<d/>
			<haxe_doc><![CDATA[* An object containing data to be transmitted with the URL request.
	 *
	 * <p>This property is used in conjunction with the <code>method</code>
	 * property. When the value of <code>method</code> is <code>GET</code>, the
	 * value of <code>data</code> is appended to the value of
	 * <code>URLRequest.url</code>, using HTTP query-string syntax. When the
	 * <code>method</code> value is <code>POST</code> (or any value other than
	 * <code>GET</code>), the value of <code>data</code> is transmitted in the
	 * body of the HTTP request.</p>
	 *
	 * <p>The URLRequest API offers binary <code>POST</code> support and support
	 * for URL-encoded variables, as well as support for strings. The data object
	 * can be a ByteArray, URLVariables, or String object.</p>
	 *
	 * <p>The way in which the data is used depends on the type of object
	 * used:</p>
	 *
	 * <ul>
	 *   <li>If the object is a ByteArray object, the binary data of the
	 * ByteArray object is used as <code>POST</code> data. For <code>GET</code>,
	 * data of ByteArray type is not supported. Also, data of ByteArray type is
	 * not supported for <code>FileReference.upload()</code> and
	 * <code>FileReference.download()</code>.</li>
	 *   <li>If the object is a URLVariables object and the method is
	 * <code>POST</code>, the variables are encoded using
	 * <i>x-www-form-urlencoded</i> format and the resulting string is used as
	 * <code>POST</code> data. An exception is a call to
	 * <code>FileReference.upload()</code>, in which the variables are sent as
	 * separate fields in a <code>multipart/form-data</code> post.</li>
	 *   <li>If the object is a URLVariables object and the method is
	 * <code>GET</code>, the URLVariables object defines variables to be sent
	 * with the URLRequest object.</li>
	 *   <li>Otherwise, the object is converted to a string, and the string is
	 * used as the <code>POST</code> or <code>GET</code> data.</li>
	 * </ul>
	 *
	 * <p>This data is not sent until a method, such as
	 * <code>navigateToURL()</code> or <code>FileReference.upload()</code>, uses
	 * the URLRequest object.</p>
	 *
	 * <p><b>Note</b>: The value of <code>contentType</code> must correspond to
	 * the type of data in the <code>data</code> property. See the note in the
	 * description of the <code>contentType</code> property.</p>]]></haxe_doc>
		</data>
		<contentType public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The MIME content type of the content in the the <code>data</code>
	 * property.
	 *
	 * <p>The default value is
	 * <code>application/x-www-form-urlencoded</code>.</p>
	 *
	 * <p><b>Note</b>:The <code>FileReference.upload()</code>,
	 * <code>FileReference.download()</code>, and <code>HTMLLoader.load()</code>
	 * methods do not support the <code>URLRequest.contentType</code>
	 * property.</p>
	 *
	 * <p>When sending a POST request, the values of the <code>contentType</code>
	 * and <code>data</code> properties must correspond properly. The value of
	 * the <code>contentType</code> property instructs servers on how to
	 * interpret the value of the <code>data</code> property. </p>
	 *
	 * <ul>
	 *   <li>If the value of the <code>data</code> property is a URLVariables
	 * object, the value of <code>contentType</code> must be
	 * <code>application/x-www-form-urlencoded</code>. </li>
	 *   <li> If the value of the <code>data</code> property is any other type,
	 * the value of <code>contentType</code> should indicate the type of the POST
	 * data that will be sent (which is the binary or string data contained in
	 * the value of the <code>data</code> property). </li>
	 *   <li>For <code>FileReference.upload()</code>, the Content-Type of the
	 * request is set automatically to <code>multipart/form-data</code>, and the
	 * value of the <code>contentType</code> property is ignored.</li>
	 * </ul>
	 *
	 * <p> In Flash Player 10 and later, if you use a multipart Content-Type (for
	 * example "multipart/form-data") that contains an upload (indicated by a
	 * "filename" parameter in a "content-disposition" header within the POST
	 * body), the POST operation is subject to the security rules applied to
	 * uploads:</p>
	 *
	 * <ul>
	 *   <li>The POST operation must be performed in response to a user-initiated
	 * action, such as a mouse click or key press.</li>
	 *   <li>If the POST operation is cross-domain (the POST target is not on the
	 * same server as the SWF file that is sending the POST request), the target
	 * server must provide a URL policy file that permits cross-domain
	 * access.</li>
	 * </ul>
	 *
	 * <p>Also, for any multipart Content-Type, the syntax must be valid
	 * (according to the RFC2046 standards). If the syntax appears to be invalid,
	 * the POST operation is subject to the security rules applied to
	 * uploads.</p>]]></haxe_doc>
		</contentType>
		<new public="1" set="method">
			<f a="?url">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a URLRequest object. If <code>System.useCodePage</code> is
	 * <code>true</code>, the request is encoded using the system code page,
	 * rather than Unicode. If <code>System.useCodePage</code> is
	 * <code>false</code>, the request is encoded using Unicode, rather than the
	 * system code page.
	 * 
	 * @param url The URL to be requested. You can set the URL later by using the
	 *            <code>url</code> property.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The URLRequest class captures all of the information in a single HTTP
 * request. URLRequest objects are passed to the <code>load()</code> methods
 * of the Loader, URLStream, and URLLoader classes, and to other loading
 * operations, to initiate URL downloads. They are also passed to the
 * <code>upload()</code> and <code>download()</code> methods of the
 * FileReference class.
 *
 * <p>A SWF file in the local-with-filesystem sandbox may not load data from,
 * or provide data to, a resource that is in the network sandbox. </p>
 *
 * <p>By default, the calling SWF file and the URL you load must be in the
 * same domain. For example, a SWF file at www.adobe.com can load data only
 * from sources that are also at www.adobe.com. To load data from a different
 * domain, place a URL policy file on the server hosting the data.</p>
 *
 * <p> However, in Adobe AIR, content in the application security sandbox
 * (content installed with the AIR application) is not restricted by these
 * security limitations. For content running in Adobe AIR, files in the
 * application security sandbox can access URLs using any of the following URL
 * schemes:</p>
 *
 * <ul>
 *   <li><code>http</code> and <code>https</code> </li>
 *   <li><code>file</code> </li>
 *   <li><code>app-storage</code> </li>
 *   <li><code>app</code> </li>
 * </ul>
 *
 * <p>Content running in Adobe AIR that is not in the application security
 * sandbox observes the same restrictions as content running in the browser
 * (in Flash Player), and loading is governed by the content's domain and any
 * permissions granted in URL policy files.</p>
 *
 * <p>For more information related to security, see the Flash Player Developer
 * Center Topic: <a href="http://www.adobe.com/go/devnet_security_en"
 * scope="external">Security</a>.</p>]]></haxe_doc>
		<meta><m n=":final"/></meta>
	</class>
	<class path="nme.net.URLRequestMethod" params="" file="/Users/joshua/Development/Haxe/nme/nme/net/URLRequestMethod.hx" extern="1">
		<DELETE public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Specifies that the URLRequest object is a <code>DELETE</code>.]]></haxe_doc>
		</DELETE>
		<GET public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies that the URLRequest object is a <code>GET</code>.]]></haxe_doc>
		</GET>
		<HEAD public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Specifies that the URLRequest object is a <code>HEAD</code>.]]></haxe_doc>
		</HEAD>
		<OPTIONS public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Specifies that the URLRequest object is <code>OPTIONS</code>.]]></haxe_doc>
		</OPTIONS>
		<POST public="1" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies that the URLRequest object is a <code>POST</code>.
	 *
	 * <p><i>Note:</i> For content running in Adobe AIR, when using the
	 * <code>navigateToURL()</code> function, the runtime treats a URLRequest
	 * that uses the POST method (one that has its <code>method</code> property
	 * set to <code>URLRequestMethod.POST</code>) as using the GET method.</p>]]></haxe_doc>
		</POST>
		<PUT public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Specifies that the URLRequest object is a <code>PUT</code>.]]></haxe_doc>
		</PUT>
		<haxe_doc><![CDATA[* The URLRequestMethod class provides values that specify whether the
 * URLRequest object should use the <code>POST</code> method or the
 * <code>GET</code> method when sending data to a server.]]></haxe_doc>
	</class>
	<class path="nme.net.URLVariables" params="" file="/Users/joshua/Development/Haxe/nme/nme/net/URLVariables.hx" extern="1">
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Returns a string containing all enumerable variables, in the MIME content
	 * encoding <i>application/x-www-form-urlencoded</i>.
	 * 
	 * @return A URL-encoded string containing name/value pairs.]]></haxe_doc>
		</toString>
		<decode public="1" set="method">
			<f a="source">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Converts the variable string to properties of the specified URLVariables
	 * object.
	 *
	 * <p>This method is used internally by the URLVariables events. Most users
	 * do not need to call this method directly.</p>
	 * 
	 * @param source A URL-encoded query string containing name/value pairs.
	 * @throws Error The source parameter must be a URL-encoded query string
	 *               containing name/value pairs.]]></haxe_doc>
		</decode>
		<new public="1" set="method">
			<f a="?source">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a new URLVariables object. You pass URLVariables objects to the
	 * <code>data</code> property of URLRequest objects.
	 *
	 * <p>If you call the URLVariables constructor with a string, the
	 * <code>decode()</code> method is automatically called to convert the string
	 * to properties of the URLVariables object.</p>
	 * 
	 * @param source A URL-encoded string containing name/value pairs.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The URLVariables class allows you to transfer variables between an
 * application and a server. Use URLVariables objects with methods of the
 * URLLoader class, with the <code>data</code> property of the URLRequest
 * class, and with nme.net package functions.]]></haxe_doc>
		<haxe_dynamic><d/></haxe_dynamic>
	</class>
	<class path="nme.sensors.Accelerometer" params="" file="/Users/joshua/Development/Haxe/nme/nme/sensors/Accelerometer.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<isSupported public="1" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* The <code>isSupported</code> property is set to <code>true</code> if the
	 * accelerometer sensor is available on the device, otherwise it is set to
	 * <code>false</code>.]]></haxe_doc>
		</isSupported>
		<setRequestedUpdateInterval public="1" set="method">
			<f a="interval">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* The <code>setRequestedUpdateInterval</code> method is used to set the
	 * desired time interval for updates. The time interval is measured in
	 * milliseconds. The update interval is only used as a hint to conserve the
	 * battery power. The actual time between acceleration updates may be greater
	 * or lesser than this value. Any change in the update interval affects all
	 * registered listeners. You can use the Accelerometer class without calling
	 * the <code>setRequestedUpdateInterval()</code> method. In this case, the
	 * application receives updates based on the device's default interval.
	 * 
	 * @param interval The requested update interval. If <code>interval</code> is
	 *                 set to 0, then the minimum supported update interval is
	 *                 used.
	 * @throws ArgumentError The specified <code>interval</code> is less than
	 *                       zero.]]></haxe_doc>
		</setRequestedUpdateInterval>
		<muted public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the user has denied access to the accelerometer
	 * (<code>true</code>) or allowed access (<code>false</code>). When this
	 * value changes, a <code>status</code> event is dispatched.]]></haxe_doc>
		</muted>
		<new public="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Creates a new Accelerometer instance.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Accelerometer class dispatches events based on activity detected by the
 * device's motion sensor. This data represents the device's location or
 * movement along a 3-dimensional axis. When the device moves, the sensor
 * detects this movement and returns acceleration data. The Accelerometer
 * class provides methods to query whether or not accelerometer is supported,
 * and also to set the rate at which acceleration events are dispatched.
 *
 * <p><b>Note:</b> Use the <code>Accelerometer.isSupported</code> property to
 * test the runtime environment for the ability to use this feature. While the
 * Accelerometer class and its members are accessible to the Runtime Versions
 * listed for each API entry, the current environment for the runtime
 * determines the availability of this feature. For example, you can compile
 * code using the Accelerometer class properties for Flash Player 10.1, but
 * you need to use the <code>Accelerometer.isSupported</code> property to test
 * for the availability of the Accelerometer feature in the current deployment
 * environment for the Flash Player runtime. If
 * <code>Accelerometer.isSupported</code> is <code>true</code> at runtime,
 * then Accelerometer support currently exists.</p>
 *
 * <p><i>AIR profile support:</i> This feature is supported only on mobile
 * devices. It is not supported on desktop or AIR for TV devices. See <a
 * href="http://help.adobe.com/en_US/air/build/WS144092a96ffef7cc16ddeea2126bb46b82f-8000.html">
 * AIR Profile Support</a> for more information regarding API support across
 * multiple profiles. </p>
 * 
 * @event status Dispatched when an accelerometer changes its status.
 *
 *               <p><b>Note:</b> On some devices, the accelerometer is always
 *               available. On such devices, an Accelerometer object never
 *               dispatches a <code>status</code> event.</p>
 * @event update The <code>update</code> event is dispatched in response to
 *               updates from the accelerometer sensor. The event is
 *               dispatched in the following circumstances:
 *
 *               <p>
 *               <ul>
 *                 <li>When a new listener function is attached through
 *               <code>addEventListener()</code>, this event is delivered once
 *               to all the registered listeners for providing the current
 *               value of the accelerometer.</li>
 *                 <li>Whenever accelerometer updates are obtained from the
 *               platform at device determined intervals.</li>
 *                 <li>Whenever the application misses a change in the
 *               accelerometer (for example, the runtime is resuming after
 *               being idle).</li>
 *               </ul>
 *               </p>]]></haxe_doc>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<class path="nme.system.Capabilities" params="" file="/Users/joshua/Development/Haxe/nme/nme/system/Capabilities.hx" extern="1">
		<_internal public="1" set="null" static="1"><c path="Int"/></_internal>
		<avHardwareDisable public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether access to the user's camera and microphone has been
	 * administratively prohibited (<code>true</code>) or allowed
	 * (<code>false</code>). The server string is <code>AVD</code>.
	 *
	 * <p>For content in Adobe AIR™, this property applies only to content in
	 * security sandboxes other than the application security sandbox. Content in
	 * the application security sandbox can always access the user's camera and
	 * microphone.</p>]]></haxe_doc>
		</avHardwareDisable>
		<cpuArchitecture public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Specifies the current CPU architecture. The <code>cpuArchitecture</code>
	 * property can return the following strings: "<code>PowerPC</code>",
	 * "<code>x86</code>", "<code>SPARC</code>", and "<code>ARM</code>". The
	 * server string is <code>ARCH</code>.]]></haxe_doc>
		</cpuArchitecture>
		<hasAccessibility public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system supports (<code>true</code>) or does not
	 * support (<code>false</code>) communication with accessibility aids. The
	 * server string is <code>ACC</code>.]]></haxe_doc>
		</hasAccessibility>
		<hasAudio public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system has audio capabilities. This property is
	 * always <code>true</code>. The server string is <code>A</code>.]]></haxe_doc>
		</hasAudio>
		<hasAudioEncoder public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system can (<code>true</code>) or cannot
	 * (<code>false</code>) encode an audio stream, such as that coming from a
	 * microphone. The server string is <code>AE</code>.]]></haxe_doc>
		</hasAudioEncoder>
		<hasEmbeddedVideo public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system supports (<code>true</code>) or does not
	 * support (<code>false</code>) embedded video. The server string is
	 * <code>EV</code>.]]></haxe_doc>
		</hasEmbeddedVideo>
		<hasIME public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system does (<code>true</code>) or does not
	 * (<code>false</code>) have an input method editor (IME) installed. The
	 * server string is <code>IME</code>.]]></haxe_doc>
		</hasIME>
		<hasMP3 public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system does (<code>true</code>) or does not
	 * (<code>false</code>) have an MP3 decoder. The server string is
	 * <code>MP3</code>.]]></haxe_doc>
		</hasMP3>
		<hasPrinting public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system does (<code>true</code>) or does not
	 * (<code>false</code>) support printing. The server string is
	 * <code>PR</code>.]]></haxe_doc>
		</hasPrinting>
		<hasScreenBroadcast public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system does (<code>true</code>) or does not
	 * (<code>false</code>) support the development of screen broadcast
	 * applications to be run through Flash Media Server. The server string is
	 * <code>SB</code>.]]></haxe_doc>
		</hasScreenBroadcast>
		<hasScreenPlayback public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system does (<code>true</code>) or does not
	 * (<code>false</code>) support the playback of screen broadcast applications
	 * that are being run through Flash Media Server. The server string is
	 * <code>SP</code>.]]></haxe_doc>
		</hasScreenPlayback>
		<hasStreamingAudio public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system can (<code>true</code>) or cannot
	 * (<code>false</code>) play streaming audio. The server string is
	 * <code>SA</code>.]]></haxe_doc>
		</hasStreamingAudio>
		<hasStreamingVideo public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system can (<code>true</code>) or cannot
	 * (<code>false</code>) play streaming video. The server string is
	 * <code>SV</code>.]]></haxe_doc>
		</hasStreamingVideo>
		<hasTLS public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system supports native SSL sockets through
	 * NetConnection (<code>true</code>) or does not (<code>false</code>). The
	 * server string is <code>TLS</code>.]]></haxe_doc>
		</hasTLS>
		<hasVideoEncoder public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system can (<code>true</code>) or cannot
	 * (<code>false</code>) encode a video stream, such as that coming from a web
	 * camera. The server string is <code>VE</code>.]]></haxe_doc>
		</hasVideoEncoder>
		<isDebugger public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether the system is a special debugging version
	 * (<code>true</code>) or an officially released version
	 * (<code>false</code>). The server string is <code>DEB</code>. This property
	 * is set to <code>true</code> when running in the debug version of Flash
	 * Player or the AIR Debug Launcher (ADL).]]></haxe_doc>
		</isDebugger>
		<isEmbeddedInAcrobat public="1" static="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Specifies whether the Flash runtime is embedded in a PDF file that is open
	 * in Acrobat 9.0 or higher (<code>true</code>) or not (<code>false</code>).]]></haxe_doc>
		</isEmbeddedInAcrobat>
		<language public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies the language code of the system on which the content is running.
	 * The language is specified as a lowercase two-letter language code from ISO
	 * 639-1. For Chinese, an additional uppercase two-letter country code from
	 * ISO 3166 distinguishes between Simplified and Traditional Chinese. The
	 * languages codes are based on the English names of the language: for
	 * example, <code>hu</code> specifies Hungarian.
	 *
	 * <p>On English systems, this property returns only the language code
	 * (<code>en</code>), not the country code. On Microsoft Windows systems,
	 * this property returns the user interface (UI) language, which refers to
	 * the language used for all menus, dialog boxes, error messages, and help
	 * files. The following table lists the possible values: </p>
	 *
	 * <p><i>Note:</i> The value of <code>Capabilities.language</code> property
	 * is limited to the possible values on this list. Because of this
	 * limitation, Adobe AIR applications should use the first element in the
	 * <code>Capabilities.languages</code> array to determine the primary user
	 * interface language for the system. </p>
	 *
	 * <p>The server string is <code>L</code>.</p>]]></haxe_doc>
		</language>
		<localFileReadDisable public="1" set="null" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Specifies whether read access to the user's hard disk has been
	 * administratively prohibited (<code>true</code>) or allowed
	 * (<code>false</code>). For content in Adobe AIR, this property applies only
	 * to content in security sandboxes other than the application security
	 * sandbox. (Content in the application security sandbox can always read from
	 * the file system.) If this property is <code>true</code>, Flash Player
	 * cannot read files (including the first file that Flash Player launches
	 * with) from the user's hard disk. If this property is <code>true</code>,
	 * AIR content outside of the application security sandbox cannot read files
	 * from the user's hard disk. For example, attempts to read a file on the
	 * user's hard disk using load methods will fail if this property is set to
	 * <code>true</code>.
	 *
	 * <p>Reading runtime shared libraries is also blocked if this property is
	 * set to <code>true</code>, but reading local shared objects is allowed
	 * without regard to the value of this property.</p>
	 *
	 * <p>The server string is <code>LFD</code>.</p>]]></haxe_doc>
		</localFileReadDisable>
		<manufacturer public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies the manufacturer of the running version of Flash Player or the
	 * AIR runtime, in the format <code>"Adobe</code>
	 * <code><i>OSName</i>"</code>. The value for <code><i>OSName</i></code>
	 * could be <code>"Windows"</code>, <code>"Macintosh"</code>,
	 * <code>"Linux"</code>, or another operating system name. The server string
	 * is <code>M</code>.
	 *
	 * <p>Do <i>not</i> use <code>Capabilities.manufacturer</code> to determine a
	 * capability based on the operating system if a more specific capability
	 * property exists. Basing a capability on the operating system is a bad
	 * idea, since it can lead to problems if an application does not consider
	 * all potential target operating systems. Instead, use the property
	 * corresponding to the capability for which you are testing. For more
	 * information, see the Capabilities class description.</p>]]></haxe_doc>
		</manufacturer>
		<maxLevelIDC public="1" static="1">
			<c path="String"/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Retrieves the highest H.264 Level IDC that the client hardware supports.
	 * Media run at this level are guaranteed to run; however, media run at the
	 * highest level might not run with the highest quality. This property is
	 * useful for servers trying to target a client's capabilities. Using this
	 * property, a server can determine the level of video to send to the client.
	 *
	 *
	 * <p>The server string is <code>ML</code>.</p>]]></haxe_doc>
		</maxLevelIDC>
		<os public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies the current operating system. The <code>os</code> property can
	 * return the following strings:
	 *
	 * <p>The server string is <code>OS</code>.</p>
	 *
	 * <p>Do <i>not</i> use <code>Capabilities.os</code> to determine a
	 * capability based on the operating system if a more specific capability
	 * property exists. Basing a capability on the operating system is a bad
	 * idea, since it can lead to problems if an application does not consider
	 * all potential target operating systems. Instead, use the property
	 * corresponding to the capability for which you are testing. For more
	 * information, see the Capabilities class description.</p>]]></haxe_doc>
		</os>
		<pixelAspectRatio public="1" set="null" static="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Specifies the pixel aspect ratio of the screen. The server string is
	 * <code>AR</code>.]]></haxe_doc>
		</pixelAspectRatio>
		<playerType public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies the type of runtime environment. This property can have one of
	 * the following values:
	 * <ul>
	 *   <li><code>"ActiveX"</code> for the Flash Player ActiveX control used by
	 * Microsoft Internet Explorer</li>
	 *   <li><code>"Desktop"</code> for the Adobe AIR runtime (except for SWF
	 * content loaded by an HTML page, which has
	 * <code>Capabilities.playerType</code> set to <code>"PlugIn"</code>)</li>
	 *   <li><code>"External"</code> for the external Flash Player<ph
	 * outputclass="flashonly"> or in test mode</li>
	 *   <li><code>"PlugIn"</code> for the Flash Player browser plug-in (and for
	 * SWF content loaded by an HTML page in an AIR application)</li>
	 *   <li><code>"StandAlone"</code> for the stand-alone Flash Player</li>
	 * </ul>
	 *
	 * <p>The server string is <code>PT</code>.</p>]]></haxe_doc>
		</playerType>
		<screenColor public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies the screen color. This property can have the value
	 * <code>"color"</code>, <code>"gray"</code> (for grayscale), or
	 * <code>"bw"</code> (for black and white). The server string is
	 * <code>COL</code>.]]></haxe_doc>
		</screenColor>
		<screenDPI public="1" set="null" static="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Specifies the dots-per-inch (dpi) resolution of the screen, in pixels. The
	 * server string is <code>DP</code>.]]></haxe_doc>
		</screenDPI>
		<screenResolutionX public="1" set="null" static="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Specifies the maximum horizontal resolution of the screen. The server
	 * string is <code>R</code> (which returns both the width and height of the
	 * screen). This property does not update with a user's screen resolution and
	 * instead only indicates the resolution at the time Flash Player or an Adobe
	 * AIR application started. Also, the value only specifies the primary
	 * screen.]]></haxe_doc>
		</screenResolutionX>
		<screenResolutionY public="1" set="null" static="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* Specifies the maximum vertical resolution of the screen. The server string
	 * is <code>R</code> (which returns both the width and height of the screen).
	 * This property does not update with a user's screen resolution and instead
	 * only indicates the resolution at the time Flash Player or an Adobe AIR
	 * application started. Also, the value only specifies the primary screen.]]></haxe_doc>
		</screenResolutionY>
		<serverString public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* A URL-encoded string that specifies values for each Capabilities property.
	 *
	 *
	 * <p>The following example shows a URL-encoded string: <pre
	 * xml:space="preserve">A=t&SA=t&SV=t&EV=t&MP3=t&AE=t&VE=t&ACC=f&PR=t&SP=t&
	 * SB=f&DEB=t&V=WIN%208%2C5%2C0%2C208&M=Adobe%20Windows&
	 * R=1600x1200&DP=72&COL=color&AR=1.0&OS=Windows%20XP&
	 * L=en&PT=External&AVD=f&LFD=f&WD=f</pre></p>]]></haxe_doc>
		</serverString>
		<supports32BitProcesses public="1" static="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Specifies whether the system supports running 32-bit processes. The server
	 * string is <code>PR32</code>.]]></haxe_doc>
		</supports32BitProcesses>
		<supports64BitProcesses public="1" static="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Specifies whether the system supports running 64-bit processes. The server
	 * string is <code>PR64</code>.]]></haxe_doc>
		</supports64BitProcesses>
		<version public="1" set="null" static="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Specifies the Flash Player or Adobe<sup>®</sup> AIR<sup>®</sup> platform
	 * and version information. The format of the version number is: <i>platform
	 * majorVersion,minorVersion,buildNumber,internalBuildNumber</i>. Possible
	 * values for <i>platform</i> are <code>"WIN"</code>, ` <code>"MAC"</code>,
	 * <code>"LNX"</code>, and <code>"AND"</code>. Here are some examples of
	 * version information: <pre xml:space="preserve"> WIN 9,0,0,0 // Flash
	 * Player 9 for Windows MAC 7,0,25,0 // Flash Player 7 for Macintosh LNX
	 * 9,0,115,0 // Flash Player 9 for Linux AND 10,2,150,0 // Flash Player 10
	 * for Android </pre>
	 *
	 * <p>Do <i>not</i> use <code>Capabilities.version</code> to determine a
	 * capability based on the operating system if a more specific capability
	 * property exists. Basing a capability on the operating system is a bad
	 * idea, since it can lead to problems if an application does not consider
	 * all potential target operating systems. Instead, use the property
	 * corresponding to the capability for which you are testing. For more
	 * information, see the Capabilities class description.</p>
	 *
	 * <p>The server string is <code>V</code>.</p>]]></haxe_doc>
		</version>
		<hasMultiChannelAudio public="1" static="1">
			<f a="type">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<meta><m n=":require"><e>flash11</e></m></meta>
		</hasMultiChannelAudio>
		<haxe_doc><![CDATA[* The Capabilities class provides properties that describe the system and
 * runtime that are hosting the application. For example, a mobile phone's
 * screen might be 100 square pixels, black and white, whereas a PC screen
 * might be 1000 square pixels, color. By using the Capabilities class to
 * determine what capabilities the client has, you can provide appropriate
 * content to as many users as possible. When you know the device's
 * capabilities, you can tell the server to send the appropriate SWF files or
 * tell the SWF file to alter its presentation.
 *
 * <p>However, some capabilities of Adobe AIR are not listed as properties in
 * the Capabilities class. They are properties of other classes:</p>
 * </p>
 *
 * <p>There is also a <code>WD</code> server string that specifies whether
 * windowless mode is disabled. Windowless mode can be disabled in Flash
 * Player due to incompatibility with the web browser or to a user setting in
 * the mms.cfg file. There is no corresponding Capabilities property.</p>
 *
 * <p>All properties of the Capabilities class are read-only.</p>]]></haxe_doc>
	</class>
	<class path="nme.system.System" params="" file="/Users/joshua/Development/Haxe/nme/nme/system/System.hx" extern="1">
		<deviceID public="1" set="null" static="1"><c path="String"/></deviceID>
		<totalMemory public="1" set="null" static="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The amount of memory (in bytes) currently in use that has been directly
	 * allocated by Flash Player or AIR.
	 *
	 * <p>This property does not return <i>all</i> memory used by an Adobe AIR
	 * application or by the application (such as a browser) containing Flash
	 * Player content. The browser or operating system may consume other memory.
	 * The <code>System.privateMemory</code> property reflects <i>all</i> memory
	 * used by an application.</p>
	 *
	 * <p>If the amount of memory allocated is greater than the maximum value for
	 * a uint object (<code>uint.MAX_VALUE</code>, or 4,294,967,295), then this
	 * property is set to 0. The <code>System.totalMemoryNumber</code> property
	 * allows larger values.</p>]]></haxe_doc>
		</totalMemory>
		<exit public="1" set="method" static="1">
			<f a="code">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Closes Flash Player.
	 *
	 * <p><i>For the standalone Flash Player debugger version only.</i></p>
	 *
	 * <p>AIR applications should call the <code>NativeApplication.exit()</code>
	 * method to exit the application.</p>
	 * 
	 * @param code A value to pass to the operating system. Typically, if the
	 *             process exits normally, the value is 0.]]></haxe_doc>
		</exit>
		<gc public="1" set="method" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Forces the garbage collection process.
	 *
	 * <p><i>For the Flash Player debugger version and AIR applications only.</i>
	 * In an AIR application, the <code>System.gc()</code> method is only enabled
	 * in content running in the AIR Debug Launcher (ADL) or, in an installed
	 * applcation, in content in the application security sandbox.</p>
	 *]]></haxe_doc>
		</gc>
		<haxe_doc><![CDATA[* The System class contains properties related to local settings and
 * operations. Among these are settings for camers and microphones, operations
 * with shared objects and the use of the Clipboard.
 *
 * <p>Additional properties and methods are in other classes within the
 * nme.system package: the Capabilities class, the IME class, and the
 * Security class.</p>
 *
 * <p>This class contains only static methods and properties. You cannot
 * create new instances of the System class.</p>]]></haxe_doc>
	</class>
	<enum path="nme.text.AntiAliasType" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/AntiAliasType.hx">
		<NORMAL><haxe_doc><![CDATA[* Sets anti-aliasing to the anti-aliasing that is used in Flash Player 7 and
	 * earlier. This setting is recommended for applications that do not have a
	 * lot of text. This constant is used for the <code>antiAliasType</code>
	 * property in the TextField class. Use the syntax
	 * <code>AntiAliasType.NORMAL</code>.]]></haxe_doc></NORMAL>
		<ADVANCED><haxe_doc><![CDATA[* Sets anti-aliasing to advanced anti-aliasing. Advanced anti-aliasing
	 * allows font faces to be rendered at very high quality at small sizes. It
	 * is best used with applications that have a lot of small text. Advanced
	 * anti-aliasing is not recommended for very large fonts (larger than 48
	 * points). This constant is used for the <code>antiAliasType</code> property
	 * in the TextField class. Use the syntax
	 * <code>AntiAliasType.ADVANCED</code>.]]></haxe_doc></ADVANCED>
		<haxe_doc>* The AntiAliasType class provides values for anti-aliasing in the
 * nme.text.TextField class.</haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.text.Font" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/Font.hx" extern="1">
		<enumerateFonts public="1" set="method" static="1">
			<f a="?enumerateDeviceFonts">
				<e path="Bool"/>
				<c path="Array"><c path="nme.text.Font"/></c>
			</f>
			<haxe_doc><![CDATA[* Specifies whether to provide a list of the currently available embedded
	 * fonts.
	 * 
	 * @param enumerateDeviceFonts Indicates whether you want to limit the list
	 *                             to only the currently available embedded
	 *                             fonts. If this is set to <code>true</code>
	 *                             then a list of all fonts, both device fonts
	 *                             and embedded fonts, is returned. If this is
	 *                             set to <code>false</code> then only a list of
	 *                             embedded fonts is returned.
	 * @return A list of available fonts as an array of Font objects.]]></haxe_doc>
		</enumerateFonts>
		<registerFont public="1" set="method" static="1">
			<f a="font">
				<c path="Class"><d/></c>
				<e path="Void"/>
			</f>
			<haxe_doc>* Registers a font class in the global font list.
	 *</haxe_doc>
		</registerFont>
		<hasGlyphs public="1" set="method">
			<f a="str">
				<c path="String"/>
				<e path="Bool"/>
			</f>
			<haxe_doc><![CDATA[* Specifies whether a provided string can be displayed using the currently
	 * assigned font.
	 * 
	 * @param str The string to test against the current font.
	 * @return A value of <code>true</code> if the specified string can be fully
	 *         displayed using this font.]]></haxe_doc>
		</hasGlyphs>
		<fontType public="1" set="null">
			<e path="nme.text.FontType"/>
			<haxe_doc>* The type of the font. This value can be any of the constants defined in
	 * the FontType class.</haxe_doc>
		</fontType>
		<fontStyle public="1" set="null">
			<e path="nme.text.FontStyle"/>
			<haxe_doc>* The style of the font. This value can be any of the values defined in the
	 * FontStyle class.</haxe_doc>
		</fontStyle>
		<fontName public="1" set="null">
			<c path="String"/>
			<haxe_doc>* The name of an embedded font.</haxe_doc>
		</fontName>
		<new public="1" set="method"><f a=""><e path="Void"/></f></new>
		<haxe_doc>* The Font class is used to manage embedded fonts in SWF files. Embedded
 * fonts are represented as a subclass of the Font class. The Font class is
 * currently useful only to find out information about embedded fonts; you
 * cannot alter a font by using this class. You cannot use the Font class to
 * load external fonts, or to create an instance of a Font object by itself.
 * Use the Font class as an abstract base class.</haxe_doc>
	</class>
	<enum path="nme.text.FontStyle" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/FontStyle.hx">
		<REGULAR><haxe_doc><![CDATA[* Defines the plain style of a font for the <code>fontStyle</code> parameter
	 * in the <code>setAdvancedAntiAliasingTable()</code> method. Use the syntax
	 * <code>FontStyle.REGULAR</code>.]]></haxe_doc></REGULAR>
		<ITALIC><haxe_doc><![CDATA[* Defines the italic style of a font for the <code>fontStyle</code>
	 * parameter in the <code>setAdvancedAntiAliasingTable()</code> method. Use
	 * the syntax <code>FontStyle.ITALIC</code>.]]></haxe_doc></ITALIC>
		<BOLD_ITALIC><haxe_doc><![CDATA[* Defines the italic style of a font for the <code>fontStyle</code>
	 * parameter in the <code>setAdvancedAntiAliasingTable()</code> method. Use
	 * the syntax <code>FontStyle.ITALIC</code>.]]></haxe_doc></BOLD_ITALIC>
		<BOLD><haxe_doc><![CDATA[* Defines the bold style of a font for the <code>fontStyle</code> parameter
	 * in the <code>setAdvancedAntiAliasingTable()</code> method. Use the syntax
	 * <code>FontStyle.BOLD</code>.]]></haxe_doc></BOLD>
		<haxe_doc>* The FontStyle class provides values for the TextRenderer class.</haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.text.FontType" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/FontType.hx">
		<EMBEDDED_CFF/>
		<EMBEDDED><haxe_doc><![CDATA[* Indicates that this is an embedded font. Font outlines are embedded in the
	 * published SWF file.
	 *
	 * <p>Text fields that use embedded fonts are always displayed in the chosen
	 * font, whether or not that font is installed on the playback system. Also,
	 * text fields that use embedded fonts are always anti-aliased (smoothed).
	 * You can select the amount of anti-aliasing you want by using the
	 * <code>TextField.antiAliasType property</code>.</p>
	 *
	 * <p>One drawback to embedded fonts is that they increase the size of the
	 * SWF file.</p>
	 *
	 * <p>Fonts of type <code>EMBEDDED</code> can only be used by TextField. If
	 * nme.text.engine classes are directed to use such a font they will fall
	 * back to device fonts.</p>]]></haxe_doc></EMBEDDED>
		<DEVICE><haxe_doc><![CDATA[* Indicates that this is a device font. The SWF file renders fonts with
	 * those installed on the system.
	 *
	 * <p>Using device fonts results in a smaller movie size, because font data
	 * is not included in the file. Device fonts are often a good choice for
	 * displaying text at small point sizes, because anti-aliased text can be
	 * blurry at small sizes. Device fonts are also a good choice for large
	 * blocks of text, such as scrolling text.</p>
	 *
	 * <p>Text fields that use device fonts may not be displayed the same across
	 * different systems and platforms, because they are rendered with fonts
	 * installed on the system. For the same reason, device fonts are not
	 * anti-aliased and may appear jagged at large point sizes.</p>]]></haxe_doc></DEVICE>
		<haxe_doc><![CDATA[* The FontType class contains the enumerated constants
 * <code>"embedded"</code> and <code>"device"</code> for the
 * <code>fontType</code> property of the Font class.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<typedef path="nme.text.NMEFontDef" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/NMEFont.hx" module="nme.text.NMEFont"><a>
	<name><c path="String"/></name>
	<italic><e path="Bool"/></italic>
	<height><c path="Int"/></height>
	<bold><e path="Bool"/></bold>
</a></typedef>
	<typedef path="nme.text.NMEFontFactory" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/NMEFont.hx" module="nme.text.NMEFont"><f a="">
	<t path="nme.text.NMEFontDef"/>
	<c path="nme.text.NMEFont"/>
</f></typedef>
	<typedef path="nme.text.NMEGlyphInfo" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/NMEFont.hx" module="nme.text.NMEFont"><a>
	<width><c path="Int"/></width>
	<offsetY><c path="Int"/></offsetY>
	<offsetX><c path="Int"/></offsetX>
	<height><c path="Int"/></height>
	<advance><c path="Int"/></advance>
</a></typedef>
	<class path="nme.text.NMEFont" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/NMEFont.hx" extern="1">
		<registerFont public="1" set="method" static="1"><f a="inName:inFactory">
	<c path="String"/>
	<t path="nme.text.NMEFontFactory"/>
	<e path="Void"/>
</f></registerFont>
		<renderGlyph public="1" set="method"><f a="inChar">
	<c path="Int"/>
	<c path="nme.display.BitmapData"/>
</f></renderGlyph>
		<getGlyphInfo public="1" set="method"><f a="inChar">
	<c path="Int"/>
	<t path="nme.text.NMEGlyphInfo"/>
</f></getGlyphInfo>
		<new public="1" set="method"><f a="inHeight:inAscent:inDescent:inIsRGB">
	<c path="Int"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
	<enum path="nme.text.TextFieldAutoSize" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/TextFieldAutoSize.hx">
		<RIGHT><haxe_doc>* Specifies that the text is to be treated as right-justified text, meaning
	 * that the right side of the text field remains fixed and any resizing of a
	 * single line is on the left side.</haxe_doc></RIGHT>
		<NONE><haxe_doc>* Specifies that no resizing is to occur.</haxe_doc></NONE>
		<LEFT><haxe_doc>* Specifies that the text is to be treated as left-justified text, meaning
	 * that the left side of the text field remains fixed and any resizing of a
	 * single line is on the right side.</haxe_doc></LEFT>
		<CENTER><haxe_doc>* Specifies that the text is to be treated as center-justified text. Any
	 * resizing of a single line of a text field is equally distributed to both
	 * the right and left sides.</haxe_doc></CENTER>
		<haxe_doc><![CDATA[* The TextFieldAutoSize class is an enumeration of constant values used in
 * setting the <code>autoSize</code> property of the TextField class.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.text.TextFieldType" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/TextFieldType.hx">
		<INPUT><haxe_doc><![CDATA[* Used to specify an <code>input</code> TextField.]]></haxe_doc></INPUT>
		<DYNAMIC><haxe_doc><![CDATA[* Used to specify a <code>dynamic</code> TextField.]]></haxe_doc></DYNAMIC>
		<haxe_doc><![CDATA[* The TextFieldType class is an enumeration of constant values used in
 * setting the <code>type</code> property of the TextField class.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.text.TextFormat" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/TextFormat.hx" extern="1">
		<url public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the target URL for the text in this text format. If the
	 * <code>url</code> property is an empty string, the text does not have a
	 * hyperlink. The default value is <code>null</code>, which indicates that
	 * the text does not have a hyperlink.
	 *
	 * <p><b>Note:</b> The text with the assigned text format must be set with
	 * the <code>htmlText</code> property for the hyperlink to work.</p>]]></haxe_doc>
		</url>
		<underline public="1">
			<t path="Null"><e path="Bool"/></t>
			<haxe_doc><![CDATA[* Indicates whether the text that uses this text format is underlined
	 * (<code>true</code>) or not (<code>false</code>). This underlining is
	 * similar to that produced by the <code><U></code> tag, but the latter is
	 * not true underlining, because it does not skip descenders correctly. The
	 * default value is <code>null</code>, which indicates that underlining is
	 * not used.]]></haxe_doc>
		</underline>
		<target public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* Indicates the target window where the hyperlink is displayed. If the
	 * target window is an empty string, the text is displayed in the default
	 * target window <code>_self</code>. You can choose a custom name or one of
	 * the following four names: <code>_self</code> specifies the current frame
	 * in the current window, <code>_blank</code> specifies a new window,
	 * <code>_parent</code> specifies the parent of the current frame, and
	 * <code>_top</code> specifies the top-level frame in the current window. If
	 * the <code>TextFormat.url</code> property is an empty string or
	 * <code>null</code>, you can get or set this property, but the property will
	 * have no effect.]]></haxe_doc>
		</target>
		<tabStops public="1">
			<c path="Array"><c path="Int"/></c>
			<haxe_doc><![CDATA[* Specifies custom tab stops as an array of non-negative integers. Each tab
	 * stop is specified in pixels. If custom tab stops are not specified
	 * (<code>null</code>), the default tab stop is 4 (average character width).]]></haxe_doc>
		</tabStops>
		<size public="1">
			<t path="Null"><c path="Float"/></t>
			<haxe_doc><![CDATA[* The size in pixels of text in this text format. The default value is
	 * <code>null</code>, which means that a size of 12 is used.]]></haxe_doc>
		</size>
		<rightMargin public="1">
			<t path="Null"><c path="Float"/></t>
			<haxe_doc><![CDATA[* The right margin of the paragraph, in pixels. The default value is
	 * <code>null</code>, which indicates that the right margin is 0 pixels.]]></haxe_doc>
		</rightMargin>
		<letterSpacing public="1">
			<t path="Null"><c path="Float"/></t>
			<haxe_doc><![CDATA[* A number representing the amount of space that is uniformly distributed
	 * between all characters. The value specifies the number of pixels that are
	 * added to the advance after each character. The default value is
	 * <code>null</code>, which means that 0 pixels of letter spacing is used.
	 * You can use decimal values such as <code>1.75</code>.]]></haxe_doc>
		</letterSpacing>
		<leftMargin public="1">
			<t path="Null"><c path="Float"/></t>
			<haxe_doc><![CDATA[* The left margin of the paragraph, in pixels. The default value is
	 * <code>null</code>, which indicates that the left margin is 0 pixels.]]></haxe_doc>
		</leftMargin>
		<leading public="1">
			<t path="Null"><c path="Float"/></t>
			<haxe_doc><![CDATA[* An integer representing the amount of vertical space (called
	 * <i>leading</i>) between lines. The default value is <code>null</code>,
	 * which indicates that the amount of leading used is 0.]]></haxe_doc>
		</leading>
		<kerning public="1">
			<t path="Null"><e path="Bool"/></t>
			<haxe_doc><![CDATA[* A Boolean value that indicates whether kerning is enabled
	 * (<code>true</code>) or disabled (<code>false</code>). Kerning adjusts the
	 * pixels between certain character pairs to improve readability, and should
	 * be used only when necessary, such as with headings in large fonts. Kerning
	 * is supported for embedded fonts only.
	 *
	 * <p>Certain fonts such as Verdana and monospaced fonts, such as Courier
	 * New, do not support kerning.</p>
	 *
	 * <p>The default value is <code>null</code>, which means that kerning is not
	 * enabled.</p>]]></haxe_doc>
		</kerning>
		<italic public="1">
			<t path="Null"><e path="Bool"/></t>
			<haxe_doc><![CDATA[* Indicates whether text in this text format is italicized. The default
	 * value is <code>null</code>, which means no italics are used.]]></haxe_doc>
		</italic>
		<indent public="1">
			<t path="Null"><c path="Float"/></t>
			<haxe_doc><![CDATA[* Indicates the indentation from the left margin to the first character in
	 * the paragraph. The default value is <code>null</code>, which indicates
	 * that no indentation is used.]]></haxe_doc>
		</indent>
		<font public="1">
			<c path="String"/>
			<haxe_doc><![CDATA[* The name of the font for text in this text format, as a string. The
	 * default value is <code>null</code>, which means that Flash Player uses
	 * Times New Roman font for the text.]]></haxe_doc>
		</font>
		<color public="1">
			<t path="Null"><c path="Int"/></t>
			<haxe_doc><![CDATA[* Indicates the color of the text. A number containing three 8-bit RGB
	 * components; for example, 0xFF0000 is red, and 0x00FF00 is green. The
	 * default value is <code>null</code>, which means that Flash Player uses the
	 * color black (0x000000).]]></haxe_doc>
		</color>
		<bullet public="1">
			<t path="Null"><e path="Bool"/></t>
			<haxe_doc><![CDATA[* Indicates that the text is part of a bulleted list. In a bulleted list,
	 * each paragraph of text is indented. To the left of the first line of each
	 * paragraph, a bullet symbol is displayed. The default value is
	 * <code>null</code>, which means no bulleted list is used.]]></haxe_doc>
		</bullet>
		<bold public="1">
			<t path="Null"><e path="Bool"/></t>
			<haxe_doc><![CDATA[* Specifies whether the text is boldface. The default value is
	 * <code>null</code>, which means no boldface is used. If the value is
	 * <code>true</code>, then the text is boldface.]]></haxe_doc>
		</bold>
		<blockIndent public="1">
			<t path="Null"><c path="Float"/></t>
			<haxe_doc><![CDATA[* Indicates the block indentation in pixels. Block indentation is applied to
	 * an entire block of text; that is, to all lines of the text. In contrast,
	 * normal indentation (<code>TextFormat.indent</code>) affects only the first
	 * line of each paragraph. If this property is <code>null</code>, the
	 * TextFormat object does not specify block indentation (block indentation is
	 * 0).]]></haxe_doc>
		</blockIndent>
		<align public="1">
			<e path="nme.text.TextFormatAlign"/>
			<haxe_doc><![CDATA[* Indicates the alignment of the paragraph. Valid values are TextFormatAlign
	 * constants.
	 * 
	 * @default TextFormatAlign.LEFT
	 * @throws ArgumentError The <code>align</code> specified is not a member of
	 *                       nme.text.TextFormatAlign.]]></haxe_doc>
		</align>
		<new public="1" set="method">
			<f a="?font:?size:?color:?bold:?italic:?underline:?url:?target:?align:?leftMargin:?rightMargin:?indent:?leading">
				<c path="String"/>
				<c path="Float"/>
				<c path="Int"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<e path="Bool"/>
				<c path="String"/>
				<c path="String"/>
				<e path="nme.text.TextFormatAlign"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Creates a TextFormat object with the specified properties. You can then
	 * change the properties of the TextFormat object to change the formatting of
	 * text fields.
	 *
	 * <p>Any parameter may be set to <code>null</code> to indicate that it is
	 * not defined. All of the parameters are optional; any omitted parameters
	 * are treated as <code>null</code>.</p>
	 * 
	 * @param font        The name of a font for text as a string.
	 * @param size        An integer that indicates the size in pixels.
	 * @param color       The color of text using this text format. A number
	 *                    containing three 8-bit RGB components; for example,
	 *                    0xFF0000 is red, and 0x00FF00 is green.
	 * @param bold        A Boolean value that indicates whether the text is
	 *                    boldface.
	 * @param italic      A Boolean value that indicates whether the text is
	 *                    italicized.
	 * @param underline   A Boolean value that indicates whether the text is
	 *                    underlined.
	 * @param url         The URL to which the text in this text format
	 *                    hyperlinks. If <code>url</code> is an empty string, the
	 *                    text does not have a hyperlink.
	 * @param target      The target window where the hyperlink is displayed. If
	 *                    the target window is an empty string, the text is
	 *                    displayed in the default target window
	 *                    <code>_self</code>. If the <code>url</code> parameter
	 *                    is set to an empty string or to the value
	 *                    <code>null</code>, you can get or set this property,
	 *                    but the property will have no effect.
	 * @param align       The alignment of the paragraph, as a TextFormatAlign
	 *                    value.
	 * @param leftMargin  Indicates the left margin of the paragraph, in pixels.
	 * @param rightMargin Indicates the right margin of the paragraph, in pixels.
	 * @param indent      An integer that indicates the indentation from the left
	 *                    margin to the first character in the paragraph.
	 * @param leading     A number that indicates the amount of leading vertical
	 *                    space between lines.]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The TextFormat class represents character formatting information. Use the
 * TextFormat class to create specific text formatting for text fields. You
 * can apply text formatting to both static and dynamic text fields. The
 * properties of the TextFormat class apply to device and embedded fonts.
 * However, for embedded fonts, bold and italic text actually require specific
 * fonts. If you want to display bold or italic text with an embedded font,
 * you need to embed the bold and italic variations of that font.
 *
 * <p> You must use the constructor <code>new TextFormat()</code> to create a
 * TextFormat object before setting its properties. When you apply a
 * TextFormat object to a text field using the
 * <code>TextField.defaultTextFormat</code> property or the
 * <code>TextField.setTextFormat()</code> method, only its defined properties
 * are applied. Use the <code>TextField.defaultTextFormat</code> property to
 * apply formatting BEFORE you add text to the <code>TextField</code>, and the
 * <code>setTextFormat()</code> method to add formatting AFTER you add text to
 * the <code>TextField</code>. The TextFormat properties are <code>null</code>
 * by default because if you don't provide values for the properties, Flash
 * Player uses its own default formatting. The default formatting that Flash
 * Player uses for each property (if property's value is <code>null</code>) is
 * as follows:</p>
 *
 * <p>The default formatting for each property is also described in each
 * property description.</p>]]></haxe_doc>
	</class>
	<enum path="nme.text.TextFormatAlign" params="" file="/Users/joshua/Development/Haxe/nme/nme/text/TextFormatAlign.hx">
		<RIGHT><haxe_doc><![CDATA[* Constant; aligns text to the right within the text field. Use the syntax
	 * <code>TextFormatAlign.RIGHT</code>.]]></haxe_doc></RIGHT>
		<LEFT><haxe_doc><![CDATA[* Constant; aligns text to the left within the text field. Use the syntax
	 * <code>TextFormatAlign.LEFT</code>.]]></haxe_doc></LEFT>
		<JUSTIFY><haxe_doc><![CDATA[* Constant; justifies text within the text field. Use the syntax
	 * <code>TextFormatAlign.JUSTIFY</code>.]]></haxe_doc></JUSTIFY>
		<CENTER><haxe_doc><![CDATA[* Constant; centers the text in the text field. Use the syntax
	 * <code>TextFormatAlign.CENTER</code>.]]></haxe_doc></CENTER>
		<haxe_doc>* The TextFormatAlign class provides values for text alignment in the
 * TextFormat class.</haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<typedef path="nme.ui.Acceleration" params="" file="/Users/joshua/Development/Haxe/nme/nme/ui/Acceleration.hx"><a>
	<z><c path="Float"/></z>
	<y><c path="Float"/></y>
	<x><c path="Float"/></x>
</a></typedef>
	<class path="nme.ui.Accelerometer" params="" file="/Users/joshua/Development/Haxe/nme/nme/ui/Accelerometer.hx" extern="1"><get public="1" set="method" static="1"><f a=""><t path="nme.ui.Acceleration"/></f></get></class>
	<class path="nme.ui.Keyboard" params="" file="/Users/joshua/Development/Haxe/nme/nme/ui/Keyboard.hx" extern="1">
		<A public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the A key (65).</haxe_doc>
		</A>
		<ALTERNATE public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the Alternate (Option) key
	 * (18).</haxe_doc>
		</ALTERNATE>
		<B public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the B key (66).</haxe_doc>
		</B>
		<BACKQUOTE public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the ` key (192).</haxe_doc>
		</BACKQUOTE>
		<BACKSLASH public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the \ key (220).</haxe_doc>
		</BACKSLASH>
		<BACKSPACE public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Backspace key (8).</haxe_doc>
		</BACKSPACE>
		<C public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the C key (67).</haxe_doc>
		</C>
		<CAPS_LOCK public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Caps Lock key (20).</haxe_doc>
		</CAPS_LOCK>
		<COMMA public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the , key (188).</haxe_doc>
		</COMMA>
		<COMMAND public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the Mac command key (15). This constant is
	 * currently only used for setting menu key equivalents.</haxe_doc>
		</COMMAND>
		<CONTROL public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Control key (17).</haxe_doc>
		</CONTROL>
		<D public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the D key (68).</haxe_doc>
		</D>
		<DELETE public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Delete key (46).</haxe_doc>
		</DELETE>
		<DOWN public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Down Arrow key (40).</haxe_doc>
		</DOWN>
		<E public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the E key (69).</haxe_doc>
		</E>
		<END public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the End key (35).</haxe_doc>
		</END>
		<ENTER public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Enter key (13).</haxe_doc>
		</ENTER>
		<EQUAL public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the = key (187).</haxe_doc>
		</EQUAL>
		<ESCAPE public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Escape key (27).</haxe_doc>
		</ESCAPE>
		<F public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the F key (70).</haxe_doc>
		</F>
		<F1 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F1 key (112).</haxe_doc>
		</F1>
		<F10 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F10 key (121).</haxe_doc>
		</F10>
		<F11 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F11 key (122).</haxe_doc>
		</F11>
		<F12 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F12 key (123).</haxe_doc>
		</F12>
		<F13 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F13 key (124).</haxe_doc>
		</F13>
		<F14 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F14 key (125).</haxe_doc>
		</F14>
		<F15 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F15 key (126).</haxe_doc>
		</F15>
		<F2 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F2 key (113).</haxe_doc>
		</F2>
		<F3 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F3 key (114).</haxe_doc>
		</F3>
		<F4 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F4 key (115).</haxe_doc>
		</F4>
		<F5 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F5 key (116).</haxe_doc>
		</F5>
		<F6 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F6 key (117).</haxe_doc>
		</F6>
		<F7 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F7 key (118).</haxe_doc>
		</F7>
		<F8 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F8 key (119).</haxe_doc>
		</F8>
		<F9 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the F9 key (120).</haxe_doc>
		</F9>
		<G public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the G key (71).</haxe_doc>
		</G>
		<H public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the H key (72).</haxe_doc>
		</H>
		<HOME public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Home key (36).</haxe_doc>
		</HOME>
		<I public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the I key (73).</haxe_doc>
		</I>
		<INSERT public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Insert key (45).</haxe_doc>
		</INSERT>
		<J public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the J key (74).</haxe_doc>
		</J>
		<K public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the K key (75).</haxe_doc>
		</K>
		<L public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the L key (76).</haxe_doc>
		</L>
		<LEFT public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Left Arrow key (37).</haxe_doc>
		</LEFT>
		<LEFTBRACKET public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the [ key (219).</haxe_doc>
		</LEFTBRACKET>
		<M public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the M key (77).</haxe_doc>
		</M>
		<MINUS public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the - key (189).</haxe_doc>
		</MINUS>
		<N public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the N key (78).</haxe_doc>
		</N>
		<NUMBER_0 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 0 key (48).</haxe_doc>
		</NUMBER_0>
		<NUMBER_1 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 1 key (49).</haxe_doc>
		</NUMBER_1>
		<NUMBER_2 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 2 key (50).</haxe_doc>
		</NUMBER_2>
		<NUMBER_3 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 3 key (51).</haxe_doc>
		</NUMBER_3>
		<NUMBER_4 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 4 key (52).</haxe_doc>
		</NUMBER_4>
		<NUMBER_5 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 5 key (53).</haxe_doc>
		</NUMBER_5>
		<NUMBER_6 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 6 key (54).</haxe_doc>
		</NUMBER_6>
		<NUMBER_7 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 7 key (55).</haxe_doc>
		</NUMBER_7>
		<NUMBER_8 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 8 key (56).</haxe_doc>
		</NUMBER_8>
		<NUMBER_9 public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the 9 key (57).</haxe_doc>
		</NUMBER_9>
		<NUMPAD public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the pseudo-key code for the the number pad (21).
	 * Use to set numpad modifier on key equivalents</haxe_doc>
		</NUMPAD>
		<NUMPAD_0 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 0 key on the
	 * number pad (96).</haxe_doc>
		</NUMPAD_0>
		<NUMPAD_1 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 1 key on the
	 * number pad (97).</haxe_doc>
		</NUMPAD_1>
		<NUMPAD_2 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 2 key on the
	 * number pad (98).</haxe_doc>
		</NUMPAD_2>
		<NUMPAD_3 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 3 key on the
	 * number pad (99).</haxe_doc>
		</NUMPAD_3>
		<NUMPAD_4 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 4 key on the
	 * number pad (100).</haxe_doc>
		</NUMPAD_4>
		<NUMPAD_5 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 5 key on the
	 * number pad (101).</haxe_doc>
		</NUMPAD_5>
		<NUMPAD_6 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 6 key on the
	 * number pad (102).</haxe_doc>
		</NUMPAD_6>
		<NUMPAD_7 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 7 key on the
	 * number pad (103).</haxe_doc>
		</NUMPAD_7>
		<NUMPAD_8 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 8 key on the
	 * number pad (104).</haxe_doc>
		</NUMPAD_8>
		<NUMPAD_9 public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the number 9 key on the
	 * number pad (105).</haxe_doc>
		</NUMPAD_9>
		<NUMPAD_ADD public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the addition key on the
	 * number pad (107).</haxe_doc>
		</NUMPAD_ADD>
		<NUMPAD_DECIMAL public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the decimal key on the
	 * number pad (110).</haxe_doc>
		</NUMPAD_DECIMAL>
		<NUMPAD_DIVIDE public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the division key on the
	 * number pad (111).</haxe_doc>
		</NUMPAD_DIVIDE>
		<NUMPAD_ENTER public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Enter key on the
	 * number pad (108).</haxe_doc>
		</NUMPAD_ENTER>
		<NUMPAD_MULTIPLY public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the multiplication key on
	 * the number pad (106).</haxe_doc>
		</NUMPAD_MULTIPLY>
		<NUMPAD_SUBTRACT public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the subtraction key on the
	 * number pad (109).</haxe_doc>
		</NUMPAD_SUBTRACT>
		<O public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the O key (79).</haxe_doc>
		</O>
		<P public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the P key (80).</haxe_doc>
		</P>
		<PAGE_DOWN public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Page Down key (34).</haxe_doc>
		</PAGE_DOWN>
		<PAGE_UP public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Page Up key (33).</haxe_doc>
		</PAGE_UP>
		<PERIOD public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the . key (190).</haxe_doc>
		</PERIOD>
		<Q public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the Q key (81).</haxe_doc>
		</Q>
		<QUOTE public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the ' key (222).</haxe_doc>
		</QUOTE>
		<R public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the R key (82).</haxe_doc>
		</R>
		<RIGHT public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Right Arrow key (39).</haxe_doc>
		</RIGHT>
		<RIGHTBRACKET public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the ] key (221).</haxe_doc>
		</RIGHTBRACKET>
		<S public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the S key (83).</haxe_doc>
		</S>
		<SEMICOLON public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the ; key (186).</haxe_doc>
		</SEMICOLON>
		<SETUP public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_2</e></m></meta>
			<haxe_doc>* Engage setup application or menu</haxe_doc>
		</SETUP>
		<SHIFT public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Shift key (16).</haxe_doc>
		</SHIFT>
		<SLASH public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the / key (191).</haxe_doc>
		</SLASH>
		<SPACE public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Spacebar (32).</haxe_doc>
		</SPACE>
		<T public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the T key (84).</haxe_doc>
		</T>
		<TAB public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Tab key (9).</haxe_doc>
		</TAB>
		<U public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the U key (85).</haxe_doc>
		</U>
		<UP public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* Constant associated with the key code value for the Up Arrow key (38).</haxe_doc>
		</UP>
		<V public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the V key (86).</haxe_doc>
		</V>
		<W public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the W key (87).</haxe_doc>
		</W>
		<X public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the X key (88).</haxe_doc>
		</X>
		<Y public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the Y key (89).</haxe_doc>
		</Y>
		<Z public="1" static="1">
			<c path="Int"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc>* Constant associated with the key code value for the Z key (90).</haxe_doc>
		</Z>
		<haxe_doc>* The Keyboard class is used to build an interface that can be controlled by
 * a user with a standard keyboard. You can use the methods and properties of
 * the Keyboard class without using a constructor. The properties of the
 * Keyboard class are constants representing the keys that are most commonly
 * used to control games.</haxe_doc>
	</class>
	<class path="nme.ui.Mouse" params="" file="/Users/joshua/Development/Haxe/nme/nme/ui/Mouse.hx" extern="1">
		<cursor public="1" static="1">
			<d/>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Sets or returns the type of cursor, or, for a native cursor, the cursor
	 * name.
	 *
	 * <p>The default value is <code>nme.ui.MouseCursor.AUTO</code>.</p>
	 *
	 * <p>To set values for this property, use the following string values:</p>
	 *
	 * <p><b>Note:</b> For Flash Player 10.2 or AIR 2.6 and later versions, this
	 * property sets or gets the cursor name when you are using a native cursor.
	 * A native cursor name defined using <code>Mouse.registerCursor()</code>
	 * overwrites currently predefined cursor types (such as
	 * <code>nme.ui.MouseCursor.IBEAM</code>).</p>
	 * 
	 * @throws ArgumentError If set to any value which is not a member of
	 *                       <code>nme.ui.MouseCursor</code>, or is not a
	 *                       string specified using the
	 *                       <code>Mouse.registerCursor()</code> method.]]></haxe_doc>
		</cursor>
		<supportsCursor public="1" static="1">
			<e path="Bool"/>
			<meta><m n=":require"><e>flash10_1</e></m></meta>
			<haxe_doc><![CDATA[* Indicates whether the computer or device displays a persistent cursor.
	 *
	 * <p>The <code>supportsCursor</code> property is <code>true</code> on most
	 * desktop computers and <code>false</code> on most mobile devices.</p>
	 *
	 * <p><b>Note:</b> Mouse events can be dispatched whether or not this
	 * property is <code>true</code>. However, mouse events may behave
	 * differently depending on the physical characteristics of the pointing
	 * device.</p>]]></haxe_doc>
		</supportsCursor>
		<hide public="1" set="method" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Hides the pointer. The pointer is visible by default.
	 *
	 * <p><b>Note:</b> You need to call <code>Mouse.hide()</code> only once,
	 * regardless of the number of previous calls to
	 * <code>Mouse.show()</code>.</p>
	 *]]></haxe_doc>
		</hide>
		<show public="1" set="method" static="1">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Displays the pointer. The pointer is visible by default.
	 *
	 * <p><b>Note:</b> You need to call <code>Mouse.show()</code> only once,
	 * regardless of the number of previous calls to
	 * <code>Mouse.hide()</code>.</p>
	 *]]></haxe_doc>
		</show>
		<haxe_doc><![CDATA[* The methods of the Mouse class are used to hide and show the mouse pointer,
 * or to set the pointer to a specific style. The Mouse class is a top-level
 * class whose properties and methods you can access without using a
 * constructor. <ph outputclass="flashonly">The pointer is visible by default,
 * but you can hide it and implement a custom pointer.]]></haxe_doc>
	</class>
	<class path="nme.ui.Multitouch" params="" file="/Users/joshua/Development/Haxe/nme/nme/ui/Multitouch.hx" extern="1">
		<inputMode public="1" static="1">
			<e path="nme.ui.MultitouchInputMode"/>
			<haxe_doc>* Identifies the multi-touch mode for touch and gesture event handling. Use
	 * this property to manage whether or not events are dispatched as touch
	 * events with multiple points of contact and specific events for different
	 * gestures (such as rotation and pan), or only a single point of contact
	 * (such as tap), or none at all (contact is handled as a mouse event). To
	 * set this property, use values from the nme.ui.MultitouchInputMode class.
	 * 
	 * @default gesture</haxe_doc>
		</inputMode>
		<maxTouchPoints public="1" static="1">
			<c path="Int"/>
			<haxe_doc>* The maximum number of concurrent touch points supported by the current
	 * environment.</haxe_doc>
		</maxTouchPoints>
		<supportedGestures public="1" static="1">
			<t path="nme.Vector"><c path="String"/></t>
			<haxe_doc><![CDATA[* A Vector array (a typed array of string values) of multi-touch contact
	 * types supported in the current environment. The array of strings can be
	 * used as event types to register event listeners. Possible values are
	 * constants from the GestureEvent, PressAndTapGestureEvent, and
	 * TransformGestureEvent classes (such as <code>GESTURE_PAN</code>).
	 *
	 * <p>If the Flash runtime is in an environment that does not support any
	 * multi-touch gestures, the value is <code>null</code>.</p>
	 *
	 * <p><b>Note:</b> For Mac OS 10.5.3 and later,
	 * <code>Multitouch.supportedGestures</code> returns non-null values
	 * (possibly indicating incorrectly that gesture events are supported) even
	 * if the current hardware does not support gesture input.</p>
	 *
	 * <p>Use this property to test for multi-touch gesture support. Then, use
	 * event handlers for the available multi-touch gestures. For those gestures
	 * that are not supported in the current evironment, you'll need to create
	 * alternative event handling.</p>]]></haxe_doc>
		</supportedGestures>
		<supportsGestureEvents public="1" static="1">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* Indicates whether the current environment supports gesture input, such as
	 * rotating two fingers around a touch screen. Gesture events are listed in
	 * the TransformGestureEvent, PressAndTapGestureEvent, and GestureEvent
	 * classes.
	 *
	 * <p><b>Note:</b> For Mac OS 10.5.3 and later, this value is always
	 * <code>true</code>. <code>Multitouch.supportsGestureEvent</code> returns
	 * <code>true</code> even if the hardware does not support gesture
	 * events.</p>]]></haxe_doc>
		</supportsGestureEvents>
		<supportsTouchEvents public="1" static="1">
			<e path="Bool"/>
			<haxe_doc>* Indicates whether the current environment supports basic touch input, such
	 * as a single finger tap. Touch events are listed in the TouchEvent class.</haxe_doc>
		</supportsTouchEvents>
		<haxe_doc><![CDATA[* The Multitouch class manages and provides information about the current
 * environment's support for handling contact from user input devices,
 * including contact that has two or more touch points (such as a user's
 * fingers on a touch screen). When a user interacts with a device such as a
 * mobile phone or tablet with a touch screen, the user typically touches the
 * screen with his or her fingers or a pointing device. While there is a broad
 * range of pointing devices, such as a mouse or a stylus, many of these
 * devices only have a single point of contact with an application. For
 * pointing devices with a single point of contact, user interaction events
 * can be handled as a mouse event, or using a basic set of touch events
 * (called "touch point" events). However, for pointing devices that have
 * several points of contact and perform complex movement, such as the human
 * hand, Flash runtimes support an additional set of event handling API called
 * gesture events. The API for handling user interaction with these gesture
 * events includes the following classes:
 *
 * <p>
 * <ul>
 *   <li>nme.events.TouchEvent</li>
 *   <li>nme.events.GestureEvent</li>
 *   <li>nme.events.GesturePhase</li>
 *   <li>nme.events.TransformGestureEvent</li>
 *   <li>nme.events.PressAndTapGestureEvent</li>
 * </ul>
 * </p>
 *
 * <p>Use the listed classes to write code that handles touch events. Use the
 * Multitouch class to determine the current environment's support for touch
 * interaction, and to manage the support of touch interaction if the current
 * environment supports touch input.</p>
 *
 * <p>You cannot create a Multitouch object directly from ActionScript code.
 * If you call <code>new Multitouch()</code>, an exception is thrown.</p>
 *
 * <p><b>Note:</b> The Multitouch feature is not supported for SWF files
 * embedded in HTML running on Mac OS.</p>]]></haxe_doc>
		<meta><m n=":require"><e>flash10_1</e></m></meta>
	</class>
	<enum path="nme.ui.MultitouchInputMode" params="" file="/Users/joshua/Development/Haxe/nme/nme/ui/MultitouchInputMode.hx">
		<TOUCH_POINT/>
		<NONE><haxe_doc>* Specifies that all user contact with a touch-enabled device is interpreted
	 * as a type of mouse event.</haxe_doc></NONE>
		<GESTURE><haxe_doc>* Specifies that TransformGestureEvent, PressAndTapGestureEvent, and
	 * GestureEvent events are dispatched for the related user interaction
	 * supported by the current environment, and other touch events (such as a
	 * simple tap) are interpreted as mouse events.</haxe_doc></GESTURE>
		<haxe_doc><![CDATA[* The MultitouchInputMode class provides values for the
 * <code>inputMode</code> property in the nme.ui.Multitouch class. These
 * values set the type of touch events the Flash runtime dispatches when the
 * user interacts with a touch-enabled device.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.utils.IDataInput" params="" file="/Users/joshua/Development/Haxe/nme/nme/utils/IDataInput.hx" extern="1" interface="1">
		<readUnsignedShort public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedShort>
		<readUnsignedInt public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedInt>
		<readUnsignedByte public="1" set="method"><f a=""><c path="Int"/></f></readUnsignedByte>
		<readUTFBytes public="1" set="method"><f a="length">
	<c path="Int"/>
	<c path="String"/>
</f></readUTFBytes>
		<readUTF public="1" set="method"><f a=""><c path="String"/></f></readUTF>
		<readShort public="1" set="method"><f a=""><c path="Int"/></f></readShort>
		<readObject public="1" set="method"><f a=""><d/></f></readObject>
		<readMultiByte public="1" set="method"><f a="length:charSet">
	<c path="Int"/>
	<c path="String"/>
	<c path="String"/>
</f></readMultiByte>
		<readInt public="1" set="method"><f a=""><c path="Int"/></f></readInt>
		<readFloat public="1" set="method"><f a=""><c path="Float"/></f></readFloat>
		<readDouble public="1" set="method"><f a=""><c path="Float"/></f></readDouble>
		<readBytes public="1" set="method"><f a="bytes:?offset:?length">
	<c path="nme.utils.ByteArray"/>
	<c path="Int"/>
	<c path="Int"/>
	<e path="Void"/>
</f></readBytes>
		<readByte public="1" set="method"><f a=""><c path="Int"/></f></readByte>
		<readBoolean public="1" set="method"><f a=""><e path="Bool"/></f></readBoolean>
		<objectEncoding public="1"><c path="Int"/></objectEncoding>
		<endian public="1"><e path="nme.utils.Endian"/></endian>
		<bytesAvailable public="1" set="null"><c path="Int"/></bytesAvailable>
	</class>
	<class path="nme.utils.ByteArray" params="" file="/Users/joshua/Development/Haxe/nme/nme/utils/ByteArray.hx" extern="1">
		<implements path="nme.utils.IDataInput"/>
		<defaultObjectEncoding public="1" static="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* Denotes the default object encoding for the ByteArray class to use for a
	 * new ByteArray instance. When you create a new ByteArray instance, the
	 * encoding on that instance starts with the value of
	 * <code>defaultObjectEncoding</code>. The <code>defaultObjectEncoding</code>
	 * property is initialized to <code>ObjectEncoding.AMF3</code>.
	 *
	 * <p>When an object is written to or read from binary data, the
	 * <code>objectEncoding</code> value is used to determine whether the
	 * ActionScript 3.0, ActionScript2.0, or ActionScript 1.0 format should be
	 * used. The value is a constant from the ObjectEncoding class.</p>]]></haxe_doc>
		</defaultObjectEncoding>
		<writeUnsignedInt public="1" set="method">
			<f a="value">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Writes a 32-bit unsigned integer to the byte stream.
	 * 
	 * @param value An unsigned integer to write to the byte stream.</haxe_doc>
		</writeUnsignedInt>
		<writeUTFBytes public="1" set="method">
			<f a="value">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a UTF-8 string to the byte stream. Similar to the
	 * <code>writeUTF()</code> method, but <code>writeUTFBytes()</code> does not
	 * prefix the string with a 16-bit length word.
	 * 
	 * @param value The string value to be written.]]></haxe_doc>
		</writeUTFBytes>
		<writeUTF public="1" set="method">
			<f a="value">
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Writes a UTF-8 string to the byte stream. The length of the UTF-8 string
	 * in bytes is written first, as a 16-bit integer, followed by the bytes
	 * representing the characters of the string.
	 * 
	 * @param value The string value to be written.
	 * @throws RangeError If the length is larger than 65535.</haxe_doc>
		</writeUTF>
		<writeShort public="1" set="method">
			<f a="value">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Writes a 16-bit integer to the byte stream. The low 16 bits of the
	 * parameter are used. The high 16 bits are ignored.
	 * 
	 * @param value 32-bit integer, whose low 16 bits are written to the byte
	 *              stream.</haxe_doc>
		</writeShort>
		<writeObject public="1" set="method">
			<f a="object">
				<d/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Writes an object into the byte array in AMF serialized format.
	 * 
	 * @param object The object to serialize.</haxe_doc>
		</writeObject>
		<writeMultiByte public="1" set="method">
			<f a="value:charSet">
				<c path="String"/>
				<c path="String"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a multibyte string to the byte stream using the specified character
	 * set.
	 * 
	 * @param value   The string value to be written.
	 * @param charSet The string denoting the character set to use. Possible
	 *                character set strings include <code>"shift-jis"</code>,
	 *                <code>"cn-gb"</code>, <code>"iso-8859-1"</code>, and
	 *                others. For a complete list, see <a
	 *                href="../../charset-codes.html">Supported Character
	 *                Sets</a>.]]></haxe_doc>
		</writeMultiByte>
		<writeInt public="1" set="method">
			<f a="value">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Writes a 32-bit signed integer to the byte stream.
	 * 
	 * @param value An integer to write to the byte stream.</haxe_doc>
		</writeInt>
		<writeFloat public="1" set="method">
			<f a="value">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Writes an IEEE 754 single-precision (32-bit) floating-point number to the
	 * byte stream.
	 * 
	 * @param value A single-precision (32-bit) floating-point number.</haxe_doc>
		</writeFloat>
		<writeDouble public="1" set="method">
			<f a="value">
				<c path="Float"/>
				<e path="Void"/>
			</f>
			<haxe_doc>* Writes an IEEE 754 double-precision (64-bit) floating-point number to the
	 * byte stream.
	 * 
	 * @param value A double-precision (64-bit) floating-point number.</haxe_doc>
		</writeDouble>
		<writeBytes public="1" set="method">
			<f a="bytes:?offset:?length">
				<c path="nme.utils.ByteArray"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a sequence of <code>length</code> bytes from the specified byte
	 * array, <code>bytes</code>, starting <code>offset</code>(zero-based index)
	 * bytes into the byte stream.
	 *
	 * <p>If the <code>length</code> parameter is omitted, the default length of
	 * 0 is used; the method writes the entire buffer starting at
	 * <code>offset</code>. If the <code>offset</code> parameter is also omitted,
	 * the entire buffer is written. </p>
	 *
	 * <p>If <code>offset</code> or <code>length</code> is out of range, they are
	 * clamped to the beginning and end of the <code>bytes</code> array.</p>
	 * 
	 * @param bytes  The ByteArray object.
	 * @param offset A zero-based index indicating the position into the array to
	 *               begin writing.
	 * @param length An unsigned integer indicating how far into the buffer to
	 *               write.]]></haxe_doc>
		</writeBytes>
		<writeByte public="1" set="method">
			<f a="value">
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a byte to the byte stream.
	 *
	 * <p>The low 8 bits of the parameter are used. The high 24 bits are ignored.
	 * </p>
	 * 
	 * @param value A 32-bit integer. The low 8 bits are written to the byte
	 *              stream.]]></haxe_doc>
		</writeByte>
		<writeBoolean public="1" set="method">
			<f a="value">
				<e path="Bool"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Writes a Boolean value. A single byte is written according to the
	 * <code>value</code> parameter, either 1 if <code>true</code> or 0 if
	 * <code>false</code>.
	 * 
	 * @param value A Boolean value determining which byte is written. If the
	 *              parameter is <code>true</code>, the method writes a 1; if
	 *              <code>false</code>, the method writes a 0.]]></haxe_doc>
		</writeBoolean>
		<uncompress public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Decompresses the byte array. For content running in Adobe AIR, you can
	 * specify a compression algorithm by passing a value (defined in the
	 * CompressionAlgorithm class) as the <code>algorithm</code> parameter. The
	 * byte array must have been compressed using the same algorithm. Flash
	 * Player supports only the default algorithm, zlib.
	 *
	 * <p>After the call, the <code>length</code> property of the ByteArray is
	 * set to the new length. The <code>position</code> property is set to 0.</p>
	 *
	 * <p>The zlib compressed data format is described at <a
	 * href="http://www.ietf.org/rfc/rfc1950.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1950.txt</a>.</p>
	 *
	 * <p>The deflate compression algorithm is described at <a
	 * href="http://www.ietf.org/rfc/rfc1951.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1951.txt</a>.</p>
	 *
	 * <p>In order to decode data compressed in a format that uses the deflate
	 * compression algorithm, such as data in gzip or zip format, it will not
	 * work to call <code>uncompress(CompressionAlgorithm.DEFLATE)</code> on a
	 * ByteArray containing the compression formation data. First, you must
	 * separate the metadata that is included as part of the compressed data
	 * format from the actual compressed data. For more information, see the
	 * <code>compress()</code> method description.</p>
	 * 
	 * @throws IOError The data is not valid compressed data; it was not
	 *                 compressed with the same compression algorithm used to
	 *                 compress.]]></haxe_doc>
		</uncompress>
		<toString public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc><![CDATA[* Converts the byte array to a string. If the data in the array begins with
	 * a Unicode byte order mark, the application will honor that mark when
	 * converting to a string. If <code>System.useCodePage</code> is set to
	 * <code>true</code>, the application will treat the data in the array as
	 * being in the current system code page when converting.
	 * 
	 * @return The string representation of the byte array.]]></haxe_doc>
		</toString>
		<readUnsignedShort public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc><![CDATA[* Reads an unsigned 16-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range 0 to 65535. </p>
	 * 
	 * @return A 16-bit unsigned integer between 0 and 65535.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUnsignedShort>
		<readUnsignedInt public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc><![CDATA[* Reads an unsigned 32-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range 0 to 4294967295. </p>
	 * 
	 * @return A 32-bit unsigned integer between 0 and 4294967295.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUnsignedInt>
		<readUnsignedByte public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc><![CDATA[* Reads an unsigned byte from the byte stream.
	 *
	 * <p>The returned value is in the range 0 to 255. </p>
	 * 
	 * @return A 32-bit unsigned integer between 0 and 255.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUnsignedByte>
		<readUTFBytes public="1" set="method">
			<f a="length">
				<c path="Int"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Reads a sequence of UTF-8 bytes specified by the <code>length</code>
	 * parameter from the byte stream and returns a string.
	 * 
	 * @param length An unsigned short indicating the length of the UTF-8 bytes.
	 * @return A string composed of the UTF-8 bytes of the specified length.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readUTFBytes>
		<readUTF public="1" set="method">
			<f a=""><c path="String"/></f>
			<haxe_doc>* Reads a UTF-8 string from the byte stream. The string is assumed to be
	 * prefixed with an unsigned short indicating the length in bytes.
	 * 
	 * @return UTF-8 encoded string.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readUTF>
		<readShort public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc><![CDATA[* Reads a signed 16-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range -32768 to 32767.</p>
	 * 
	 * @return A 16-bit signed integer between -32768 and 32767.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readShort>
		<readObject public="1" set="method">
			<f a=""><d/></f>
			<haxe_doc>* Reads an object from the byte array, encoded in AMF serialized format.
	 * 
	 * @return The deserialized object.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readObject>
		<readMultiByte public="1" set="method">
			<f a="length:charSet">
				<c path="Int"/>
				<c path="String"/>
				<c path="String"/>
			</f>
			<haxe_doc><![CDATA[* Reads a multibyte string of specified length from the byte stream using
	 * the specified character set.
	 * 
	 * @param length  The number of bytes from the byte stream to read.
	 * @param charSet The string denoting the character set to use to interpret
	 *                the bytes. Possible character set strings include
	 *                <code>"shift-jis"</code>, <code>"cn-gb"</code>,
	 *                <code>"iso-8859-1"</code>, and others. For a complete list,
	 *                see <a href="../../charset-codes.html">Supported Character
	 *                Sets</a>.
	 *
	 *                <p><b>Note:</b> If the value for the <code>charSet</code>
	 *                parameter is not recognized by the current system, the
	 *                application uses the system's default code page as the
	 *                character set. For example, a value for the
	 *                <code>charSet</code> parameter, as in
	 *                <code>myTest.readMultiByte(22, "iso-8859-01")</code> that
	 *                uses <code>01</code> instead of <code>1</code> might work
	 *                on your development system, but not on another system. On
	 *                the other system, the application will use the system's
	 *                default code page.</p>
	 * @return UTF-8 encoded string.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readMultiByte>
		<readInt public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc><![CDATA[* Reads a signed 32-bit integer from the byte stream.
	 *
	 * <p>The returned value is in the range -2147483648 to 2147483647.</p>
	 * 
	 * @return A 32-bit signed integer between -2147483648 and 2147483647.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readInt>
		<readFloat public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>* Reads an IEEE 754 single-precision (32-bit) floating-point number from the
	 * byte stream.
	 * 
	 * @return A single-precision (32-bit) floating-point number.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readFloat>
		<readDouble public="1" set="method">
			<f a=""><c path="Float"/></f>
			<haxe_doc>* Reads an IEEE 754 double-precision (64-bit) floating-point number from the
	 * byte stream.
	 * 
	 * @return A double-precision (64-bit) floating-point number.
	 * @throws EOFError There is not sufficient data available to read.</haxe_doc>
		</readDouble>
		<readBytes public="1" set="method">
			<f a="bytes:?offset:?length">
				<c path="nme.utils.ByteArray"/>
				<c path="Int"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Reads the number of data bytes, specified by the <code>length</code>
	 * parameter, from the byte stream. The bytes are read into the ByteArray
	 * object specified by the <code>bytes</code> parameter, and the bytes are
	 * written into the destination ByteArray starting at the position specified
	 * by <code>offset</code>.
	 * 
	 * @param bytes  The ByteArray object to read data into.
	 * @param offset The offset (position) in <code>bytes</code> at which the
	 *               read data should be written.
	 * @param length The number of bytes to read. The default value of 0 causes
	 *               all available data to be read.
	 * @throws EOFError   There is not sufficient data available to read.
	 * @throws RangeError The value of the supplied offset and length, combined,
	 *                    is greater than the maximum for a uint.]]></haxe_doc>
		</readBytes>
		<readByte public="1" set="method">
			<f a=""><c path="Int"/></f>
			<haxe_doc><![CDATA[* Reads a signed byte from the byte stream.
	 *
	 * <p>The returned value is in the range -128 to 127.</p>
	 * 
	 * @return An integer between -128 and 127.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readByte>
		<readBoolean public="1" set="method">
			<f a=""><e path="Bool"/></f>
			<haxe_doc><![CDATA[* Reads a Boolean value from the byte stream. A single byte is read, and
	 * <code>true</code> is returned if the byte is nonzero, <code>false</code>
	 * otherwise.
	 * 
	 * @return Returns <code>true</code> if the byte is nonzero,
	 *         <code>false</code> otherwise.
	 * @throws EOFError There is not sufficient data available to read.]]></haxe_doc>
		</readBoolean>
		<inflate public="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Decompresses the byte array using the deflate compression algorithm. The
	 * byte array must have been compressed using the same algorithm.
	 *
	 * <p>After the call, the <code>length</code> property of the ByteArray is
	 * set to the new length. The <code>position</code> property is set to 0.</p>
	 *
	 * <p>The deflate compression algorithm is described at <a
	 * href="http://www.ietf.org/rfc/rfc1951.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1951.txt</a>.</p>
	 *
	 * <p>In order to decode data compressed in a format that uses the deflate
	 * compression algorithm, such as data in gzip or zip format, it will not
	 * work to simply call <code>inflate()</code> on a ByteArray containing the
	 * compression formation data. First, you must separate the metadata that is
	 * included as part of the compressed data format from the actual compressed
	 * data. For more information, see the <code>compress()</code> method
	 * description.</p>
	 * 
	 * @throws IOError The data is not valid compressed data; it was not
	 *                 compressed with the same compression algorithm used to
	 *                 compress.]]></haxe_doc>
		</inflate>
		<deflate public="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Compresses the byte array using the deflate compression algorithm. The
	 * entire byte array is compressed.
	 *
	 * <p>After the call, the <code>length</code> property of the ByteArray is
	 * set to the new length. The <code>position</code> property is set to the
	 * end of the byte array.</p>
	 *
	 * <p>The deflate compression algorithm is described at <a
	 * href="http://www.ietf.org/rfc/rfc1951.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1951.txt</a>.</p>
	 *
	 * <p>In order to use the deflate format to compress a ByteArray instance's
	 * data in a specific format such as gzip or zip, you cannot simply call
	 * <code>deflate()</code>. You must create a ByteArray structured according
	 * to the compression format's specification, including the appropriate
	 * metadata as well as the compressed data obtained using the deflate format.
	 * Likewise, in order to decode data compressed in a format such as gzip or
	 * zip, you can't simply call <code>inflate()</code> on that data. First, you
	 * must separate the metadata from the compressed data, and you can then use
	 * the deflate format to decompress the compressed data.</p>
	 *]]></haxe_doc>
		</deflate>
		<compress public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Compresses the byte array. The entire byte array is compressed. For
	 * content running in Adobe AIR, you can specify a compression algorithm by
	 * passing a value (defined in the CompressionAlgorithm class) as the
	 * <code>algorithm</code> parameter. Flash Player supports only the default
	 * algorithm, zlib.
	 *
	 * <p>After the call, the <code>length</code> property of the ByteArray is
	 * set to the new length. The <code>position</code> property is set to the
	 * end of the byte array.</p>
	 *
	 * <p>The zlib compressed data format is described at <a
	 * href="http://www.ietf.org/rfc/rfc1950.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1950.txt</a>.</p>
	 *
	 * <p>The deflate compression algorithm is described at <a
	 * href="http://www.ietf.org/rfc/rfc1951.txt"
	 * scope="external">http://www.ietf.org/rfc/rfc1951.txt</a>.</p>
	 *
	 * <p>The deflate compression algorithm is used in several compression
	 * formats, such as zlib, gzip, some zip implementations, and others. When
	 * data is compressed using one of those compression formats, in addition to
	 * storing the compressed version of the original data, the compression
	 * format data (for example, the .zip file) includes metadata information.
	 * Some examples of the types of metadata included in various file formats
	 * are file name, file modification date/time, original file size, optional
	 * comments, checksum data, and more.</p>
	 *
	 * <p>For example, when a ByteArray is compressed using the zlib algorithm,
	 * the resulting ByteArray is structured in a specific format. Certain bytes
	 * contain metadata about the compressed data, while other bytes contain the
	 * actual compressed version of the original ByteArray data. As defined by
	 * the zlib compressed data format specification, those bytes (that is, the
	 * portion containing the compressed version of the original data) are
	 * compressed using the deflate algorithm. Consequently those bytes are
	 * identical to the result of calling <code>compress(<ph
	 * outputclass="javascript">air.CompressionAlgorithm.DEFLATE)</code> on the
	 * original ByteArray. However, the result from <code>compress(<ph
	 * outputclass="javascript">air.CompressionAlgorithm.ZLIB)</code> includes
	 * the extra metadata, while the
	 * <code>compress(CompressionAlgorithm.DEFLATE)</code> result includes only
	 * the compressed version of the original ByteArray data and nothing
	 * else.</p>
	 *
	 * <p>In order to use the deflate format to compress a ByteArray instance's
	 * data in a specific format such as gzip or zip, you cannot simply call
	 * <code>compress(CompressionAlgorithm.DEFLATE)</code>. You must create a
	 * ByteArray structured according to the compression format's specification,
	 * including the appropriate metadata as well as the compressed data obtained
	 * using the deflate format. Likewise, in order to decode data compressed in
	 * a format such as gzip or zip, you can't simply call
	 * <code>uncompress(CompressionAlgorithm.DEFLATE)</code> on that data. First,
	 * you must separate the metadata from the compressed data, and you can then
	 * use the deflate format to decompress the compressed data.</p>
	 *]]></haxe_doc>
		</compress>
		<clear public="1">
			<f a=""><e path="Void"/></f>
			<meta><m n=":require"><e>flash10</e></m></meta>
			<haxe_doc><![CDATA[* Clears the contents of the byte array and resets the <code>length</code>
	 * and <code>position</code> properties to 0. Calling this method explicitly
	 * frees up the memory used by the ByteArray instance.
	 *]]></haxe_doc>
		</clear>
		<position public="1">
			<c path="Int"/>
			<haxe_doc>* Moves, or returns the current position, in bytes, of the file pointer into
	 * the ByteArray object. This is the point at which the next call to a read
	 * method starts reading or a write method starts writing.</haxe_doc>
		</position>
		<objectEncoding public="1">
			<c path="Int"/>
			<haxe_doc>* Used to determine whether the ActionScript 3.0, ActionScript 2.0, or
	 * ActionScript 1.0 format should be used when writing to, or reading from, a
	 * ByteArray instance. The value is a constant from the ObjectEncoding class.</haxe_doc>
		</objectEncoding>
		<length public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The length of the ByteArray object, in bytes.
	 *
	 * <p>If the length is set to a value that is larger than the current length,
	 * the right side of the byte array is filled with zeros.</p>
	 *
	 * <p>If the length is set to a value that is smaller than the current
	 * length, the byte array is truncated.</p>]]></haxe_doc>
		</length>
		<endian public="1">
			<e path="nme.utils.Endian"/>
			<haxe_doc><![CDATA[* Changes or reads the byte order for the data; either
	 * <code>Endian.BIG_ENDIAN</code> or <code>Endian.LITTLE_ENDIAN</code>.]]></haxe_doc>
		</endian>
		<bytesAvailable public="1" set="null">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The number of bytes of data available for reading from the current
	 * position in the byte array to the end of the array.
	 *
	 * <p>Use the <code>bytesAvailable</code> property in conjunction with the
	 * read methods each time you access a ByteArray object to ensure that you
	 * are reading valid data.</p>]]></haxe_doc>
		</bytesAvailable>
		<new public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Creates a ByteArray instance representing a packed array of bytes, so that
	 * you can use the methods and properties in this class to optimize your data
	 * storage and stream.</haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The ByteArray class provides methods and properties to optimize reading,
 * writing, and working with binary data.
 *
 * <p><i>Note:</i> The ByteArray class is for advanced developers who need to
 * access data on the byte level.</p>
 *
 * <p>In-memory data is a packed array (the most compact representation for
 * the data type) of bytes, but an instance of the ByteArray class can be
 * manipulated with the standard <code>[]</code> (array access) operators. It
 * also can be read and written to as an in-memory file, using methods similar
 * to those in the URLStream and Socket classes.</p>
 *
 * <p>In addition, zlib compression and decompression are supported, as well
 * as Action Message Format (AMF) object serialization.</p>
 *
 * <p>Possible uses of the ByteArray class include the following:
 * <ul>
 *   <li>Creating a custom protocol to connect to a server.</li>
 *   <li>Writing your own URLEncoder/URLDecoder.</li>
 *   <li>Writing your own AMF/Remoting packet.</li>
 *   <li>Optimizing the size of your data by using data types.</li>
 *   <li>Working with binary data loaded from a file in Adobe<sup>®</sup>
 * AIR<sup>®</sup>.</li>
 * </ul>
 * </p>]]></haxe_doc>
	</class>
	<enum path="nme.utils.CompressionAlgorithm" params="" file="/Users/joshua/Development/Haxe/nme/nme/utils/CompressionAlgorithm.hx">
		<ZLIB><haxe_doc>* Defines the string to use for the zlib compression algorithm.</haxe_doc></ZLIB>
		<DEFLATE><haxe_doc>* Defines the string to use for the deflate compression algorithm.</haxe_doc></DEFLATE>
		<haxe_doc><![CDATA[* The CompressionAlgorithm class defines string constants for the names of
 * compress and uncompress options. These constants are used as values of the
 * <code>algorithm</code> parameter of the <code>ByteArray.compress()</code>
 * and <code>ByteArray.uncompress()</code> methods.]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<enum path="nme.utils.Endian" params="" file="/Users/joshua/Development/Haxe/nme/nme/utils/Endian.hx">
		<LITTLE_ENDIAN/>
		<BIG_ENDIAN/>
		<haxe_doc><![CDATA[* The Endian class contains values that denote the byte order used to
 * represent multibyte numbers. The byte order is either bigEndian (most
 * significant byte first) or littleEndian (least significant byte first).
 *
 * <p>Content in Flash Player or Adobe<sup>®</sup> AIR™ can interface with
 * a server by using the binary protocol of that server, directly. Some
 * servers use the bigEndian byte order and some servers use the littleEndian
 * byte order. Most servers on the Internet use the bigEndian byte order
 * because "network byte order" is bigEndian. The littleEndian byte order is
 * popular because the Intel x86 architecture uses it. Use the endian byte
 * order that matches the protocol of the server that is sending or receiving
 * data.</p>]]></haxe_doc>
		<meta><m n=":fakeEnum"><e>String</e></m></meta>
	</enum>
	<class path="nme.utils.Timer" params="" file="/Users/joshua/Development/Haxe/nme/nme/utils/Timer.hx" extern="1">
		<extends path="nme.events.EventDispatcher"/>
		<stop public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Stops the timer. When <code>start()</code> is called after
	 * <code>stop()</code>, the timer instance runs for the <i>remaining</i>
	 * number of repetitions, as set by the <code>repeatCount</code> property.
	 *]]></haxe_doc>
		</stop>
		<start public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc>* Starts the timer, if it is not already running.
	 *</haxe_doc>
		</start>
		<reset public="1" set="method">
			<f a=""><e path="Void"/></f>
			<haxe_doc><![CDATA[* Stops the timer, if it is running, and sets the <code>currentCount</code>
	 * property back to 0, like the reset button of a stopwatch. Then, when
	 * <code>start()</code> is called, the timer instance runs for the specified
	 * number of repetitions, as set by the <code>repeatCount</code> value.
	 *]]></haxe_doc>
		</reset>
		<running public="1" set="null">
			<e path="Bool"/>
			<haxe_doc><![CDATA[* The timer's current state; <code>true</code> if the timer is running,
	 * otherwise <code>false</code>.]]></haxe_doc>
		</running>
		<repeatCount public="1">
			<c path="Int"/>
			<haxe_doc><![CDATA[* The total number of times the timer is set to run. If the repeat count is
	 * set to 0, the timer continues forever or until the <code>stop()</code>
	 * method is invoked or the program stops. If the repeat count is nonzero,
	 * the timer runs the specified number of times. If <code>repeatCount</code>
	 * is set to a total that is the same or less then <code>currentCount</code>
	 * the timer stops and will not fire again.]]></haxe_doc>
		</repeatCount>
		<delay public="1">
			<c path="Float"/>
			<haxe_doc><![CDATA[* The delay, in milliseconds, between timer events. If you set the delay
	 * interval while the timer is running, the timer will restart at the same
	 * <code>repeatCount</code> iteration.
	 *
	 * <p><b>Note:</b> A <code>delay</code> lower than 20 milliseconds is not
	 * recommended. Timer frequency is limited to 60 frames per second, meaning a
	 * delay lower than 16.6 milliseconds causes runtime problems.</p>
	 * 
	 * @throws Error Throws an exception if the delay specified is negative or
	 *               not a finite number.]]></haxe_doc>
		</delay>
		<currentCount public="1" set="null">
			<c path="Int"/>
			<haxe_doc>* The total number of times the timer has fired since it started at zero. If
	 * the timer has been reset, only the fires since the reset are counted.</haxe_doc>
		</currentCount>
		<new public="1" set="method">
			<f a="delay:?repeatCount">
				<c path="Float"/>
				<c path="Int"/>
				<e path="Void"/>
			</f>
			<haxe_doc><![CDATA[* Constructs a new Timer object with the specified <code>delay</code> and
	 * <code>repeatCount</code> states.
	 *
	 * <p>The timer does not start automatically; you must call the
	 * <code>start()</code> method to start it.</p>
	 * 
	 * @param delay       The delay between timer events, in milliseconds. A
	 *                    <code>delay</code> lower than 20 milliseconds is not
	 *                    recommended. Timer frequency is limited to 60 frames
	 *                    per second, meaning a delay lower than 16.6
	 *                    milliseconds causes runtime problems.
	 * @param repeatCount Specifies the number of repetitions. If zero, the timer
	 *                    repeats infinitely. If nonzero, the timer runs the
	 *                    specified number of times and then stops.
	 * @throws Error if the delay specified is negative or not a finite number]]></haxe_doc>
		</new>
		<haxe_doc><![CDATA[* The Timer class is the interface to timers, which let you run code on a
 * specified time sequence. Use the <code>start()</code> method to start a
 * timer. Add an event listener for the <code>timer</code> event to set up
 * code to be run on the timer interval.
 *
 * <p>You can create Timer objects to run once or repeat at specified
 * intervals to execute code on a schedule. Depending on the SWF file's
 * framerate or the runtime environment (available memory and other factors),
 * the runtime may dispatch events at slightly offset intervals. For example,
 * if a SWF file is set to play at 10 frames per second (fps), which is 100
 * millisecond intervals, but your timer is set to fire an event at 80
 * milliseconds, the event will be dispatched close to the 100 millisecond
 * interval. Memory-intensive scripts may also offset the events.</p>
 * 
 * @event timer         Dispatched whenever a Timer object reaches an interval
 *                      specified according to the <code>Timer.delay</code>
 *                      property.
 * @event timerComplete Dispatched whenever it has completed the number of
 *                      requests set by <code>Timer.repeatCount</code>.]]></haxe_doc>
	</class>
	<class path="nme.utils.WeakRef" params="T" file="/Users/joshua/Development/Haxe/nme/nme/utils/WeakRef.hx" extern="1">
		<toString public="1" set="method"><f a=""><c path="String"/></f></toString>
		<get public="1" set="method"><f a=""><c path="nme.utils.WeakRef.T"/></f></get>
		<new public="1" set="method"><f a="inObject:?inMakeWeak">
	<c path="nme.utils.WeakRef.T"/>
	<e path="Bool"/>
	<e path="Void"/>
</f></new>
	</class>
</haxe>