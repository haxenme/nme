<xml>

   <set name="ios" value="1" if="iphone" />
   <set name="tvos" value="1" if="appletv" />
   <set name="mac" value="1" if="macos" />
   <set name="native_toolkit_sdl_static" value="1" if="static_link" />
   <set name="HXCPP_CPP11" value="1" />

   <set name="exe_link" value="1" if="HXCPP_JS_PRIME" />
   <!--<set name="HXCPP_LINK_MEM_FILE" value="1" if="HXCPP_JS_PRIME" />-->
   <set name="HXCPP_LINK_TOTAL_MEMORY" value="268435456" if="HXCPP_JS_PRIME||emscripten" />

   <set name="winrpi" value="1" if="windows_host rpi" />

   <set name="linux" value="1" if="gcw0" />
   <set name="linux" value="1" if="winrpi" />
   <unset name="windows" if="winrpi" />
   <unset name="windows" if="gcw0" />
   <set name="xcompile" value="1" if="winrpi" />
   <set name="xcompile" value="1" if="gcw0" />
   <set name="rpi" value="1" if="winrpi" />
   <set name="sdl_rpi" value="1" if="winrpi" />

   <set name="NME_METAL" value="1" if="nme_metal" />
   <set name="NME_METAL" value="1" if="mac" unless="nme_no_metal" />
   <set name="NME_NO_OGL" value="1" if="nme_no_ogl" />
   <set name="NME_NO_OGL" value="1" if="nme_metal" unless="mac" />
   <set name="NME_ANGLE" value="1" if="windows||winrt" unless="NME_NO_ANGLE || NME_LOCAL_TOOLKIT" />
   <set name="NME_DYNAMIC_ANGLE" value="1" if="NME_LOCAL_TOOLKIT" unless="NME_NO_ANGLE" />
   <set name="NATIVE_TOOLKIT_SDL_ANGLE" value="1" if="NME_ANGLE" />
   <set name="NATIVE_TOOLKIT_STATIC_ANGLE" value="1" if="NME_ANGLE" />
   <set name="OBJC_ARC" value="1" if="NME_SDL3" />

   <set name="NME_LOCAL_TOOLKIT" value="1" if="android" />

   <include name="${HXCPP}/build-tool/BuildCommon.xml"/>
   <!-- 
      Build with:
         -Diphonesim              -> build i386 version
         -Diphoneos               -> build armv6
         -Diphoneos -DHXCPP_ARMV7 -> build armv7
         -Dandroid  -DHXCPP_ARMV5 -> build android armv7
         -Dandroid                -> build android armv7
         -Dandroid  -DHXCPP_X86   -> build android x86
         - no defines             -> build current OS
         -DHXCPP_M64              -> build current OS, 64 but version
         -Ddebug                  -> Used in combination with above for debug
   -->

   <section if="HXCPP_ARM64" unless="NME_SIMD_D">
     <set name="NME_SIMD_D" value="-DNME_SIMD_ARM64" />
     <set name="NME_SIMD_ARM64" value="1" />
   </section>
   <section if="HXCPP_ARM7" unless="NME_SIMD_D">
     <set name="NME_SIMD_D" value="-DNME_SIMD_ARM7" />
     <set name="NME_SIMD_ARM7" value="1" />
   </section>
   <section if="HXCPP_M64" unless="NME_SIMD_D">
     <set name="NME_SIMD_D" value="-DNME_SIMD_X86_64" />
     <set name="NME_SIMD_X86_64" value="1" />
   </section>
   <section if="HXCPP_M32 windows" unless="NME_SIMD_D">
     <set name="NME_SIMD_D" value="-DNME_SIMD_X86" />
     <set name="NME_SIMD_X86" value="1" />
   </section>


   <!--
      What SDL to use?
      For desktop, use version 2.
      For ios/android, not needed. 
      For old rpi, and other systems, use installed 1.0
   -->
   <set name="NME_NATIVE_SDL_SYSTEM" value="1" if="rpi" unless="sdl_rpi" />
   <set name="NME_NATIVE_SDL_SYSTEM" value="1" if="emscripten" />
   <set name="NME_NATIVE_SDL_SYSTEM" value="1" if="gcw0" />
   <set name="NME_SDL2" value="1" if="windows" />
   <set name="NME_SDL2" value="1" if="linux" unless="NME_NATIVE_SDL_SYSTEM" />
   <set name="NME_SDL2" value="1" if="macos" />
   <set name="NME_SDL2" value="1" if="winrpi" />
   <set name="NME_SDL2" value="1" if="gcw0" />
   <set name="NME_SDL3" value="1" if="NME_LOCAL_TOOLKIT" />
   <set name="SYSTEM_FREETYPE" value="1" if="gcw0" />

   <set name="NME_SDL_ANY" value="1" if="NME_NATIVE_SDL_SYSTEM" />
   <set name="NME_SDL_ANY" value="1" if="NME_SDL2" />
   <set name="NME_MIXER" value="1" if="NME_SDL_ANY" unless="NME_NO_AUDIO" />

   <!-- Use opengl backend ? -->
   <set name="NME_NO_OGL" if="winrt" unless="NME_ANGLE || NME_DYNAMIC_ANGLE" />
   <set name="NME_OGL" value="1" unless="NME_NO_OGL" />
   <set name="NATIVE_TOOLKIT_METAL" value="1" if="NME_METAL" />

   <!-- For systems that do not create the egl context for us -->
   <set name="NME_EGL" value="1" if="rpi" unless="sdl_rpi" />

   <!-- Do we need to implement curl in NME -->
   <set name="NME_CURL" value="1" />
   <unset name="NME_CURL" if="emscripten||winrt||gcw0||NME_LOCAL_TOOLKIT" />

   <!-- And allow https ? -->
   <set name="NME_SSL" value="1" />
   <set name="NME_SSL_EXTRA" value="_ssl" if="NME_SSL"/>
   <set name="NATIVE_TOOLKIT_CURL_SSL" value="1" if="NME_SSL" />
   
   <!--<setenv name="MACOSX_DEPLOYMENT_TARGET" value="10.12" if="NME_SDL3" />-->
   <!--
      What audio backend it use?
      For windows, linux, use SDL_mixer
      For ios/mac  use core audio + openal
      For android use java (todo - opensl?)
   -->
   <set name="NME_OPENAL" value="1" if="iphone" />

   <!-- Use to allow testing on mac... -->
   <set name="NME_OPENAL" value="1" if="macos" />

   <set name="NME_OPENAL" value="1" if="emscripten" />

   <set name="NME_CAMERA" value="1" unless="emscripten||winrt" />

   <!-- Built relative to "bin" -->
   <set name="NME_ROOT" value="" />
   
   <set name="SRC_DIR" value="${NME_ROOT}src" />
   <set name="INC_DIR" value="${NME_ROOT}include" />
   <set name="NME_INC_DIR" value="${NME_ROOT}../include" />
   <set name="SUP_DIR" value="${NME_ROOT}support" />
   <set name="SUP_DIR" value="${this_dir}/support" if="this_dir" />
   <set name="OUT_DIR" value="../${NDLLDIR}" />

   <set name="modplug" value="1" unless="android||emscripten" />
   
   <!-- <set name="new_link" value="1" /> -->
 
   <set name="HXCPP_OPTIM_LEVEL" value="-O2" if="emscripten" unless="debug" />
   <!--<set name="HXCPP_DEBUG_LINK" value="1" />-->


   <section if="NME_LOCAL_TOOLKIT">
      <include name="${HXCPP}/src/hx/libs/zlib/Build.xml" />
      <set name="NME_ZLIB" value="${ZLIB_DIR}" />

      <include name="toolkit/png/files.xml" />
      <include name="toolkit/jpeg/files.xml" />
      <include name="toolkit/ogg/files.xml" />
      <include name="toolkit/vorbis/files.xml" />
      <include name="toolkit/freetype/files.xml" />
      <include name="toolkit/sdl/files.xml" />
      <include name="toolkit/modplug/files.xml" if="modplug" />
      <include name="toolkit/sdl-mixer/files.xml" if="NME_MIXER" />
   </section>


   <!-- Where to find static libraries/includes -->
   <set name="NATIVE_TOOLKIT_PATH" value="${haxelib:nme-toolkit}" unless="NATIVE_TOOLKIT_PATH" />

   <section unless="NME_LOCAL_TOOLKIT">
      <set name="NME_ZLIB" value="${NATIVE_TOOLKIT_PATH}/zlib/" />
      <include name="${NME_ZLIB}/files.xml" />
      <set name="NME_PNG" value="${NATIVE_TOOLKIT_PATH}/png/" />
      <include name="${NME_PNG}/files.xml" />
      <set name="NME_JPEG" value="${NATIVE_TOOLKIT_PATH}/jpeg/" />
      <include name="${NME_JPEG}/files.xml" />
      <set name="NME_OGG" value="${NATIVE_TOOLKIT_PATH}/ogg/" />
      <include name="${NME_OGG}/files.xml" />
      <set name="NME_VORBIS" value="${NATIVE_TOOLKIT_PATH}/vorbis/" />
      <include name="${NME_VORBIS}/files.xml" />
      <set name="NME_FREETYPE" value="${NATIVE_TOOLKIT_PATH}/freetype/" />
      <include name="${NME_FREETYPE}files.xml" />
      <set name="NME_LIBSDL" value="${NATIVE_TOOLKIT_PATH}/sdl/" />
      <include name="${NME_LIBSDL}files.xml" />
      <set name="NME_MODPLUG" value="${NATIVE_TOOLKIT_PATH}/modplug/" />
      <include name="${NME_MODPLUG}/files.xml" if="modplug" />
      <set name="NME_LIBSDL_MIXER" value="${NATIVE_TOOLKIT_PATH}/sdl-mixer/" />
      <include name="${NME_LIBSDL_MIXER}files.xml" if="NME_MIXER" />

      <include name="${NATIVE_TOOLKIT_PATH}/curl/files.xml" if="NME_CURL" />
   </section>


   <include name="${NATIVE_TOOLKIT_PATH}/angle/files.xml" if="NME_ANGLE" unless="ANGLE_DIR" />
   <include name="${ANGLE_DIR}/files.xml" if="NME_ANGLE ANGLE_DIR" />

   <!-- inject flags to allow cross-compiling -->
   <files id="native-toolkit-sdl" if="xcompile" >
      <compilerflag value="-I${haxelib:winrpi}/include" if="winrpi" />
      <compilerflag value="-I${this_dir}/include/xcompile" />
      <compilerflag value="-DPATH_MAX=1024" />
      <compilerflag value="-DNAME_MAX=256" />
   </files>

   <!-- inject flags for missing mingw headers -->
   <files id="native-toolkit-sdl" if="mingw" >
      <compilerflag value="-I${this_dir}/include/mingw" />
   </files>

   <files id="main">
      <compilerflag value="-I${INC_DIR}"/>
      <file name="Test.cpp"/>
   </files>

   <set name="NMEP"  value="${this_dir}" />

   <files id="nme-headers">
      <depend name="${NMEP}/include/ByteArray.h" />
      <depend name="${NMEP}/include/CachedExtent.h" />
      <depend name="${NMEP}/include/Camera.h" />
      <depend name="${NMEP}/include/Display.h" />
      <depend name="${NMEP}/include/Filters.h" />
      <depend name="${NMEP}/include/Font.h" />
      <depend name="${NMEP}/include/Geom.h" />
      <depend name="${NMEP}/include/Graphics.h" />
      <depend name="${NMEP}/include/Hardware.h" />
      <depend name="${NMEP}/include/Input.h" />
      <depend name="${NMEP}/include/KeyCodes.h" />
      <depend name="${NMEP}/include/Lzma.h" />
      <depend name="${NMEP}/include/Matrix.h" />
      <depend name="${NMEP}/include/NMEThread.h" />
      <depend name="${NMEP}/include/NmeBinVersion.h" />
      <depend name="${NMEP}/include/NmeVersion.h" />
      <depend name="${NMEP}/include/S3DEye.h" />
      <depend name="${NMEP}/include/Scale9.h" />
      <depend name="${NMEP}/include/Sound.h" />
      <depend name="${NMEP}/include/StageVideo.h" />
      <depend name="${NMEP}/include/Surface.h" />
      <depend name="${NMEP}/include/TextField.h" />
      <depend name="${NMEP}/include/Tilesheet.h" />
      <depend name="${NMEP}/include/URL.h" />
      <depend name="${NMEP}/include/Utils.h" />
      <depend name="${NMEP}/include/Video.h" />

      <depend name="${NMEP}/src/software-renderer/BitmapFill.h" />
      <depend name="${NMEP}/src/software-renderer/AlphaMask.h" />
      <depend name="${NMEP}/src/software-renderer/Render.h" />
      <depend name="${NMEP}/src/software-renderer/PolygonRender.h" />

      <depend name="${NMEP}/../include/nme/Event.h" />
      <depend name="${NMEP}/../include/nme/Extent.h" />
      <depend name="${NMEP}/../include/nme/FixedPoint.h" />
      <depend name="${NMEP}/../include/nme/ImageBuffer.h" />
      <depend name="${NMEP}/../include/nme/NmeApi.h" />
      <depend name="${NMEP}/../include/nme/NmeCffi.h" />
      <depend name="${NMEP}/../include/nme/Object.h" />
      <depend name="${NMEP}/../include/nme/ObjectStream.h" />
      <depend name="${NMEP}/../include/nme/Pixel.h" />
      <depend name="${NMEP}/../include/nme/Point.h" />
      <depend name="${NMEP}/../include/nme/QuickVec.h" />
      <depend name="${NMEP}/../include/nme/Rect.h" />
      <depend name="${NMEP}/../include/nme/Texture.h" />
      <depend name="${NMEP}/../include/nme/NmeJsPrime.h" />

      <depend name="${HXCPP}/include/hx/CFFI.h"/>
      <depend name="${HXCPP}/include/hx/CFFIAPI.h"/>
      <depend name="${HXCPP}/include/hx/CFFILoader.h"/>

   </files>
   
   
   <files id="nme">
      <compilerflag value="-I${NME_INC_DIR}"/>
      <compilerflag value="-I${INC_DIR}"/>

      <compilerflag value="-DNME_MODPLUG" if="modplug" />
      <compilerflag value="-DSTATIC_LINK" if="NME_STATIC_LINK" />
      <compilerflag value="-DNME_INTERNAL_CLIPPING" if="NME_INTERNAL_CLIPPING" />
      <compilerflag value="-DNME_CLIPPER" if="NME_CLIPPER" />
      <compilerflag value="-DNME_POLY2TRI" if="NME_POLY2TRI" />
      <compilerflag value="-DNME_WORKER_THREADS" if="NME_WORKER_THREADS" />
      <compilerflag value="-DNME_ANGLE" if="NME_ANGLE" />
      <compilerflag value="-DNME_DYNAMIC_ANGLE" if="NME_DYNAMIC_ANGLE" />
      <compilerflag value="-DNME_OGL" if="NME_OGL" />
      <compilerflag value="-DNME_METAL" if="NME_METAL" />
      <compilerflag value="-DNME_AUDIO" unless="NME_NO_AUDIO" />
      <compilerflag value="-DNME_SIMD_D" if="NME_SIMD_D" />
      <compilerflag value="${NME_SIMD_D}" if="NME_SIMD_D" />
      <compilerflag value="-I${ANGLE_DIR}/include" if="NME_ANGLE" />


      <cache value="1" unless="winrpi" />
      <cache value="1" asLibrary="true" if="winrpi NME_STATIC_LINK" />

      <tag value="${NATIVE_TOOLKIT_OPTIM_TAG}" if="NATIVE_TOOLKIT_OPTIM_TAG" />

      <depend files="nme-headers"/>
      <depend files="hxcpp-depends"/>
      <depend name="${SRC_DIR}/opengl/OGL.h" if="NME_OGL" />
      <depend name="${SRC_DIR}/opengl/OGLExtensions.h" if="NME_OGL" />

      <section if="windows">
         <file name="${SRC_DIR}/windows/CaptureDevice.cpp" if="NME_CAMERA" />
         <file name="${SRC_DIR}/windows/GDIFont.cpp" unless="winrt"/>
         <file name="${SRC_DIR}/windows/System.cpp"/>
         <file name="${SRC_DIR}/audio/WindowsAcm.cpp" unless="mingw || winrt" />
         <compilerflag value="-DNME_NO_WINACM" if="mingw" />
         <compilerflag value="-DNME_NO_WINACM" if="winrt" />
      </section>

      <section if="linux">
         <compilerflag value="-Wno-conversion" if="linux"/>
         <file name="${SRC_DIR}/linux/V4L.cpp" if="NME_CAMERA" />
         <file name="${SRC_DIR}/linux/NativeFont.cpp"/>
         <file name="${SRC_DIR}/linux/System.cpp"/>
      </section>

      <section if="macos">
         <file name="${SRC_DIR}/apple/CaptureDevice.mm" if="NME_CAMERA" />
         <file name="${SRC_DIR}/mac/NSFont.cpp"/>
         <file name="${SRC_DIR}/mac/MacBoot.m" />
         <file name="${SRC_DIR}/mac/System.mm"/>
         <file name="${SRC_DIR}/audio/AvAudio.mm" />
         <file name="${SRC_DIR}/cocoa/FileManager.mm"/>
      </section>

      <section if="iphone">
         <file name="${SRC_DIR}/apple/CaptureDevice.mm" if="NME_CAMERA" />
         <!--<file name="${SRC_DIR}/iPhone/UIStageView.mm"/>-->
         <file name="${SRC_DIR}/iPhone/UIDeviceHardware.mm"/>
         <!-- <file name="${SRC_DIR}/iPhone/SurfaceIO.mm"/> -->
         <file name="${SRC_DIR}/iPhone/NativeFont.mm"/>
         <file name="${SRC_DIR}/iPhone/System.mm"/>
         <file name="${SRC_DIR}/apple/Utils.mm"/>
         <file name="${SRC_DIR}/cocoa/FileManager.mm"/>
         <file name="${SRC_DIR}/audio/IosSound.mm" unless="NME_NO_AUDIO"/>
      </section>

      <section if="android">
         <file name="${SRC_DIR}/android/AndroidCommon.cpp" />
         <file name="${SRC_DIR}/audio/AndroidSound.cpp" />
         <file name="${SRC_DIR}/android/AndroidFont.cpp"/>
         <file name="${SRC_DIR}/android/AndroidFrame.cpp"/>
         <file name="${SRC_DIR}/android/JNI.cpp"/>
         <file name="${SRC_DIR}/android/System.cpp"/>
         <file name="${SRC_DIR}/android/AndroidS3D.cpp" if="NME_S3D" />
         <file name="${SRC_DIR}/audio/OpenSlSound.cpp" unless="NME_NO_AUDIO" />

      </section>

      <section if="emscripten">
         <compilerflag value="-sUSE_SDL=1"/>
         <file name="${SRC_DIR}/emscripten/System.cpp" />
         <file name="${SRC_DIR}/emscripten/JsPrime.cpp" if="HXCPP_JS_PRIME" />

         <file name="${SRC_DIR}/emscripten/_sans.cpp" />
         <file name="${SRC_DIR}/emscripten/_serif.cpp" />
         <file name="${SRC_DIR}/emscripten/_monospace.cpp" />
      </section>

      <section if="rpi" unless="winrpi" >
         <compilerflag value="-I/opt/vc/include" />
         <compilerflag value="-I/opt/vc/include/interface/vcos/pthreads/" />
      </section>

      <section if="rpi" >
          <file name="${SRC_DIR}/linux/RpiMMal.cpp"/>
      </section>

      <compilerflag value="-I${this_dir}/toolkit" if="NME_LOCAL_TOOLKIT" />
      <compilerflag value="-DNME_SDL3" if="NME_SDL3" />
      <compilerflag value="-I${NME_ZLIB}"/>
      <compilerflag value="-I${NME_PNG}"/>
      <compilerflag value="-I${NME_PNG}.." if="NME_LOCAL_TOOLKIT" />
      <compilerflag value="-I${NME_JPEG}"/>
      <compilerflag value="-I${NME_JPEG}.." if="NME_LOCAL_TOOLKIT" />
      <compilerflag value="-I${NME_VORBIS}include"/>
      <compilerflag value="-I${NME_OGG}include"/>

      <compilerflag value="-I${NME_FREETYPE}"/>
      <compilerflag value="-I${NME_FREETYPE}include"/>
      <compilerflag value="-I${NME_FREETYPE}freetype/include"/>
      <compilerflag value="-I${NME_FREETYPE}freetype/include/freetype"/>
      <compilerflag value="-I${NME_FREETYPE}include/freetype"/>

      <compilerflag value="-I${NME_MODPLUG}" if="modplug" />
      <compilerflag value="-I${NATIVE_TOOLKIT_PATH}/curl/include" if="NME_CURL" />

      <depend files="native-toolkit-freetype-depends" />
      <depend files="native-toolkit-jpeg-depends" />
      <depend files="native-toolkit-png-depends" />
      <depend files="native-toolkit-vorbis-depends" />
      <depend files="native-toolkit-ogg-depends" />
      <depend files="native-toolkit-modplug-depends" if="modplug" />
      <depend files="native-toolkit-curl-depends" if="NME_CURL" />

      <section if="NME_NATIVE_SDL_SYSTEM" unless="NME_SDL2" >
        <compilerflag value="-I/opt/local/include" if="macos" />
        <compilerflag value="-I/usr/include/SDL" if="linux" />
        <compilerflag value="-DDYNAMIC_SDL" />
        <compilerflag value="-DNME_MIXER" if="NME_MIXER" />
        <file name="${SRC_DIR}/audio/SDLSound.cpp" if="NME_MIXER" />
        <file name="${SRC_DIR}/sdl/SDLStage.cpp"/>
      </section>

      <section if="NME_SDL2">
        <file name="${SRC_DIR}/audio/SDLSound.cpp"  if="NME_MIXER"/>
        <file name="${SRC_DIR}/sdl2/SDL2Stage.cpp"/>
        <section unless="NME_NATIVE_SDL_SYSTEM" >
           <compilerflag value="-I${SDL_CONFIG_PATH}" if="SDL_CONFIG_PATH" />
           <compilerflag value="-I${NME_LIBSDL}include/SDL3" if="NME_SDL3" />
           <compilerflag value="-I${NME_LIBSDL}include" inless="NME_SDL3" />
           <compilerflag value="-I${NME_LIBSDL_MIXER}" if="NME_MIXER" />
           <compilerflag value="-I${NME_LIBSDL_MIXER}/include/SDL3_mixer" if="NME_MIXER NME_SDL3" />
           <compilerflag value="-I${NME_LIBSDL_MIXER}/include" if="NME_MIXER" unless="NME_SDL3" />
        </section>
        <section if="gcw0" >
           <compilerflag value="-I${GCW0_SDK}/usr/mipsel-gcw0-linux-uclibc/sysroot/usr/include/SDL2" />
        </section>
        <compilerflag value="-DSDL_OGL" if="NME_OGL"/>
        <compilerflag value="-DNME_MIXER" if="NME_MIXER" />
        <compilerflag value="-DNME_SDL2" />
        <depend files="native-toolkit-sdl-depends" />
        <depend files="native-toolkit-sdl-mixer-depends" if="NME_MIXER"/>
      </section>

      <compilerflag value="-DNME_CURL" if="NME_CURL"/>
      <section if="NME_CURL">
         <compilerflag value="-DNME_CURL_SSL" if="NME_SSL"/>
      </section>

      <section if="NME_OGL">
         <file name="${SRC_DIR}/opengl/OpenGLContext.cpp" />
         <file name="${SRC_DIR}/opengl/OGLTexture.cpp" />
         <file name="${SRC_DIR}/opengl/OGLShaders.cpp" />
         <file name="${SRC_DIR}/opengl/OGLExport.cpp" />
         <file name="${SRC_DIR}/opengl/Egl.cpp" if="NME_EGL" />
         <file name="${SRC_DIR}/opengl/OpenGLS3D.cpp" if="NME_S3D" />
      </section>

      <section if="NME_METAL">
         <file name="${SRC_DIR}/metal/MetalContext.mm" />
      </section>

      <section if="NME_OPENAL">
         <file name="${SRC_DIR}/audio/OpenALSound.cpp" unless="NME_NO_AUDIO" />
         <compilerflag value="-DNME_OPENAL" />
      </section>



      <compilerflag value="-I${haxelib:winrpi}/include" if="winrpi" />
      <compilerflag value="-Iinclude/xcompile" if="xcompile" />
      <compilerflag value="-D_7ZIP_ST" unless="windows"/>
      <compilerflag value="-DNME_NOPREMULTIPLIED_ALPHA" if="NME_NOPREMULTIPLIED_ALPHA" />
      <compilerflag value="-DNME_BUILDING_LIB" />
      <compilerflag value="-DNME_TOOLKIT_BUILD" />



      <file name="${SRC_DIR}/common/Surface.cpp"/>
      <file name="${SRC_DIR}/common/SurfaceBlit.cpp"/>
      <file name="${SRC_DIR}/common/Utils.cpp"/>
      <file name="${SRC_DIR}/common/Geom.cpp"/>
      <file name="${SRC_DIR}/common/Graphics.cpp"/>
      <file name="${SRC_DIR}/common/GraphicsData.cpp"/>
      <file name="${SRC_DIR}/common/Matrix.cpp"/>
      <file name="${SRC_DIR}/common/CachedExtent.cpp"/>
      <file name="${SRC_DIR}/common/Pixels.cpp"/>
      <file name="${SRC_DIR}/common/TextField.cpp"/>
      <file name="${SRC_DIR}/common/Font.cpp"/>
      <file name="${SRC_DIR}/common/FreeType.cpp" />
      <file name="${SRC_DIR}/common/Tilesheet.cpp"/>
      <file name="${SRC_DIR}/common/Display.cpp"/>
      <file name="${SRC_DIR}/common/Stage.cpp"/>
      <file name="${SRC_DIR}/common/BitmapCache.cpp"/>
      <file name="${SRC_DIR}/common/ColorTransform.cpp"/>
      <file name="${SRC_DIR}/common/Hardware.cpp" />
      <file name="${SRC_DIR}/common/Tessellate.cpp"/>
      <file name="${SRC_DIR}/common/Filters.cpp"/>
      <file name="${SRC_DIR}/common/ExternalInterface.cpp"/>
      <file name="${SRC_DIR}/common/Cursors.cpp"/>
      <file name="${SRC_DIR}/common/Input.cpp" unless="iphone" />
      <file name="${SRC_DIR}/common/SurfaceIO.cpp" unless="sdl_image" />
      <file name="${SRC_DIR}/common/ManagedStage.cpp" unless="winrt" />
      <file name="${SRC_DIR}/common/CURL.cpp" if="NME_CURL"/>
      <file name="${SRC_DIR}/common/Thread.cpp"/>
      <file name="${SRC_DIR}/common/Camera.cpp" if="NME_CAMERA" />
      <file name="${SRC_DIR}/common/ObjectStream.cpp" />

      <file name="${SRC_DIR}/audio/Audio.cpp" />
      <file name="${SRC_DIR}/audio/ChannelList.cpp" />
      <file name="${SRC_DIR}/audio/Sound.cpp" unless="NME_NO_AUDIO" />
      
      <file name="${SRC_DIR}/common/XML/tinystr.cpp"/>
      <file name="${SRC_DIR}/common/XML/tinyxml.cpp"/>
      <file name="${SRC_DIR}/common/XML/tinyxmlerror.cpp"/>
      <file name="${SRC_DIR}/common/XML/tinyxmlparser.cpp"/>
      
      <file name="${SRC_DIR}/software-renderer/AlphaMask.cpp"/>
      <file name="${SRC_DIR}/software-renderer/BitmapFill.cpp"/>
      <file name="${SRC_DIR}/software-renderer/BitmapFillPerspective.cpp"/>
      <file name="${SRC_DIR}/software-renderer/GradientFill.cpp"/>
      <file name="${SRC_DIR}/software-renderer/LineRender.cpp"/>
      <file name="${SRC_DIR}/software-renderer/PointRenderer.cpp"/>
      <file name="${SRC_DIR}/software-renderer/PolygonRender.cpp"/>
      <file name="${SRC_DIR}/software-renderer/SoftwareRenderer.cpp"/>
      <file name="${SRC_DIR}/software-renderer/SolidFill.cpp"/>
      <file name="${SRC_DIR}/software-renderer/SolidRender.cpp"/>
      <file name="${SRC_DIR}/software-renderer/TileRenderer.cpp"/>
      <file name="${SRC_DIR}/software-renderer/TriangleRender.cpp"/>
     
      <file name="${SRC_DIR}/common/poly2tri/Poly2Tri.cpp" if="NME_POLY2TRI" />
      <file name="${SRC_DIR}/common/clipper/clipper.cpp" if="NME_CLIPPER" />
      <file name="${SRC_DIR}/common/NmeClip.cpp" if="NME_INTERNAL_CLIPPING" />

      <!--<file name="${SRC_DIR}/rpi/RPi.cpp" if="winrpi" />-->

   
      <section unless="HXCPP_JS_PRIME||winrt" >
         <file name="${SRC_DIR}/common/Lzma.cpp"/>
         <file name="${SRC_DIR}/lzma/LzFind.c" />
         <file name="${SRC_DIR}/lzma/LzmaDec.c" />
         <file name="${SRC_DIR}/lzma/LzmaEnc.c" />
         <file name="${SRC_DIR}/lzma/LzFindMt.c" if="windows" />
         <file name="${SRC_DIR}/lzma/Threads.c" if="windows" />
      </section>
   </files>

   <!-- This section has access to both NME and haxe code -->
   <files id="nme-haxe" tags="haxe" dir="${HXCPP_BUILD_DIR}" >
      <compilerflag value="-I${NMEP}/include"/>
      <compilerflag value="-I${NMEP}/../include"/>

      <compilerflag value="-DNME_MODPLUG" if="modplug" />
      <compilerflag value="-DSTATIC_LINK" if="NME_STATIC_LINK" />
      <compilerflag value="-DNME_INTERNAL_CLIPPING" if="NME_INTERNAL_CLIPPING" />
      <compilerflag value="-DNME_CLIPPER" if="NME_CLIPPER" />
      <compilerflag value="-DNME_POLY2TRI" if="NME_POLY2TRI" />
      <compilerflag value="-DNME_WORKER_THREADS" if="NME_WORKER_THREADS" />
      <compilerflag value="-DNME_ANGLE" if="NME_ANGLE" />
      <compilerflag value="-DNME_DYNAMIC_ANGLE" if="NME_DYNAMIC_ANGLE" />
      <compilerflag value="-I${ANGLE_DIR}/include" if="NME_ANGLE" />

      <cache value="1" />

      <tag value="${NATIVE_TOOLKIT_OPTIM_TAG}" if="NATIVE_TOOLKIT_OPTIM_TAG" />

      <depend files="nme-headers"/>
      <depend files="hxcpp-depends"/>
      <depend name="${NMEP}/${SRC_DIR}/opengl/OGL.h" if="NME_OGL" />
      <depend name="${NMEP}/${SRC_DIR}/opengl/OGLExtensions.h" if="NME_OGL" />

      <section if="iphone" >
         <!-- file will be copied by the template system -->
         <file name="src/UIStageView.mm"/>
      </section>
   </files>

   <target id='haxe'>
     <files id='nme-haxe'/>
   </target>

   <set name="target-id" value="NDLL" unless="NME_STATIC_LINK" />
   <set name="target-id" value="nme-target" if="NME_STATIC_LINK" />
   <set name="target-id" value="exe" if="HXCPP_JS_PRIME" />

   <set name="NME_SUFFIX" value="${HX_TARGET_SUFFIX}" if="HX_TARGET_SUFFIX" />
   <set name="NME_SUFFIX" value="${LIBSUFFIX}" unless="HX_TARGET_SUFFIX" />
   <set name="NME_SUFFIX" value="" if="macos" />

   <set name="HXCPP_LINK_NO_ZLIB" value="1" unless="NME_LOCAL_TOOLKIT" />

   <target id="${target-id}" output="${LIBPREFIX}nme${NME_SUFFIX}" tool="linker" toolid="${STD_MODULE_LINK}">
      <outdir name="${OUT_DIR}/${BINDIR}" />

      <flag value="-NODEFAULTLIB:LIBCMT" if="winrt"/>

      <files id="nme"/>

      <files id="native-toolkit-freetype" unless="SYSTEM_FREETYPE" />

      <section if="NME_SDL2">
         <lib name="-luuid" if="mingw" unless="static_link" />
      </section>

      <section unless="NME_NATIVE_SDL_SYSTEM">
         <section if="NME_SDL_ANY" >
            <files id="native-toolkit-sdl-mixer" if="NME_MIXER" />
            <files id="native-toolkit-sdl"   />
         </section>
      </section>
      
         <files id="native-toolkit-modplug" if="modplug" />
         <files id="native-toolkit-ogg"   />
         <files id="native-toolkit-vorbis" />
         <section unless="NME_LOCAL_TOOLKIT" >
            <files id="native-toolkit-jpeg" />
         </section>
         <section if="NME_LOCAL_TOOLKIT" >
            <files id="native-toolkit-jpeg-8" />
            <files id="native-toolkit-jpeg-12" />
            <files id="native-toolkit-jpeg-16" />
            <files id="native-toolkit-jpeg-asm" if="NME_SIMD_D" />
         </section>
         <files id="native-toolkit-png" />
         <files id="native-toolkit-zlib" unless="NME_LOCAL_TOOLKIT"  />
         <files id="hxcpp_zlib" if="NME_LOCAL_TOOLKIT"  />
         <files id="native-toolkit-angle" if="NME_ANGLE" />
         <section if="NME_CURL">
            <files id="native-toolkit-curl" />
         </section>

      <section unless="static_link">
         <ext value=".so" />
         <ext value=".ndll" if="windows || mac || linux" unless="winrt"/>
         <ext value=".js" if="HXCPP_JS_PRIME" />
         <ext value=".wasm" if="HXCPP_JS_PRIME WASM" />
         <ext value=".dll" if="winrt" />


         <section if="NME_NATIVE_SDL_SYSTEM" >
            <section unless="NME_SDL2" >
               <lib name="-lSDL" />
            </section>
            <section if="NME_SDL2" >
               <lib name="-lSDL2" />
               <lib name="-lSDL2_Mixer" />
               <lib name="-lEGL" />
               <lib name="-lGLESv2" />
               <lib name="-lfreetype" if="SYSTEM_FREETYPE" />
            </section>
         </section>
            <!--<lib name="-lcurl" />
            <lib name="-lpng" />
            <lib name="-ljpeg" />
            <lib name="-lfreetype" />
            <lib name="-lz" /> -->


         <section if="macos">
            <vflag name="-framework" value="IOKit" />
            <vflag name="-framework" value="Foundation" />
            <vflag name="-framework" value="CoreAudio" />
            <vflag name="-framework" value="Carbon" />
            <vflag name="-framework" value="AudioToolbox" />
            <vflag name="-framework" value="AudioUnit" />
            <vflag name="-framework" value="ForceFeedback" />
            <vflag name="-framework" value="Cocoa" />
            <vflag name="-framework" value="OpenGL" if="NME_OGL" />
            <vflag name="-framework" value="AppKit" />
            <vflag name="-framework" value="OpenAL"/>
            <vflag name="-framework" value="GameController" if="NME_SDL3" />
            <vflag name="-framework" value="CoreHaptics" if="NME_SDL3" />
            <vflag name="-framework" value="UniformTypeIdentifiers" if="NME_SDL3" />
            <vflag name="-framework" value="AVFoundation" if="NME_CAMERA"/>
            <vflag name="-framework" value="CoreMedia" if="NME_CAMERA"/>
            <vflag name="-framework" value="CoreVideo" if="NME_CAMERA"/>
            <lib name="-liconv" />
         </section>

         <section if="NME_METAL">
            <vflag name="-framework" value="Metal" />
            <vflag name="-framework" value="QuartzCore" />
         </section>

         <section if="HXCPP_JS_PRIME">
            <vflag name="-s" value="EXPORTED_FUNCTIONS=['_malloc']" />
         </section>

         <section if="android">
            <lib name="-ldl" />
            <lib name="-landroid" />
            <lib name="-lGLESv2" />
            <lib name="-lEGL" />
            <lib name="-lz" />
         </section>

         <section if="rpi" unless="winrpi" >
            <libpath name="-L/opt/vc/lib" />
            <lib name="/opt/vc/lib/libGLESv2.so" />
            <lib name="/opt/vc/lib/libEGL.so" />
            <lib name="/opt/vc/lib/libbcm_host.so" />
            <lib name="-lvcos" />
            <lib name="-lvchiq_arm" />
            <lib name="-lmmal_core" />
            <lib name="-lmmal_util" />
            <lib name="-lmmal_vc_client" />
         </section>

         <section if="rpi winrpi" >
            <libpath name="${haxelib:winrpi}/lib" />
            <lib name="-lGLESv2" />
            <lib name="-lEGL" />
            <lib name="-lvcos" />
            <lib name="-lvchiq_arm" />
            <lib name="-lbcm_host" />
            <lib name="-lmmal_core" />
            <lib name="-lmmal_util" />
            <lib name="-lmmal_vc_client" />
         </section>


         <section if="windows" unless="winrt">
            <lib name="gdi32.lib" />
            <lib name="opengl32.lib" unless="NME_ANGLE || NME_DYNAMIC_ANGLE" />
            <lib name="user32.lib" />
            <lib name="kernel32.lib" />
            <lib name="advapi32.lib" />
            <lib name="${SUP_DIR}/windows/dxguid.lib" unless="HXCPP_NO_WINXP_COMPAT || HXCPP_M64"/>
            <lib name="dxguid.lib" if="HXCPP_NO_WINXP_COMPAT || HXCPP_M64"/>
            <lib name="winmm.lib" />
            <lib name="imm32.lib"  />
            <lib name="ole32.lib" />
            <lib name="oleaut32.lib" />
            <lib name="version.lib" />
            <lib name="ws2_32.lib"  />
            <lib name="wldap32.lib" />
            <lib name="shell32.lib" />
            <lib name="comdlg32.lib" />
            <lib name="setupapi.lib" />
            <lib name="d3d9.lib" if="NME_ANGLE"/>
         </section>

         <section if="winrt">
            <lib name="kernel32.lib" />
            <lib name="d3d11.lib" />
            <lib name="Xaudio2.lib" />
            <lib name="Xinput.lib" />
            <lib name="DXGI.lib" />
            <lib name="Dwrite.lib" />
            <lib name="D3dcompiler.lib" />
            <lib name="Runtimeobject.lib" />
         </section>

         <section if="linux">
            <lib name="-lpthread" />
            <lib name="-lrt" />
         </section>
      
      </section>

   </target>


    <files id="__main__" tags="haxe,main,static" replace="true" if="winrt">
      <depend files="hxcpp-depends"/>
      <depend name="${HXCPP}/include/hx/HxcppMain.h"/>
      <file name="${this_dir}/src/winrt/Main.cpp" />
      <compilerflag value="-Iinclude" />
      <compilerflag value="-I${NME_LIBSDL}include" unless="NME_SDL3" />
      <compilerflag value="-I${NME_LIBSDL}include/SDL3" if="NME_SDL3" />
      <compilerflag value="-I${SDL_CONFIG_PATH}" if="SDL_CONFIG_PATH" />
      <cache value="1" />
    </files>

   <!-- Link as libraries to reduce binary size of possible -->
   <files id="native-toolkit-angle">
      <cache value="1" asLibrary="true" project="libAngle" />
   </files>
   <files id="native-toolkit-modplug" >
      <cache value="1" asLibrary="true" project="libModPlug" />
   </files>
   <files id="native-toolkit-ogg"   >
      <!--<cache value="1" asLibrary="true" project="libOgg" />-->
      <cache value="1" project="libOgg" />
   </files>
   <files id="native-toolkit-vorbis" >
      <cache value="1" asLibrary="true" project="libVorbis" />
   </files>

   <section if="NME_LOCAL_TOOLKIT" >
      <files id="native-toolkit-jpeg-8" >
         <cache value="1" asLibrary="true" project="libJpeg8" />
      </files>
      <files id="native-toolkit-jpeg-12" >
         <cache value="1" asLibrary="true" project="libJpeg12" />
      </files>
      <files id="native-toolkit-jpeg-16" >
         <cache value="1" asLibrary="true" project="libJpeg16" />
      </files>
   </section>
   <section unless="NME_LOCAL_TOOLKIT" >
      <files id="native-toolkit-jpeg" >
         <cache value="1" asLibrary="true" project="libJpeg" />
      </files>
   </section>

   <files id="native-toolkit-png" >
      <cache value="1" asLibrary="true" project="libPng" />
   </files>
   <files id="native-toolkit-zlib" >
      <cache value="1" asLibrary="true" project="libZlib" />
   </files>
   <files id="native-toolkit-sdl" >
      <cache value="1" asLibrary="true" project="libSdl" />
      <compilerflag value="-DWINDOWS_IGNORE_PACKING_MISMATCH"  />
      <section if="NME_METAL">
          <compilerflag value="-DSDL_VIDEO_METAL=1" />
          <compilerflag value="-DSDL_VIDEO_RENDER_METAL=1" />
          <file name="${NME_LIBSDL}/src/render/metal/SDL_render_metal.m" />
      </section>

      <section if="NME_MIXER linux" >
         <compilerflag value="-Isupport/linux"  />
         <section unless="NME_LOCAL_TOOLKIT" >
            <compilerflag value="-DSDL_AUDIO_DRIVER_ALSA" />
            <compilerflag value='-DSDL_AUDIO_DRIVER_ALSA_DYNAMIC="libasound.so.2"'  />
            <compilerflag value="-DSDL_AUDIO_DRIVER_PULSEAUDIO" />
            <compilerflag value='-DSDL_AUDIO_DRIVER_PULSEAUDIO_DYNAMIC="libpulse-simple.so.0"' />
         </section>
      </section>
   </files>
   <files id="native-toolkit-sdl-mixer" >
      <cache value="1" asLibrary="true" project="libSdlMixer" />
   </files>
   <files id="native-toolkit-curl" >
      <cache value="1" asLibrary="true" project="libCurl" />
   </files>
   <files id="native-toolkit-freetype" >
      <cache value="1" asLibrary="true" project="libFreetype" />
   </files>

   
   <target id="default" unless="NME_STATIC_LINK || exe_link" >
     <target id="NDLL"/>
   </target>
   
   <target id="default" if="HXCPP_JS_PRIME" >
     <target id="exe"/>
   </target>
   
</xml>
