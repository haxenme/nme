plugins {
    id 'org.jetbrains.kotlin.android' version '1.8.0' apply false
}

apply plugin: 'com.android.application'
::if NME_FIREBASE::
apply plugin: 'com.google.gms.google-services'

::if NME_FIREBASE_CRASHLYTICS::
// Apply the Crashlytics Gradle plugin
apply plugin: 'com.google.firebase.crashlytics'
::end::

::end::

::if NME_VERBOSE::
tasks.withType(JavaCompile) {
    options.deprecation = true
}
::end::

android {
    namespace = "::APP_PACKAGE::"


    ::if ANDROID_COMPILE_SDK_VERSION::
    compileSdkVersion ::ANDROID_COMPILE_SDK_VERSION::
    ::else::
    // This does not effect the output, only the gradle system and some warnings,
    //  so can be regularly updated
    compileSdkVersion 34
    ::end::

    //compileOptions {
    //    sourceCompatibility JavaVersion.VERSION_17
    //}


    buildToolsVersion "34.0.0"
    defaultConfig {
        applicationId "::APP_PACKAGE::"
        minSdkVersion ::ANDROID_MIN_API_LEVEL::
        targetSdkVersion ::ANDROID_TARGET_API_LEVEL::
        versionCode ::APP_BUILD_NUMBER::
        versionName "::APP_VERSION::"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    ::if KEY_STORE::
    signingConfigs {
       release {
           storeFile file("::KEY_STORE::")
           storePassword "::KEY_STORE_PASSWORD::"
           keyAlias "::KEY_STORE_ALIAS::"
           keyPassword "::KEY_STORE_PASSWORD::"
       }
    }
    ::end::

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            ::if KEY_STORE::
            signingConfig = signingConfigs.release
            ::end::

            ::if NME_FIREBASE_CRASHLYTICS::
            firebaseCrashlytics {
                // Enable processing and uploading of native symbols to Crashlytics
                // servers. By default, this is disabled to improve build speeds.
                // This flag must be enabled to see properly-symbolicated native
                // stack traces in the Crashlytics dashboard.
                nativeSymbolUploadEnabled = true

                unstrippedNativeLibsDir = "::NME_UNSTRIPPED_ROOT::"
            }
            ::end::
        }
    }

    splits {

        // Configures multiple APKs based on ABI.
        abi {

            // Enables building multiple APKs per ABI.
            enable = true

            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()

            // Specifies a list of ABIs that Gradle should create APKs for.
            include ::ABIS::

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk = ::UNIVERSAL_APK::
        }
    }
}

dependencies {
    api fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    // Support is in 'androidx.core' now
    ::if ANDROID_BILLING::
    api 'com.android.billingclient:billing:8.0.0'
    ::end::
    testImplementation 'junit:junit:4.12'

    ::if NME_APPLOVIN_KEY::
    implementation 'com.applovin:applovin-sdk:+'
    ::end::

    ::if NME_ADMOB_APP_ID::
    implementation 'com.google.android.gms:play-services-ads:24.2.0'
    implementation 'com.google.android.ump:user-messaging-platform:3.2.0'
    ::end::


    ::if NME_FIREBASE::
      // Add the dependency for the Performance Monitoring library
      implementation 'com.google.firebase:firebase-analytics:22.0.1'

      ::if NME_FIREBASE_PERFORMANCE::
         implementation 'com.google.firebase:firebase-perf:21.0.1'
      ::end::

      ::if NME_FIREBASE_CRASHLYTICS::
         implementation 'com.google.firebase:firebase-crashlytics-ndk:19.0.1'
      ::end::
    ::end::

    def core_version = "1.13.1"

    // Java language implementation
    implementation "androidx.core:core:$core_version"
    // Kotlin
    implementation "androidx.core:core-ktx:$core_version"
    implementation "androidx.activity:activity:1.2.0"
    implementation "androidx.fragment:fragment:1.3.0"
    implementation 'androidx.appcompat:appcompat:1.3.1'

    implementation(platform("org.jetbrains.kotlin:kotlin-bom:1.8.0"))


    dependencies {
        ::foreach (ANDROID_LIBRARY_PROJECTS)::
        api project(':::name::')::end::
    }
}

::if !NME_BUNDLE_RELEASE::
/* Assigns a different version code for each output APK
    other than the universal APK. */

ext.abiCodes = [::ABI_CODES::]

import com.android.build.OutputFile

android.applicationVariants.all { variant ->
    
    variant.outputs.each { output ->
        
        def baseAbiVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        
        if (baseAbiVersionCode != null) {
            
            output.versionCodeOverride = baseAbiVersionCode * 10000 + variant.versionCode
        }
    }
}
::end::
