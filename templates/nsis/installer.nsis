# set the name of the installer
Name "::APP_TITLE::"
Outfile "::INSTALLER_NAME::"

!define MULTIUSER_EXECUTIONLEVEL Highest
!define MULTIUSER_USE_PROGRAMFILES64 1
!define MULTIUSER_MUI
!define MULTIUSER_INSTALLMODE_COMMANDLINE

!define MULTIUSER_INSTALLMODE_INSTDIR "::APP_TITLE::"

!define MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_KEY "Software\::APP_COMPANY::\::APP_PACKAGE::"
!define MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_VALUENAME "InstMode"

!include MultiUser.nsh

 
  
 Var StartMenuFolder

;--------------------------------
;Interface Settings

  !define MUI_ABORTWARNING


!define MUI_ICON ::INSTALLER_ICON::
!define MUI_UNICON ::INSTALLER_ICON::




/*
_____________________________________________________________________________
 
                       File Association
_____________________________________________________________________________
 
 Based on code taken from http://nsis.sourceforge.net/File_Association 
 
 Usage in script:
 1. !include "FileAssociation.nsh"
 2. [Section|Function]
      ${FileAssociationFunction} "Param1" "Param2" "..." $var
    [SectionEnd|FunctionEnd]
 
 FileAssociationFunction=[RegisterExtension|UnRegisterExtension]
 
_____________________________________________________________________________
 
 ${RegisterExtension} "[executable]" "[extension]" "[description]"
 
"[executable]"     ; executable which opens the file format
                   ;
"[extension]"      ; extension, which represents the file format to open
                   ;
"[description]"    ; description for the extension. This will be display in Windows Explorer.
                   ;
 
 
 ${UnRegisterExtension} "[extension]" "[description]"
 
"[extension]"      ; extension, which represents the file format to open
                   ;
"[description]"    ; description for the extension. This will be display in Windows Explorer.
                   ;
 
_____________________________________________________________________________
 
                         Macros
_____________________________________________________________________________
 
 Change log window verbosity (default: 3=no script)
 
 Example:
 !include "FileAssociation.nsh"
 !insertmacro RegisterExtension
 ${FileAssociation_VERBOSE} 4   # all verbosity
 !insertmacro UnRegisterExtension
 ${FileAssociation_VERBOSE} 3   # no script
*/
 
 
!ifndef FileAssociation_INCLUDED
!define FileAssociation_INCLUDED
 
!include Util.nsh
 
!verbose push
!verbose 3
!ifndef _FileAssociation_VERBOSE
  !define _FileAssociation_VERBOSE 3
!endif
!verbose ${_FileAssociation_VERBOSE}
!define FileAssociation_VERBOSE `!insertmacro FileAssociation_VERBOSE`
!verbose pop
 
!macro FileAssociation_VERBOSE _VERBOSE
  !verbose push
  !verbose 3
  !undef _FileAssociation_VERBOSE
  !define _FileAssociation_VERBOSE ${_VERBOSE}
  !verbose pop
!macroend
 
 
 
!macro RegisterExtensionCall _EXECUTABLE _EXTENSION _DESCRIPTION
  !verbose push
  !verbose ${_FileAssociation_VERBOSE}
  Push `${_DESCRIPTION}`
  Push `${_EXTENSION}`
  Push `${_EXECUTABLE}`
  ${CallArtificialFunction} RegisterExtension_
  !verbose pop
!macroend
 
!macro UnRegisterExtensionCall _EXTENSION _DESCRIPTION
  !verbose push
  !verbose ${_FileAssociation_VERBOSE}
  Push `${_EXTENSION}`
  Push `${_DESCRIPTION}`
  ${CallArtificialFunction} UnRegisterExtension_
  !verbose pop
!macroend
 
 
 
!define RegisterExtension `!insertmacro RegisterExtensionCall`
!define un.RegisterExtension `!insertmacro RegisterExtensionCall`
 
!macro RegisterExtension
!macroend
 
!macro un.RegisterExtension
!macroend
 
!macro RegisterExtension_
  !verbose push
  !verbose ${_FileAssociation_VERBOSE}
 
  Exch $R2 ;exe
  Exch
  Exch $R1 ;ext
  Exch
  Exch 2
  Exch $R0 ;desc
  Exch 2
  Push $0
  Push $1
 
  ReadRegStr $1 HKCR $R1 ""  ; read current file association
  StrCmp "$1" "" NoBackup  ; is it empty
  StrCmp "$1" "$R0" NoBackup  ; is it our own
    WriteRegStr HKCR $R1 "backup_val" "$1"  ; backup current value
NoBackup:
  WriteRegStr HKCR $R1 "" "$R0"  ; set our file association
 
  ReadRegStr $0 HKCR $R0 ""
  StrCmp $0 "" 0 Skip
    WriteRegStr HKCR "$R0" "" "$R0"
    WriteRegStr HKCR "$R0\shell" "" "open"
    WriteRegStr HKCR "$R0\DefaultIcon" "" "$R2,0"
Skip:
  WriteRegStr HKCR "$R0\shell\open\command" "" '"$R2" "%1"'
  WriteRegStr HKCR "$R0\shell\edit" "" "Edit $R0"
  WriteRegStr HKCR "$R0\shell\edit\command" "" '"$R2" "%1"'
 
  Pop $1
  Pop $0
  Pop $R2
  Pop $R1
  Pop $R0
 
  !verbose pop
!macroend
 
 
 
!define UnRegisterExtension `!insertmacro UnRegisterExtensionCall`
!define un.UnRegisterExtension `!insertmacro UnRegisterExtensionCall`
 
!macro UnRegisterExtension
!macroend
 
!macro un.UnRegisterExtension
!macroend
 
!macro UnRegisterExtension_
  !verbose push
  !verbose ${_FileAssociation_VERBOSE}
 
  Exch $R1 ;desc
  Exch
  Exch $R0 ;ext
  Exch
  Push $0
  Push $1
 
  ReadRegStr $1 HKCR $R0 ""
  StrCmp $1 $R1 0 NoOwn ; only do this if we own it
  ReadRegStr $1 HKCR $R0 "backup_val"
  StrCmp $1 "" 0 Restore ; if backup="" then delete the whole key
  DeleteRegKey HKCR $R0
  Goto NoOwn
 
Restore:
  WriteRegStr HKCR $R0 "" $1
  DeleteRegValue HKCR $R0 "backup_val"
  DeleteRegKey HKCR $R1 ;Delete key with association name settings
 
NoOwn:
 
  Pop $1
  Pop $0
  Pop $R1
  Pop $R0
 
  !verbose pop
!macroend
 
!endif # !FileAssociation_INCLUDED















;--------------------------------
;Pages

  !insertmacro MULTIUSER_PAGE_INSTALLMODE
  #!insertmacro MUI_PAGE_LICENSE "${NSISDIR}\Docs\Modern UI\License.txt"
  #!insertmacro MUI_PAGE_COMPONENTS
  !insertmacro MUI_PAGE_DIRECTORY
  
   ;Start Menu Folder Page Configuration
  !define MUI_STARTMENUPAGE_REGISTRY_ROOT "SHCTX" 
  !define MUI_STARTMENUPAGE_REGISTRY_KEY "Software\::APP_COMPANY::\::APP_PACKAGE::" 
  !define MUI_STARTMENUPAGE_REGISTRY_VALUENAME "Start Menu Folder"
 
  !insertmacro MUI_PAGE_STARTMENU Application $StartMenuFolder
  !insertmacro MUI_PAGE_INSTFILES

  ::if EXE_NAME::
  #Hack readme checkbox to create desktop icon
  Function finishpageaction
     CreateShortcut "$desktop\::APP_TITLE::.lnk" "$INSTDIR\::EXE_NAME::"
  FunctionEnd

  !define MUI_FINISHPAGE_SHOWREADME ""
  !define MUI_FINISHPAGE_SHOWREADME_NOTCHECKED
  !define MUI_FINISHPAGE_SHOWREADME_TEXT "Create Desktop Shortcut"
  !define MUI_FINISHPAGE_SHOWREADME_FUNCTION finishpageaction

  !define MUI_FINISHPAGE_RUN $INSTDIR\::EXE_NAME::
  !insertmacro MUI_PAGE_FINISH
  ::end::

  !insertmacro MUI_UNPAGE_CONFIRM
  !insertmacro MUI_UNPAGE_INSTFILES

;--------------------------------
;Languages
 
  !insertmacro MUI_LANGUAGE "English"


Function .onInit
  !insertmacro MULTIUSER_INIT
FunctionEnd


 
# default section start
Section
 
 
# specify file to go in output path
::foreach INSTALLER_DIRS::
# define output path
SetOutPath $INSTDIR\::dir::

::foreach files::
File ::__current__:: ::end::
::end::

SetOutPath $INSTDIR
#;Store installation folder
#  WriteRegStr HKCU "Software\::APP_PACKAGE::" "" $INSTDIR
 
WriteUninstaller $INSTDIR\uninstall.exe

#Write uninstall strings to registry
WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\::APP_PACKAGE::" \
                 "DisplayName" "::APP_TITLE::"
WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\::APP_PACKAGE::" \
                 "UninstallString" "$\"$INSTDIR\uninstall.exe$\""
WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\::APP_PACKAGE::" \
                 "QuietUninstallString" "$\"$INSTDIR\uninstall.exe$\" /S"
WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\::APP_PACKAGE::" \
                 "DisplayIcon" "$\"$INSTDIR\icon.ico$\""
WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\::APP_PACKAGE::" \
                 "Publisher" "::APP_COMPANY::"
WriteRegStr SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\::APP_PACKAGE::" \
                 "DisplayVersion" "::APP_VERSION::"

WriteRegStr SHCTX "${MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_KEY}" "${MULTIUSER_INSTALLMODE_DEFAULT_REGISTRY_VALUENAME}" \
                  $MultiUser.InstallMode


::foreach fileAssociations::
${RegisterExtension} "$INSTDIR\::EXE_NAME::" "::extension::" "::description::"
::end::


!insertmacro MUI_STARTMENU_WRITE_BEGIN Application
 
 ;Create shortcuts
 CreateDirectory "$SMPROGRAMS\$StartMenuFolder"
 CreateShortCut "$SMPROGRAMS\$StartMenuFolder\::APP_TITLE::.lnk" "$INSTDIR\::EXE_NAME::"
 
!insertmacro MUI_STARTMENU_WRITE_END


#-------
# default section end
SectionEnd
 
# create a section to define what the uninstaller does.
# the section will always be named "Uninstall"
Section "Uninstall"
 

!insertmacro MUI_STARTMENU_GETFOLDER Application $StartMenuFolder

# Always delete uninstaller first
Delete $INSTDIR\uninstall.exe
 
# now delete installed file
::foreach UNINSTALL_FILES::
Delete $INSTDIR\::__current__::::end::

::foreach INSTALLER_DIRS::
RmDir $INSTDIR::if (dir!="")::\::end::::dir::::end::

Delete "$SMPROGRAMS\$StartMenuFolder\::APP_TITLE::.lnk"
RMDir "$SMPROGRAMS\$StartMenuFolder"
Delete "$desktop\::APP_TITLE::.lnk"

DeleteRegKey SHCTX "Software\Microsoft\Windows\CurrentVersion\Uninstall\::APP_PACKAGE::"
DeleteRegKey SHCTX "Software\::APP_COMPANY::\::APP_PACKAGE::"
DeleteRegKey /ifempty SHCTX "Software\::APP_COMPANY::"

::foreach fileAssociations::
${UnRegisterExtension} "::extension::" "::description::"
::end::

 
SectionEnd

Function un.onInit
  !insertmacro MULTIUSER_UNINIT
FunctionEnd

